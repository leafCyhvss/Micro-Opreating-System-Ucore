
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:

.text
.globl kern_entry
kern_entry:
    # load pa of boot pgdir
    movl $REALLOC(__boot_pgdir), %eax
c0100000:	b8 00 20 1c 00       	mov    $0x1c2000,%eax
    movl %eax, %cr3
c0100005:	0f 22 d8             	mov    %eax,%cr3

    # enable paging
    movl %cr0, %eax
c0100008:	0f 20 c0             	mov    %cr0,%eax
    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
c010000b:	0d 2f 00 05 80       	or     $0x8005002f,%eax
    andl $~(CR0_TS | CR0_EM), %eax
c0100010:	83 e0 f3             	and    $0xfffffff3,%eax
    movl %eax, %cr0
c0100013:	0f 22 c0             	mov    %eax,%cr0

    # update eip
    # now, eip = 0x1.....
    leal next, %eax
c0100016:	8d 05 1e 00 10 c0    	lea    0xc010001e,%eax
    # set eip = KERNBASE + 0x1.....
    jmp *%eax
c010001c:	ff e0                	jmp    *%eax

c010001e <next>:
next:

    # unmap va 0 ~ 4M, it's temporary mapping
    xorl %eax, %eax
c010001e:	31 c0                	xor    %eax,%eax
    movl %eax, __boot_pgdir
c0100020:	a3 00 20 1c c0       	mov    %eax,0xc01c2000

    # set ebp, esp
    movl $0x0, %ebp
c0100025:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010002a:	bc 00 10 13 c0       	mov    $0xc0131000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c010002f:	e8 02 00 00 00       	call   c0100036 <kern_init>

c0100034 <spin>:

# should never get here
spin:
    jmp spin
c0100034:	eb fe                	jmp    c0100034 <spin>

c0100036 <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c0100036:	55                   	push   %ebp
c0100037:	89 e5                	mov    %esp,%ebp
c0100039:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c010003c:	ba a4 72 1c c0       	mov    $0xc01c72a4,%edx
c0100041:	b8 00 40 1c c0       	mov    $0xc01c4000,%eax
c0100046:	29 c2                	sub    %eax,%edx
c0100048:	89 d0                	mov    %edx,%eax
c010004a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010004e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100055:	00 
c0100056:	c7 04 24 00 40 1c c0 	movl   $0xc01c4000,(%esp)
c010005d:	e8 f1 cc 00 00       	call   c010cd53 <memset>

    cons_init();                // init the console
c0100062:	e8 15 1f 00 00       	call   c0101f7c <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c0100067:	c7 45 f4 60 d6 10 c0 	movl   $0xc010d660,-0xc(%ebp)
    cprintf("%s\n\n", message);
c010006e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100071:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100075:	c7 04 24 7c d6 10 c0 	movl   $0xc010d67c,(%esp)
c010007c:	e8 2d 02 00 00       	call   c01002ae <cprintf>

    print_kerninfo();
c0100081:	e8 d7 09 00 00       	call   c0100a5d <print_kerninfo>

    grade_backtrace();
c0100086:	e8 a2 00 00 00       	call   c010012d <grade_backtrace>

    pmm_init();                 // init physical memory management
c010008b:	e8 19 7a 00 00       	call   c0107aa9 <pmm_init>

    pic_init();                 // init interrupt controller
c0100090:	e8 44 20 00 00       	call   c01020d9 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100095:	e8 c8 21 00 00       	call   c0102262 <idt_init>

    vmm_init();                 // init virtual memory management
c010009a:	e8 a1 3c 00 00       	call   c0103d40 <vmm_init>
    sched_init();               // init scheduler
c010009f:	e8 f9 be 00 00       	call   c010bf9d <sched_init>
    proc_init();                // init process table
c01000a4:	e8 92 bb 00 00       	call   c010bc3b <proc_init>
    
    ide_init();                 // init ide devices
c01000a9:	e8 69 0e 00 00       	call   c0100f17 <ide_init>
    swap_init();                // init swap
c01000ae:	e8 09 54 00 00       	call   c01054bc <swap_init>

    clock_init();               // init clock interrupt
c01000b3:	e8 7a 16 00 00       	call   c0101732 <clock_init>
    intr_enable();              // enable irq interrupt
c01000b8:	e8 57 21 00 00       	call   c0102214 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000bd:	e8 38 bd 00 00       	call   c010bdfa <cpu_idle>

c01000c2 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000c2:	55                   	push   %ebp
c01000c3:	89 e5                	mov    %esp,%ebp
c01000c5:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000c8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000cf:	00 
c01000d0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000d7:	00 
c01000d8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000df:	e8 c7 0d 00 00       	call   c0100eab <mon_backtrace>
}
c01000e4:	c9                   	leave  
c01000e5:	c3                   	ret    

c01000e6 <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000e6:	55                   	push   %ebp
c01000e7:	89 e5                	mov    %esp,%ebp
c01000e9:	53                   	push   %ebx
c01000ea:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000ed:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000f0:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000f3:	8d 55 08             	lea    0x8(%ebp),%edx
c01000f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01000f9:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000fd:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100101:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100105:	89 04 24             	mov    %eax,(%esp)
c0100108:	e8 b5 ff ff ff       	call   c01000c2 <grade_backtrace2>
}
c010010d:	83 c4 14             	add    $0x14,%esp
c0100110:	5b                   	pop    %ebx
c0100111:	5d                   	pop    %ebp
c0100112:	c3                   	ret    

c0100113 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100113:	55                   	push   %ebp
c0100114:	89 e5                	mov    %esp,%ebp
c0100116:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c0100119:	8b 45 10             	mov    0x10(%ebp),%eax
c010011c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100120:	8b 45 08             	mov    0x8(%ebp),%eax
c0100123:	89 04 24             	mov    %eax,(%esp)
c0100126:	e8 bb ff ff ff       	call   c01000e6 <grade_backtrace1>
}
c010012b:	c9                   	leave  
c010012c:	c3                   	ret    

c010012d <grade_backtrace>:

void
grade_backtrace(void) {
c010012d:	55                   	push   %ebp
c010012e:	89 e5                	mov    %esp,%ebp
c0100130:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100133:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c0100138:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c010013f:	ff 
c0100140:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100144:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010014b:	e8 c3 ff ff ff       	call   c0100113 <grade_backtrace0>
}
c0100150:	c9                   	leave  
c0100151:	c3                   	ret    

c0100152 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100152:	55                   	push   %ebp
c0100153:	89 e5                	mov    %esp,%ebp
c0100155:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100158:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c010015b:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c010015e:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100161:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100164:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100168:	0f b7 c0             	movzwl %ax,%eax
c010016b:	83 e0 03             	and    $0x3,%eax
c010016e:	89 c2                	mov    %eax,%edx
c0100170:	a1 00 40 1c c0       	mov    0xc01c4000,%eax
c0100175:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100179:	89 44 24 04          	mov    %eax,0x4(%esp)
c010017d:	c7 04 24 81 d6 10 c0 	movl   $0xc010d681,(%esp)
c0100184:	e8 25 01 00 00       	call   c01002ae <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c0100189:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010018d:	0f b7 d0             	movzwl %ax,%edx
c0100190:	a1 00 40 1c c0       	mov    0xc01c4000,%eax
c0100195:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100199:	89 44 24 04          	mov    %eax,0x4(%esp)
c010019d:	c7 04 24 8f d6 10 c0 	movl   $0xc010d68f,(%esp)
c01001a4:	e8 05 01 00 00       	call   c01002ae <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c01001a9:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001ad:	0f b7 d0             	movzwl %ax,%edx
c01001b0:	a1 00 40 1c c0       	mov    0xc01c4000,%eax
c01001b5:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001b9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001bd:	c7 04 24 9d d6 10 c0 	movl   $0xc010d69d,(%esp)
c01001c4:	e8 e5 00 00 00       	call   c01002ae <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001c9:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001cd:	0f b7 d0             	movzwl %ax,%edx
c01001d0:	a1 00 40 1c c0       	mov    0xc01c4000,%eax
c01001d5:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001dd:	c7 04 24 ab d6 10 c0 	movl   $0xc010d6ab,(%esp)
c01001e4:	e8 c5 00 00 00       	call   c01002ae <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001e9:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001ed:	0f b7 d0             	movzwl %ax,%edx
c01001f0:	a1 00 40 1c c0       	mov    0xc01c4000,%eax
c01001f5:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001f9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001fd:	c7 04 24 b9 d6 10 c0 	movl   $0xc010d6b9,(%esp)
c0100204:	e8 a5 00 00 00       	call   c01002ae <cprintf>
    round ++;
c0100209:	a1 00 40 1c c0       	mov    0xc01c4000,%eax
c010020e:	83 c0 01             	add    $0x1,%eax
c0100211:	a3 00 40 1c c0       	mov    %eax,0xc01c4000
}
c0100216:	c9                   	leave  
c0100217:	c3                   	ret    

c0100218 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c0100218:	55                   	push   %ebp
c0100219:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c010021b:	5d                   	pop    %ebp
c010021c:	c3                   	ret    

c010021d <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c010021d:	55                   	push   %ebp
c010021e:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100220:	5d                   	pop    %ebp
c0100221:	c3                   	ret    

c0100222 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100222:	55                   	push   %ebp
c0100223:	89 e5                	mov    %esp,%ebp
c0100225:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c0100228:	e8 25 ff ff ff       	call   c0100152 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c010022d:	c7 04 24 c8 d6 10 c0 	movl   $0xc010d6c8,(%esp)
c0100234:	e8 75 00 00 00       	call   c01002ae <cprintf>
    lab1_switch_to_user();
c0100239:	e8 da ff ff ff       	call   c0100218 <lab1_switch_to_user>
    lab1_print_cur_status();
c010023e:	e8 0f ff ff ff       	call   c0100152 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100243:	c7 04 24 e8 d6 10 c0 	movl   $0xc010d6e8,(%esp)
c010024a:	e8 5f 00 00 00       	call   c01002ae <cprintf>
    lab1_switch_to_kernel();
c010024f:	e8 c9 ff ff ff       	call   c010021d <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100254:	e8 f9 fe ff ff       	call   c0100152 <lab1_print_cur_status>
}
c0100259:	c9                   	leave  
c010025a:	c3                   	ret    

c010025b <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c010025b:	55                   	push   %ebp
c010025c:	89 e5                	mov    %esp,%ebp
c010025e:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100261:	8b 45 08             	mov    0x8(%ebp),%eax
c0100264:	89 04 24             	mov    %eax,(%esp)
c0100267:	e8 3c 1d 00 00       	call   c0101fa8 <cons_putc>
    (*cnt) ++;
c010026c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010026f:	8b 00                	mov    (%eax),%eax
c0100271:	8d 50 01             	lea    0x1(%eax),%edx
c0100274:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100277:	89 10                	mov    %edx,(%eax)
}
c0100279:	c9                   	leave  
c010027a:	c3                   	ret    

c010027b <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c010027b:	55                   	push   %ebp
c010027c:	89 e5                	mov    %esp,%ebp
c010027e:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c0100281:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c0100288:	8b 45 0c             	mov    0xc(%ebp),%eax
c010028b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010028f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100292:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100296:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100299:	89 44 24 04          	mov    %eax,0x4(%esp)
c010029d:	c7 04 24 5b 02 10 c0 	movl   $0xc010025b,(%esp)
c01002a4:	e8 fc cd 00 00       	call   c010d0a5 <vprintfmt>
    return cnt;
c01002a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01002ac:	c9                   	leave  
c01002ad:	c3                   	ret    

c01002ae <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c01002ae:	55                   	push   %ebp
c01002af:	89 e5                	mov    %esp,%ebp
c01002b1:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c01002b4:	8d 45 0c             	lea    0xc(%ebp),%eax
c01002b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c01002ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01002c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01002c4:	89 04 24             	mov    %eax,(%esp)
c01002c7:	e8 af ff ff ff       	call   c010027b <vcprintf>
c01002cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01002cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01002d2:	c9                   	leave  
c01002d3:	c3                   	ret    

c01002d4 <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c01002d4:	55                   	push   %ebp
c01002d5:	89 e5                	mov    %esp,%ebp
c01002d7:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c01002da:	8b 45 08             	mov    0x8(%ebp),%eax
c01002dd:	89 04 24             	mov    %eax,(%esp)
c01002e0:	e8 c3 1c 00 00       	call   c0101fa8 <cons_putc>
}
c01002e5:	c9                   	leave  
c01002e6:	c3                   	ret    

c01002e7 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c01002e7:	55                   	push   %ebp
c01002e8:	89 e5                	mov    %esp,%ebp
c01002ea:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c01002ed:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01002f4:	eb 13                	jmp    c0100309 <cputs+0x22>
        cputch(c, &cnt);
c01002f6:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01002fa:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01002fd:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100301:	89 04 24             	mov    %eax,(%esp)
c0100304:	e8 52 ff ff ff       	call   c010025b <cputch>
    while ((c = *str ++) != '\0') {
c0100309:	8b 45 08             	mov    0x8(%ebp),%eax
c010030c:	8d 50 01             	lea    0x1(%eax),%edx
c010030f:	89 55 08             	mov    %edx,0x8(%ebp)
c0100312:	0f b6 00             	movzbl (%eax),%eax
c0100315:	88 45 f7             	mov    %al,-0x9(%ebp)
c0100318:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c010031c:	75 d8                	jne    c01002f6 <cputs+0xf>
    }
    cputch('\n', &cnt);
c010031e:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0100321:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100325:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010032c:	e8 2a ff ff ff       	call   c010025b <cputch>
    return cnt;
c0100331:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100334:	c9                   	leave  
c0100335:	c3                   	ret    

c0100336 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c0100336:	55                   	push   %ebp
c0100337:	89 e5                	mov    %esp,%ebp
c0100339:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c010033c:	e8 a3 1c 00 00       	call   c0101fe4 <cons_getc>
c0100341:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100344:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100348:	74 f2                	je     c010033c <getchar+0x6>
        /* do nothing */;
    return c;
c010034a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010034d:	c9                   	leave  
c010034e:	c3                   	ret    

c010034f <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c010034f:	55                   	push   %ebp
c0100350:	89 e5                	mov    %esp,%ebp
c0100352:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c0100355:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100359:	74 13                	je     c010036e <readline+0x1f>
        cprintf("%s", prompt);
c010035b:	8b 45 08             	mov    0x8(%ebp),%eax
c010035e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100362:	c7 04 24 07 d7 10 c0 	movl   $0xc010d707,(%esp)
c0100369:	e8 40 ff ff ff       	call   c01002ae <cprintf>
    }
    int i = 0, c;
c010036e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100375:	e8 bc ff ff ff       	call   c0100336 <getchar>
c010037a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c010037d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100381:	79 07                	jns    c010038a <readline+0x3b>
            return NULL;
c0100383:	b8 00 00 00 00       	mov    $0x0,%eax
c0100388:	eb 79                	jmp    c0100403 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010038a:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010038e:	7e 28                	jle    c01003b8 <readline+0x69>
c0100390:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0100397:	7f 1f                	jg     c01003b8 <readline+0x69>
            cputchar(c);
c0100399:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010039c:	89 04 24             	mov    %eax,(%esp)
c010039f:	e8 30 ff ff ff       	call   c01002d4 <cputchar>
            buf[i ++] = c;
c01003a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01003a7:	8d 50 01             	lea    0x1(%eax),%edx
c01003aa:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01003ad:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01003b0:	88 90 20 40 1c c0    	mov    %dl,-0x3fe3bfe0(%eax)
c01003b6:	eb 46                	jmp    c01003fe <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c01003b8:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01003bc:	75 17                	jne    c01003d5 <readline+0x86>
c01003be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003c2:	7e 11                	jle    c01003d5 <readline+0x86>
            cputchar(c);
c01003c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003c7:	89 04 24             	mov    %eax,(%esp)
c01003ca:	e8 05 ff ff ff       	call   c01002d4 <cputchar>
            i --;
c01003cf:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01003d3:	eb 29                	jmp    c01003fe <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c01003d5:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01003d9:	74 06                	je     c01003e1 <readline+0x92>
c01003db:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01003df:	75 1d                	jne    c01003fe <readline+0xaf>
            cputchar(c);
c01003e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003e4:	89 04 24             	mov    %eax,(%esp)
c01003e7:	e8 e8 fe ff ff       	call   c01002d4 <cputchar>
            buf[i] = '\0';
c01003ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01003ef:	05 20 40 1c c0       	add    $0xc01c4020,%eax
c01003f4:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01003f7:	b8 20 40 1c c0       	mov    $0xc01c4020,%eax
c01003fc:	eb 05                	jmp    c0100403 <readline+0xb4>
        }
    }
c01003fe:	e9 72 ff ff ff       	jmp    c0100375 <readline+0x26>
}
c0100403:	c9                   	leave  
c0100404:	c3                   	ret    

c0100405 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100405:	55                   	push   %ebp
c0100406:	89 e5                	mov    %esp,%ebp
c0100408:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c010040b:	a1 20 44 1c c0       	mov    0xc01c4420,%eax
c0100410:	85 c0                	test   %eax,%eax
c0100412:	74 02                	je     c0100416 <__panic+0x11>
        goto panic_dead;
c0100414:	eb 59                	jmp    c010046f <__panic+0x6a>
    }
    is_panic = 1;
c0100416:	c7 05 20 44 1c c0 01 	movl   $0x1,0xc01c4420
c010041d:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100420:	8d 45 14             	lea    0x14(%ebp),%eax
c0100423:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100426:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100429:	89 44 24 08          	mov    %eax,0x8(%esp)
c010042d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100430:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100434:	c7 04 24 0a d7 10 c0 	movl   $0xc010d70a,(%esp)
c010043b:	e8 6e fe ff ff       	call   c01002ae <cprintf>
    vcprintf(fmt, ap);
c0100440:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100443:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100447:	8b 45 10             	mov    0x10(%ebp),%eax
c010044a:	89 04 24             	mov    %eax,(%esp)
c010044d:	e8 29 fe ff ff       	call   c010027b <vcprintf>
    cprintf("\n");
c0100452:	c7 04 24 26 d7 10 c0 	movl   $0xc010d726,(%esp)
c0100459:	e8 50 fe ff ff       	call   c01002ae <cprintf>
    
    cprintf("stack trackback:\n");
c010045e:	c7 04 24 28 d7 10 c0 	movl   $0xc010d728,(%esp)
c0100465:	e8 44 fe ff ff       	call   c01002ae <cprintf>
    print_stackframe();
c010046a:	e8 38 07 00 00       	call   c0100ba7 <print_stackframe>
    
    va_end(ap);

panic_dead:
    intr_disable();
c010046f:	e8 a6 1d 00 00       	call   c010221a <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100474:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010047b:	e8 5c 09 00 00       	call   c0100ddc <kmonitor>
    }
c0100480:	eb f2                	jmp    c0100474 <__panic+0x6f>

c0100482 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100482:	55                   	push   %ebp
c0100483:	89 e5                	mov    %esp,%ebp
c0100485:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100488:	8d 45 14             	lea    0x14(%ebp),%eax
c010048b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c010048e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100491:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100495:	8b 45 08             	mov    0x8(%ebp),%eax
c0100498:	89 44 24 04          	mov    %eax,0x4(%esp)
c010049c:	c7 04 24 3a d7 10 c0 	movl   $0xc010d73a,(%esp)
c01004a3:	e8 06 fe ff ff       	call   c01002ae <cprintf>
    vcprintf(fmt, ap);
c01004a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004ab:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004af:	8b 45 10             	mov    0x10(%ebp),%eax
c01004b2:	89 04 24             	mov    %eax,(%esp)
c01004b5:	e8 c1 fd ff ff       	call   c010027b <vcprintf>
    cprintf("\n");
c01004ba:	c7 04 24 26 d7 10 c0 	movl   $0xc010d726,(%esp)
c01004c1:	e8 e8 fd ff ff       	call   c01002ae <cprintf>
    va_end(ap);
}
c01004c6:	c9                   	leave  
c01004c7:	c3                   	ret    

c01004c8 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c01004c8:	55                   	push   %ebp
c01004c9:	89 e5                	mov    %esp,%ebp
    return is_panic;
c01004cb:	a1 20 44 1c c0       	mov    0xc01c4420,%eax
}
c01004d0:	5d                   	pop    %ebp
c01004d1:	c3                   	ret    

c01004d2 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01004d2:	55                   	push   %ebp
c01004d3:	89 e5                	mov    %esp,%ebp
c01004d5:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01004d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004db:	8b 00                	mov    (%eax),%eax
c01004dd:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004e0:	8b 45 10             	mov    0x10(%ebp),%eax
c01004e3:	8b 00                	mov    (%eax),%eax
c01004e5:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c01004ef:	e9 d2 00 00 00       	jmp    c01005c6 <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c01004f4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01004f7:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01004fa:	01 d0                	add    %edx,%eax
c01004fc:	89 c2                	mov    %eax,%edx
c01004fe:	c1 ea 1f             	shr    $0x1f,%edx
c0100501:	01 d0                	add    %edx,%eax
c0100503:	d1 f8                	sar    %eax
c0100505:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100508:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010050b:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010050e:	eb 04                	jmp    c0100514 <stab_binsearch+0x42>
            m --;
c0100510:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
        while (m >= l && stabs[m].n_type != type) {
c0100514:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100517:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010051a:	7c 1f                	jl     c010053b <stab_binsearch+0x69>
c010051c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010051f:	89 d0                	mov    %edx,%eax
c0100521:	01 c0                	add    %eax,%eax
c0100523:	01 d0                	add    %edx,%eax
c0100525:	c1 e0 02             	shl    $0x2,%eax
c0100528:	89 c2                	mov    %eax,%edx
c010052a:	8b 45 08             	mov    0x8(%ebp),%eax
c010052d:	01 d0                	add    %edx,%eax
c010052f:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100533:	0f b6 c0             	movzbl %al,%eax
c0100536:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100539:	75 d5                	jne    c0100510 <stab_binsearch+0x3e>
        }
        if (m < l) {    // no match in [l, m]
c010053b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010053e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100541:	7d 0b                	jge    c010054e <stab_binsearch+0x7c>
            l = true_m + 1;
c0100543:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100546:	83 c0 01             	add    $0x1,%eax
c0100549:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c010054c:	eb 78                	jmp    c01005c6 <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c010054e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c0100555:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100558:	89 d0                	mov    %edx,%eax
c010055a:	01 c0                	add    %eax,%eax
c010055c:	01 d0                	add    %edx,%eax
c010055e:	c1 e0 02             	shl    $0x2,%eax
c0100561:	89 c2                	mov    %eax,%edx
c0100563:	8b 45 08             	mov    0x8(%ebp),%eax
c0100566:	01 d0                	add    %edx,%eax
c0100568:	8b 40 08             	mov    0x8(%eax),%eax
c010056b:	3b 45 18             	cmp    0x18(%ebp),%eax
c010056e:	73 13                	jae    c0100583 <stab_binsearch+0xb1>
            *region_left = m;
c0100570:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100573:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100576:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c0100578:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010057b:	83 c0 01             	add    $0x1,%eax
c010057e:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100581:	eb 43                	jmp    c01005c6 <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c0100583:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100586:	89 d0                	mov    %edx,%eax
c0100588:	01 c0                	add    %eax,%eax
c010058a:	01 d0                	add    %edx,%eax
c010058c:	c1 e0 02             	shl    $0x2,%eax
c010058f:	89 c2                	mov    %eax,%edx
c0100591:	8b 45 08             	mov    0x8(%ebp),%eax
c0100594:	01 d0                	add    %edx,%eax
c0100596:	8b 40 08             	mov    0x8(%eax),%eax
c0100599:	3b 45 18             	cmp    0x18(%ebp),%eax
c010059c:	76 16                	jbe    c01005b4 <stab_binsearch+0xe2>
            *region_right = m - 1;
c010059e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005a1:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005a4:	8b 45 10             	mov    0x10(%ebp),%eax
c01005a7:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01005a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005ac:	83 e8 01             	sub    $0x1,%eax
c01005af:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005b2:	eb 12                	jmp    c01005c6 <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01005b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005ba:	89 10                	mov    %edx,(%eax)
            l = m;
c01005bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005bf:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01005c2:	83 45 18 01          	addl   $0x1,0x18(%ebp)
    while (l <= r) {
c01005c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01005c9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01005cc:	0f 8e 22 ff ff ff    	jle    c01004f4 <stab_binsearch+0x22>
        }
    }

    if (!any_matches) {
c01005d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01005d6:	75 0f                	jne    c01005e7 <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01005d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005db:	8b 00                	mov    (%eax),%eax
c01005dd:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005e0:	8b 45 10             	mov    0x10(%ebp),%eax
c01005e3:	89 10                	mov    %edx,(%eax)
c01005e5:	eb 3f                	jmp    c0100626 <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c01005e7:	8b 45 10             	mov    0x10(%ebp),%eax
c01005ea:	8b 00                	mov    (%eax),%eax
c01005ec:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c01005ef:	eb 04                	jmp    c01005f5 <stab_binsearch+0x123>
c01005f1:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c01005f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005f8:	8b 00                	mov    (%eax),%eax
c01005fa:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01005fd:	7d 1f                	jge    c010061e <stab_binsearch+0x14c>
c01005ff:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100602:	89 d0                	mov    %edx,%eax
c0100604:	01 c0                	add    %eax,%eax
c0100606:	01 d0                	add    %edx,%eax
c0100608:	c1 e0 02             	shl    $0x2,%eax
c010060b:	89 c2                	mov    %eax,%edx
c010060d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100610:	01 d0                	add    %edx,%eax
c0100612:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100616:	0f b6 c0             	movzbl %al,%eax
c0100619:	3b 45 14             	cmp    0x14(%ebp),%eax
c010061c:	75 d3                	jne    c01005f1 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c010061e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100621:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100624:	89 10                	mov    %edx,(%eax)
    }
}
c0100626:	c9                   	leave  
c0100627:	c3                   	ret    

c0100628 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c0100628:	55                   	push   %ebp
c0100629:	89 e5                	mov    %esp,%ebp
c010062b:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c010062e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100631:	c7 00 58 d7 10 c0    	movl   $0xc010d758,(%eax)
    info->eip_line = 0;
c0100637:	8b 45 0c             	mov    0xc(%ebp),%eax
c010063a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100641:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100644:	c7 40 08 58 d7 10 c0 	movl   $0xc010d758,0x8(%eax)
    info->eip_fn_namelen = 9;
c010064b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010064e:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c0100655:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100658:	8b 55 08             	mov    0x8(%ebp),%edx
c010065b:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c010065e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100661:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0100668:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c010066f:	76 21                	jbe    c0100692 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100671:	c7 45 f4 c0 03 11 c0 	movl   $0xc01103c0,-0xc(%ebp)
        stab_end = __STAB_END__;
c0100678:	c7 45 f0 7c 76 12 c0 	movl   $0xc012767c,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c010067f:	c7 45 ec 7d 76 12 c0 	movl   $0xc012767d,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c0100686:	c7 45 e8 32 e5 12 c0 	movl   $0xc012e532,-0x18(%ebp)
c010068d:	e9 ea 00 00 00       	jmp    c010077c <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c0100692:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c0100699:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010069e:	85 c0                	test   %eax,%eax
c01006a0:	74 11                	je     c01006b3 <debuginfo_eip+0x8b>
c01006a2:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c01006a7:	8b 40 18             	mov    0x18(%eax),%eax
c01006aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01006ad:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01006b1:	75 0a                	jne    c01006bd <debuginfo_eip+0x95>
            return -1;
c01006b3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006b8:	e9 9e 03 00 00       	jmp    c0100a5b <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01006bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006c0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01006c7:	00 
c01006c8:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01006cf:	00 
c01006d0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006d4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01006d7:	89 04 24             	mov    %eax,(%esp)
c01006da:	e8 8a 3f 00 00       	call   c0104669 <user_mem_check>
c01006df:	85 c0                	test   %eax,%eax
c01006e1:	75 0a                	jne    c01006ed <debuginfo_eip+0xc5>
            return -1;
c01006e3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006e8:	e9 6e 03 00 00       	jmp    c0100a5b <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c01006ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006f0:	8b 00                	mov    (%eax),%eax
c01006f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c01006f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006f8:	8b 40 04             	mov    0x4(%eax),%eax
c01006fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c01006fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100701:	8b 40 08             	mov    0x8(%eax),%eax
c0100704:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c0100707:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010070a:	8b 40 0c             	mov    0xc(%eax),%eax
c010070d:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100710:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100713:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100716:	29 c2                	sub    %eax,%edx
c0100718:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010071b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100722:	00 
c0100723:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100727:	89 44 24 04          	mov    %eax,0x4(%esp)
c010072b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010072e:	89 04 24             	mov    %eax,(%esp)
c0100731:	e8 33 3f 00 00       	call   c0104669 <user_mem_check>
c0100736:	85 c0                	test   %eax,%eax
c0100738:	75 0a                	jne    c0100744 <debuginfo_eip+0x11c>
            return -1;
c010073a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010073f:	e9 17 03 00 00       	jmp    c0100a5b <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100744:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100747:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010074a:	29 c2                	sub    %eax,%edx
c010074c:	89 d0                	mov    %edx,%eax
c010074e:	89 c2                	mov    %eax,%edx
c0100750:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100753:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010075a:	00 
c010075b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010075f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100763:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100766:	89 04 24             	mov    %eax,(%esp)
c0100769:	e8 fb 3e 00 00       	call   c0104669 <user_mem_check>
c010076e:	85 c0                	test   %eax,%eax
c0100770:	75 0a                	jne    c010077c <debuginfo_eip+0x154>
            return -1;
c0100772:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100777:	e9 df 02 00 00       	jmp    c0100a5b <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c010077c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010077f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100782:	76 0d                	jbe    c0100791 <debuginfo_eip+0x169>
c0100784:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100787:	83 e8 01             	sub    $0x1,%eax
c010078a:	0f b6 00             	movzbl (%eax),%eax
c010078d:	84 c0                	test   %al,%al
c010078f:	74 0a                	je     c010079b <debuginfo_eip+0x173>
        return -1;
c0100791:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100796:	e9 c0 02 00 00       	jmp    c0100a5b <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c010079b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01007a2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01007a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007a8:	29 c2                	sub    %eax,%edx
c01007aa:	89 d0                	mov    %edx,%eax
c01007ac:	c1 f8 02             	sar    $0x2,%eax
c01007af:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01007b5:	83 e8 01             	sub    $0x1,%eax
c01007b8:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01007bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01007be:	89 44 24 10          	mov    %eax,0x10(%esp)
c01007c2:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01007c9:	00 
c01007ca:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01007cd:	89 44 24 08          	mov    %eax,0x8(%esp)
c01007d1:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01007d4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01007d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007db:	89 04 24             	mov    %eax,(%esp)
c01007de:	e8 ef fc ff ff       	call   c01004d2 <stab_binsearch>
    if (lfile == 0)
c01007e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007e6:	85 c0                	test   %eax,%eax
c01007e8:	75 0a                	jne    c01007f4 <debuginfo_eip+0x1cc>
        return -1;
c01007ea:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007ef:	e9 67 02 00 00       	jmp    c0100a5b <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c01007f4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007f7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01007fa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0100800:	8b 45 08             	mov    0x8(%ebp),%eax
c0100803:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100807:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c010080e:	00 
c010080f:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100812:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100816:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0100819:	89 44 24 04          	mov    %eax,0x4(%esp)
c010081d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100820:	89 04 24             	mov    %eax,(%esp)
c0100823:	e8 aa fc ff ff       	call   c01004d2 <stab_binsearch>

    if (lfun <= rfun) {
c0100828:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010082b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010082e:	39 c2                	cmp    %eax,%edx
c0100830:	7f 7c                	jg     c01008ae <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100832:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100835:	89 c2                	mov    %eax,%edx
c0100837:	89 d0                	mov    %edx,%eax
c0100839:	01 c0                	add    %eax,%eax
c010083b:	01 d0                	add    %edx,%eax
c010083d:	c1 e0 02             	shl    $0x2,%eax
c0100840:	89 c2                	mov    %eax,%edx
c0100842:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100845:	01 d0                	add    %edx,%eax
c0100847:	8b 10                	mov    (%eax),%edx
c0100849:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010084c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010084f:	29 c1                	sub    %eax,%ecx
c0100851:	89 c8                	mov    %ecx,%eax
c0100853:	39 c2                	cmp    %eax,%edx
c0100855:	73 22                	jae    c0100879 <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0100857:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010085a:	89 c2                	mov    %eax,%edx
c010085c:	89 d0                	mov    %edx,%eax
c010085e:	01 c0                	add    %eax,%eax
c0100860:	01 d0                	add    %edx,%eax
c0100862:	c1 e0 02             	shl    $0x2,%eax
c0100865:	89 c2                	mov    %eax,%edx
c0100867:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010086a:	01 d0                	add    %edx,%eax
c010086c:	8b 10                	mov    (%eax),%edx
c010086e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100871:	01 c2                	add    %eax,%edx
c0100873:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100876:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c0100879:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010087c:	89 c2                	mov    %eax,%edx
c010087e:	89 d0                	mov    %edx,%eax
c0100880:	01 c0                	add    %eax,%eax
c0100882:	01 d0                	add    %edx,%eax
c0100884:	c1 e0 02             	shl    $0x2,%eax
c0100887:	89 c2                	mov    %eax,%edx
c0100889:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010088c:	01 d0                	add    %edx,%eax
c010088e:	8b 50 08             	mov    0x8(%eax),%edx
c0100891:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100894:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c0100897:	8b 45 0c             	mov    0xc(%ebp),%eax
c010089a:	8b 40 10             	mov    0x10(%eax),%eax
c010089d:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01008a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01008a3:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01008a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01008a9:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01008ac:	eb 15                	jmp    c01008c3 <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01008ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008b1:	8b 55 08             	mov    0x8(%ebp),%edx
c01008b4:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01008b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008ba:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01008bd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01008c0:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01008c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008c6:	8b 40 08             	mov    0x8(%eax),%eax
c01008c9:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01008d0:	00 
c01008d1:	89 04 24             	mov    %eax,(%esp)
c01008d4:	e8 ee c2 00 00       	call   c010cbc7 <strfind>
c01008d9:	89 c2                	mov    %eax,%edx
c01008db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008de:	8b 40 08             	mov    0x8(%eax),%eax
c01008e1:	29 c2                	sub    %eax,%edx
c01008e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008e6:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c01008e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01008ec:	89 44 24 10          	mov    %eax,0x10(%esp)
c01008f0:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c01008f7:	00 
c01008f8:	8d 45 c8             	lea    -0x38(%ebp),%eax
c01008fb:	89 44 24 08          	mov    %eax,0x8(%esp)
c01008ff:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100902:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100906:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100909:	89 04 24             	mov    %eax,(%esp)
c010090c:	e8 c1 fb ff ff       	call   c01004d2 <stab_binsearch>
    if (lline <= rline) {
c0100911:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100914:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100917:	39 c2                	cmp    %eax,%edx
c0100919:	7f 24                	jg     c010093f <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c010091b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010091e:	89 c2                	mov    %eax,%edx
c0100920:	89 d0                	mov    %edx,%eax
c0100922:	01 c0                	add    %eax,%eax
c0100924:	01 d0                	add    %edx,%eax
c0100926:	c1 e0 02             	shl    $0x2,%eax
c0100929:	89 c2                	mov    %eax,%edx
c010092b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010092e:	01 d0                	add    %edx,%eax
c0100930:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0100934:	0f b7 d0             	movzwl %ax,%edx
c0100937:	8b 45 0c             	mov    0xc(%ebp),%eax
c010093a:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c010093d:	eb 13                	jmp    c0100952 <debuginfo_eip+0x32a>
        return -1;
c010093f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100944:	e9 12 01 00 00       	jmp    c0100a5b <debuginfo_eip+0x433>
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c0100949:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010094c:	83 e8 01             	sub    $0x1,%eax
c010094f:	89 45 cc             	mov    %eax,-0x34(%ebp)
    while (lline >= lfile
c0100952:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100955:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100958:	39 c2                	cmp    %eax,%edx
c010095a:	7c 56                	jl     c01009b2 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c010095c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010095f:	89 c2                	mov    %eax,%edx
c0100961:	89 d0                	mov    %edx,%eax
c0100963:	01 c0                	add    %eax,%eax
c0100965:	01 d0                	add    %edx,%eax
c0100967:	c1 e0 02             	shl    $0x2,%eax
c010096a:	89 c2                	mov    %eax,%edx
c010096c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010096f:	01 d0                	add    %edx,%eax
c0100971:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100975:	3c 84                	cmp    $0x84,%al
c0100977:	74 39                	je     c01009b2 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0100979:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010097c:	89 c2                	mov    %eax,%edx
c010097e:	89 d0                	mov    %edx,%eax
c0100980:	01 c0                	add    %eax,%eax
c0100982:	01 d0                	add    %edx,%eax
c0100984:	c1 e0 02             	shl    $0x2,%eax
c0100987:	89 c2                	mov    %eax,%edx
c0100989:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010098c:	01 d0                	add    %edx,%eax
c010098e:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100992:	3c 64                	cmp    $0x64,%al
c0100994:	75 b3                	jne    c0100949 <debuginfo_eip+0x321>
c0100996:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100999:	89 c2                	mov    %eax,%edx
c010099b:	89 d0                	mov    %edx,%eax
c010099d:	01 c0                	add    %eax,%eax
c010099f:	01 d0                	add    %edx,%eax
c01009a1:	c1 e0 02             	shl    $0x2,%eax
c01009a4:	89 c2                	mov    %eax,%edx
c01009a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009a9:	01 d0                	add    %edx,%eax
c01009ab:	8b 40 08             	mov    0x8(%eax),%eax
c01009ae:	85 c0                	test   %eax,%eax
c01009b0:	74 97                	je     c0100949 <debuginfo_eip+0x321>
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01009b2:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01009b8:	39 c2                	cmp    %eax,%edx
c01009ba:	7c 46                	jl     c0100a02 <debuginfo_eip+0x3da>
c01009bc:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009bf:	89 c2                	mov    %eax,%edx
c01009c1:	89 d0                	mov    %edx,%eax
c01009c3:	01 c0                	add    %eax,%eax
c01009c5:	01 d0                	add    %edx,%eax
c01009c7:	c1 e0 02             	shl    $0x2,%eax
c01009ca:	89 c2                	mov    %eax,%edx
c01009cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009cf:	01 d0                	add    %edx,%eax
c01009d1:	8b 10                	mov    (%eax),%edx
c01009d3:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01009d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01009d9:	29 c1                	sub    %eax,%ecx
c01009db:	89 c8                	mov    %ecx,%eax
c01009dd:	39 c2                	cmp    %eax,%edx
c01009df:	73 21                	jae    c0100a02 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c01009e1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009e4:	89 c2                	mov    %eax,%edx
c01009e6:	89 d0                	mov    %edx,%eax
c01009e8:	01 c0                	add    %eax,%eax
c01009ea:	01 d0                	add    %edx,%eax
c01009ec:	c1 e0 02             	shl    $0x2,%eax
c01009ef:	89 c2                	mov    %eax,%edx
c01009f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009f4:	01 d0                	add    %edx,%eax
c01009f6:	8b 10                	mov    (%eax),%edx
c01009f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01009fb:	01 c2                	add    %eax,%edx
c01009fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a00:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100a02:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100a05:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100a08:	39 c2                	cmp    %eax,%edx
c0100a0a:	7d 4a                	jge    c0100a56 <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0100a0c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100a0f:	83 c0 01             	add    $0x1,%eax
c0100a12:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100a15:	eb 18                	jmp    c0100a2f <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100a17:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a1a:	8b 40 14             	mov    0x14(%eax),%eax
c0100a1d:	8d 50 01             	lea    0x1(%eax),%edx
c0100a20:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a23:	89 50 14             	mov    %edx,0x14(%eax)
             lline ++) {
c0100a26:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a29:	83 c0 01             	add    $0x1,%eax
c0100a2c:	89 45 cc             	mov    %eax,-0x34(%ebp)
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a2f:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100a32:	8b 45 d0             	mov    -0x30(%ebp),%eax
        for (lline = lfun + 1;
c0100a35:	39 c2                	cmp    %eax,%edx
c0100a37:	7d 1d                	jge    c0100a56 <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a39:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a3c:	89 c2                	mov    %eax,%edx
c0100a3e:	89 d0                	mov    %edx,%eax
c0100a40:	01 c0                	add    %eax,%eax
c0100a42:	01 d0                	add    %edx,%eax
c0100a44:	c1 e0 02             	shl    $0x2,%eax
c0100a47:	89 c2                	mov    %eax,%edx
c0100a49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a4c:	01 d0                	add    %edx,%eax
c0100a4e:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a52:	3c a0                	cmp    $0xa0,%al
c0100a54:	74 c1                	je     c0100a17 <debuginfo_eip+0x3ef>
        }
    }
    return 0;
c0100a56:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100a5b:	c9                   	leave  
c0100a5c:	c3                   	ret    

c0100a5d <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100a5d:	55                   	push   %ebp
c0100a5e:	89 e5                	mov    %esp,%ebp
c0100a60:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100a63:	c7 04 24 62 d7 10 c0 	movl   $0xc010d762,(%esp)
c0100a6a:	e8 3f f8 ff ff       	call   c01002ae <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100a6f:	c7 44 24 04 36 00 10 	movl   $0xc0100036,0x4(%esp)
c0100a76:	c0 
c0100a77:	c7 04 24 7b d7 10 c0 	movl   $0xc010d77b,(%esp)
c0100a7e:	e8 2b f8 ff ff       	call   c01002ae <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100a83:	c7 44 24 04 5a d6 10 	movl   $0xc010d65a,0x4(%esp)
c0100a8a:	c0 
c0100a8b:	c7 04 24 93 d7 10 c0 	movl   $0xc010d793,(%esp)
c0100a92:	e8 17 f8 ff ff       	call   c01002ae <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100a97:	c7 44 24 04 00 40 1c 	movl   $0xc01c4000,0x4(%esp)
c0100a9e:	c0 
c0100a9f:	c7 04 24 ab d7 10 c0 	movl   $0xc010d7ab,(%esp)
c0100aa6:	e8 03 f8 ff ff       	call   c01002ae <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c0100aab:	c7 44 24 04 a4 72 1c 	movl   $0xc01c72a4,0x4(%esp)
c0100ab2:	c0 
c0100ab3:	c7 04 24 c3 d7 10 c0 	movl   $0xc010d7c3,(%esp)
c0100aba:	e8 ef f7 ff ff       	call   c01002ae <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100abf:	b8 a4 72 1c c0       	mov    $0xc01c72a4,%eax
c0100ac4:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100aca:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c0100acf:	29 c2                	sub    %eax,%edx
c0100ad1:	89 d0                	mov    %edx,%eax
c0100ad3:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100ad9:	85 c0                	test   %eax,%eax
c0100adb:	0f 48 c2             	cmovs  %edx,%eax
c0100ade:	c1 f8 0a             	sar    $0xa,%eax
c0100ae1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ae5:	c7 04 24 dc d7 10 c0 	movl   $0xc010d7dc,(%esp)
c0100aec:	e8 bd f7 ff ff       	call   c01002ae <cprintf>
}
c0100af1:	c9                   	leave  
c0100af2:	c3                   	ret    

c0100af3 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100af3:	55                   	push   %ebp
c0100af4:	89 e5                	mov    %esp,%ebp
c0100af6:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100afc:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100aff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b03:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b06:	89 04 24             	mov    %eax,(%esp)
c0100b09:	e8 1a fb ff ff       	call   c0100628 <debuginfo_eip>
c0100b0e:	85 c0                	test   %eax,%eax
c0100b10:	74 15                	je     c0100b27 <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100b12:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b15:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b19:	c7 04 24 06 d8 10 c0 	movl   $0xc010d806,(%esp)
c0100b20:	e8 89 f7 ff ff       	call   c01002ae <cprintf>
c0100b25:	eb 6d                	jmp    c0100b94 <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b27:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100b2e:	eb 1c                	jmp    c0100b4c <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100b30:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100b33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b36:	01 d0                	add    %edx,%eax
c0100b38:	0f b6 00             	movzbl (%eax),%eax
c0100b3b:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b41:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100b44:	01 ca                	add    %ecx,%edx
c0100b46:	88 02                	mov    %al,(%edx)
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b48:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100b4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b4f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100b52:	7f dc                	jg     c0100b30 <print_debuginfo+0x3d>
        }
        fnname[j] = '\0';
c0100b54:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100b5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b5d:	01 d0                	add    %edx,%eax
c0100b5f:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100b62:	8b 45 ec             	mov    -0x14(%ebp),%eax
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100b65:	8b 55 08             	mov    0x8(%ebp),%edx
c0100b68:	89 d1                	mov    %edx,%ecx
c0100b6a:	29 c1                	sub    %eax,%ecx
c0100b6c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100b6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100b72:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100b76:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b7c:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100b80:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100b84:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b88:	c7 04 24 22 d8 10 c0 	movl   $0xc010d822,(%esp)
c0100b8f:	e8 1a f7 ff ff       	call   c01002ae <cprintf>
    }
}
c0100b94:	c9                   	leave  
c0100b95:	c3                   	ret    

c0100b96 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100b96:	55                   	push   %ebp
c0100b97:	89 e5                	mov    %esp,%ebp
c0100b99:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100b9c:	8b 45 04             	mov    0x4(%ebp),%eax
c0100b9f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100ba2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100ba5:	c9                   	leave  
c0100ba6:	c3                   	ret    

c0100ba7 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100ba7:	55                   	push   %ebp
c0100ba8:	89 e5                	mov    %esp,%ebp
c0100baa:	53                   	push   %ebx
c0100bab:	83 ec 44             	sub    $0x44,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100bae:	89 e8                	mov    %ebp,%eax
c0100bb0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return ebp;
c0100bb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp=read_ebp(),eip=read_eip();
c0100bb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100bb9:	e8 d8 ff ff ff       	call   c0100b96 <read_eip>
c0100bbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i;//这里在for循环里定义好像不行的样子就拿出来了
	for(i=0;ebp!=0&&i<STACKFRAME_DEPTH;i++)
c0100bc1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100bc8:	e9 8d 00 00 00       	jmp    c0100c5a <print_stackframe+0xb3>
    {   
		cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100bcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100bd0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100bd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bd7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bdb:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0100be2:	e8 c7 f6 ff ff       	call   c01002ae <cprintf>
		uint32_t *args = (uint32_t *)ebp + 2;       //ebp+8指向参数，+4指向返回值
c0100be7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bea:	83 c0 08             	add    $0x8,%eax
c0100bed:	89 45 e8             	mov    %eax,-0x18(%ebp)
		cprintf("arg :0x%08x 0x%08x 0x%08x 0x%08x\n",*(args+0),*(args+1),*(args+2),*(args+3));
c0100bf0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100bf3:	83 c0 0c             	add    $0xc,%eax
c0100bf6:	8b 18                	mov    (%eax),%ebx
c0100bf8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100bfb:	83 c0 08             	add    $0x8,%eax
c0100bfe:	8b 08                	mov    (%eax),%ecx
c0100c00:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c03:	83 c0 04             	add    $0x4,%eax
c0100c06:	8b 10                	mov    (%eax),%edx
c0100c08:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c0b:	8b 00                	mov    (%eax),%eax
c0100c0d:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c0100c11:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100c15:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100c19:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c1d:	c7 04 24 50 d8 10 c0 	movl   $0xc010d850,(%esp)
c0100c24:	e8 85 f6 ff ff       	call   c01002ae <cprintf>
        //依次打印调用函数的参数1 2 3 4
		cprintf("\n");
c0100c29:	c7 04 24 72 d8 10 c0 	movl   $0xc010d872,(%esp)
c0100c30:	e8 79 f6 ff ff       	call   c01002ae <cprintf>
		print_debuginfo(eip - 1);//eip指向的是下一条指令，所以这里减1  指针占4
c0100c35:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100c38:	83 e8 01             	sub    $0x1,%eax
c0100c3b:	89 04 24             	mov    %eax,(%esp)
c0100c3e:	e8 b0 fe ff ff       	call   c0100af3 <print_debuginfo>
		eip = ((uint32_t *)ebp)[1]; //此时eip指向返回地址
c0100c43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c46:	83 c0 04             	add    $0x4,%eax
c0100c49:	8b 00                	mov    (%eax),%eax
c0100c4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ebp = ((uint32_t *)ebp)[0];//ebp存的是调用者edp，所以这里就复原了调用前edp值
c0100c4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c51:	8b 00                	mov    (%eax),%eax
c0100c53:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(i=0;ebp!=0&&i<STACKFRAME_DEPTH;i++)
c0100c56:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100c5a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100c5e:	74 0a                	je     c0100c6a <print_stackframe+0xc3>
c0100c60:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100c64:	0f 8e 63 ff ff ff    	jle    c0100bcd <print_stackframe+0x26>
	}
}
c0100c6a:	83 c4 44             	add    $0x44,%esp
c0100c6d:	5b                   	pop    %ebx
c0100c6e:	5d                   	pop    %ebp
c0100c6f:	c3                   	ret    

c0100c70 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100c70:	55                   	push   %ebp
c0100c71:	89 e5                	mov    %esp,%ebp
c0100c73:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100c76:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c7d:	eb 0c                	jmp    c0100c8b <parse+0x1b>
            *buf ++ = '\0';
c0100c7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c82:	8d 50 01             	lea    0x1(%eax),%edx
c0100c85:	89 55 08             	mov    %edx,0x8(%ebp)
c0100c88:	c6 00 00             	movb   $0x0,(%eax)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c8e:	0f b6 00             	movzbl (%eax),%eax
c0100c91:	84 c0                	test   %al,%al
c0100c93:	74 1d                	je     c0100cb2 <parse+0x42>
c0100c95:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c98:	0f b6 00             	movzbl (%eax),%eax
c0100c9b:	0f be c0             	movsbl %al,%eax
c0100c9e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ca2:	c7 04 24 f4 d8 10 c0 	movl   $0xc010d8f4,(%esp)
c0100ca9:	e8 e6 be 00 00       	call   c010cb94 <strchr>
c0100cae:	85 c0                	test   %eax,%eax
c0100cb0:	75 cd                	jne    c0100c7f <parse+0xf>
        }
        if (*buf == '\0') {
c0100cb2:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cb5:	0f b6 00             	movzbl (%eax),%eax
c0100cb8:	84 c0                	test   %al,%al
c0100cba:	75 02                	jne    c0100cbe <parse+0x4e>
            break;
c0100cbc:	eb 67                	jmp    c0100d25 <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100cbe:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100cc2:	75 14                	jne    c0100cd8 <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100cc4:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100ccb:	00 
c0100ccc:	c7 04 24 f9 d8 10 c0 	movl   $0xc010d8f9,(%esp)
c0100cd3:	e8 d6 f5 ff ff       	call   c01002ae <cprintf>
        }
        argv[argc ++] = buf;
c0100cd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cdb:	8d 50 01             	lea    0x1(%eax),%edx
c0100cde:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100ce1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100ce8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100ceb:	01 c2                	add    %eax,%edx
c0100ced:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cf0:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100cf2:	eb 04                	jmp    c0100cf8 <parse+0x88>
            buf ++;
c0100cf4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100cf8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cfb:	0f b6 00             	movzbl (%eax),%eax
c0100cfe:	84 c0                	test   %al,%al
c0100d00:	74 1d                	je     c0100d1f <parse+0xaf>
c0100d02:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d05:	0f b6 00             	movzbl (%eax),%eax
c0100d08:	0f be c0             	movsbl %al,%eax
c0100d0b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d0f:	c7 04 24 f4 d8 10 c0 	movl   $0xc010d8f4,(%esp)
c0100d16:	e8 79 be 00 00       	call   c010cb94 <strchr>
c0100d1b:	85 c0                	test   %eax,%eax
c0100d1d:	74 d5                	je     c0100cf4 <parse+0x84>
        }
    }
c0100d1f:	90                   	nop
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100d20:	e9 66 ff ff ff       	jmp    c0100c8b <parse+0x1b>
    return argc;
c0100d25:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100d28:	c9                   	leave  
c0100d29:	c3                   	ret    

c0100d2a <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100d2a:	55                   	push   %ebp
c0100d2b:	89 e5                	mov    %esp,%ebp
c0100d2d:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100d30:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d33:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d37:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d3a:	89 04 24             	mov    %eax,(%esp)
c0100d3d:	e8 2e ff ff ff       	call   c0100c70 <parse>
c0100d42:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100d45:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100d49:	75 0a                	jne    c0100d55 <runcmd+0x2b>
        return 0;
c0100d4b:	b8 00 00 00 00       	mov    $0x0,%eax
c0100d50:	e9 85 00 00 00       	jmp    c0100dda <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d55:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d5c:	eb 5c                	jmp    c0100dba <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100d5e:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100d61:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d64:	89 d0                	mov    %edx,%eax
c0100d66:	01 c0                	add    %eax,%eax
c0100d68:	01 d0                	add    %edx,%eax
c0100d6a:	c1 e0 02             	shl    $0x2,%eax
c0100d6d:	05 00 10 13 c0       	add    $0xc0131000,%eax
c0100d72:	8b 00                	mov    (%eax),%eax
c0100d74:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100d78:	89 04 24             	mov    %eax,(%esp)
c0100d7b:	e8 75 bd 00 00       	call   c010caf5 <strcmp>
c0100d80:	85 c0                	test   %eax,%eax
c0100d82:	75 32                	jne    c0100db6 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100d84:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d87:	89 d0                	mov    %edx,%eax
c0100d89:	01 c0                	add    %eax,%eax
c0100d8b:	01 d0                	add    %edx,%eax
c0100d8d:	c1 e0 02             	shl    $0x2,%eax
c0100d90:	05 00 10 13 c0       	add    $0xc0131000,%eax
c0100d95:	8b 40 08             	mov    0x8(%eax),%eax
c0100d98:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100d9b:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0100d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100da1:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100da5:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100da8:	83 c2 04             	add    $0x4,%edx
c0100dab:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100daf:	89 0c 24             	mov    %ecx,(%esp)
c0100db2:	ff d0                	call   *%eax
c0100db4:	eb 24                	jmp    c0100dda <runcmd+0xb0>
    for (i = 0; i < NCOMMANDS; i ++) {
c0100db6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100dba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100dbd:	83 f8 02             	cmp    $0x2,%eax
c0100dc0:	76 9c                	jbe    c0100d5e <runcmd+0x34>
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100dc2:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100dc5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100dc9:	c7 04 24 17 d9 10 c0 	movl   $0xc010d917,(%esp)
c0100dd0:	e8 d9 f4 ff ff       	call   c01002ae <cprintf>
    return 0;
c0100dd5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dda:	c9                   	leave  
c0100ddb:	c3                   	ret    

c0100ddc <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100ddc:	55                   	push   %ebp
c0100ddd:	89 e5                	mov    %esp,%ebp
c0100ddf:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100de2:	c7 04 24 30 d9 10 c0 	movl   $0xc010d930,(%esp)
c0100de9:	e8 c0 f4 ff ff       	call   c01002ae <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100dee:	c7 04 24 58 d9 10 c0 	movl   $0xc010d958,(%esp)
c0100df5:	e8 b4 f4 ff ff       	call   c01002ae <cprintf>

    if (tf != NULL) {
c0100dfa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100dfe:	74 0b                	je     c0100e0b <kmonitor+0x2f>
        print_trapframe(tf);
c0100e00:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e03:	89 04 24             	mov    %eax,(%esp)
c0100e06:	e8 0c 16 00 00       	call   c0102417 <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100e0b:	c7 04 24 7d d9 10 c0 	movl   $0xc010d97d,(%esp)
c0100e12:	e8 38 f5 ff ff       	call   c010034f <readline>
c0100e17:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100e1a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100e1e:	74 18                	je     c0100e38 <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0100e20:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e23:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e2a:	89 04 24             	mov    %eax,(%esp)
c0100e2d:	e8 f8 fe ff ff       	call   c0100d2a <runcmd>
c0100e32:	85 c0                	test   %eax,%eax
c0100e34:	79 02                	jns    c0100e38 <kmonitor+0x5c>
                break;
c0100e36:	eb 02                	jmp    c0100e3a <kmonitor+0x5e>
            }
        }
    }
c0100e38:	eb d1                	jmp    c0100e0b <kmonitor+0x2f>
}
c0100e3a:	c9                   	leave  
c0100e3b:	c3                   	ret    

c0100e3c <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100e3c:	55                   	push   %ebp
c0100e3d:	89 e5                	mov    %esp,%ebp
c0100e3f:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e42:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e49:	eb 3f                	jmp    c0100e8a <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100e4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e4e:	89 d0                	mov    %edx,%eax
c0100e50:	01 c0                	add    %eax,%eax
c0100e52:	01 d0                	add    %edx,%eax
c0100e54:	c1 e0 02             	shl    $0x2,%eax
c0100e57:	05 00 10 13 c0       	add    $0xc0131000,%eax
c0100e5c:	8b 48 04             	mov    0x4(%eax),%ecx
c0100e5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e62:	89 d0                	mov    %edx,%eax
c0100e64:	01 c0                	add    %eax,%eax
c0100e66:	01 d0                	add    %edx,%eax
c0100e68:	c1 e0 02             	shl    $0x2,%eax
c0100e6b:	05 00 10 13 c0       	add    $0xc0131000,%eax
c0100e70:	8b 00                	mov    (%eax),%eax
c0100e72:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100e76:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e7a:	c7 04 24 81 d9 10 c0 	movl   $0xc010d981,(%esp)
c0100e81:	e8 28 f4 ff ff       	call   c01002ae <cprintf>
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e86:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e8d:	83 f8 02             	cmp    $0x2,%eax
c0100e90:	76 b9                	jbe    c0100e4b <mon_help+0xf>
    }
    return 0;
c0100e92:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e97:	c9                   	leave  
c0100e98:	c3                   	ret    

c0100e99 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100e99:	55                   	push   %ebp
c0100e9a:	89 e5                	mov    %esp,%ebp
c0100e9c:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100e9f:	e8 b9 fb ff ff       	call   c0100a5d <print_kerninfo>
    return 0;
c0100ea4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ea9:	c9                   	leave  
c0100eaa:	c3                   	ret    

c0100eab <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100eab:	55                   	push   %ebp
c0100eac:	89 e5                	mov    %esp,%ebp
c0100eae:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100eb1:	e8 f1 fc ff ff       	call   c0100ba7 <print_stackframe>
    return 0;
c0100eb6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ebb:	c9                   	leave  
c0100ebc:	c3                   	ret    

c0100ebd <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0100ebd:	55                   	push   %ebp
c0100ebe:	89 e5                	mov    %esp,%ebp
c0100ec0:	83 ec 14             	sub    $0x14,%esp
c0100ec3:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ec6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0100eca:	90                   	nop
c0100ecb:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0100ecf:	83 c0 07             	add    $0x7,%eax
c0100ed2:	0f b7 c0             	movzwl %ax,%eax
c0100ed5:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100ed9:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100edd:	89 c2                	mov    %eax,%edx
c0100edf:	ec                   	in     (%dx),%al
c0100ee0:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0100ee3:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0100ee7:	0f b6 c0             	movzbl %al,%eax
c0100eea:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100eed:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100ef0:	25 80 00 00 00       	and    $0x80,%eax
c0100ef5:	85 c0                	test   %eax,%eax
c0100ef7:	75 d2                	jne    c0100ecb <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c0100ef9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0100efd:	74 11                	je     c0100f10 <ide_wait_ready+0x53>
c0100eff:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f02:	83 e0 21             	and    $0x21,%eax
c0100f05:	85 c0                	test   %eax,%eax
c0100f07:	74 07                	je     c0100f10 <ide_wait_ready+0x53>
        return -1;
c0100f09:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100f0e:	eb 05                	jmp    c0100f15 <ide_wait_ready+0x58>
    }
    return 0;
c0100f10:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f15:	c9                   	leave  
c0100f16:	c3                   	ret    

c0100f17 <ide_init>:

void
ide_init(void) {
c0100f17:	55                   	push   %ebp
c0100f18:	89 e5                	mov    %esp,%ebp
c0100f1a:	57                   	push   %edi
c0100f1b:	53                   	push   %ebx
c0100f1c:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0100f22:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0100f28:	e9 d6 02 00 00       	jmp    c0101203 <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0100f2d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f31:	c1 e0 03             	shl    $0x3,%eax
c0100f34:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0100f3b:	29 c2                	sub    %eax,%edx
c0100f3d:	8d 82 40 44 1c c0    	lea    -0x3fe3bbc0(%edx),%eax
c0100f43:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0100f46:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f4a:	66 d1 e8             	shr    %ax
c0100f4d:	0f b7 c0             	movzwl %ax,%eax
c0100f50:	0f b7 04 85 8c d9 10 	movzwl -0x3fef2674(,%eax,4),%eax
c0100f57:	c0 
c0100f58:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0100f5c:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f60:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100f67:	00 
c0100f68:	89 04 24             	mov    %eax,(%esp)
c0100f6b:	e8 4d ff ff ff       	call   c0100ebd <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0100f70:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f74:	83 e0 01             	and    $0x1,%eax
c0100f77:	c1 e0 04             	shl    $0x4,%eax
c0100f7a:	83 c8 e0             	or     $0xffffffe0,%eax
c0100f7d:	0f b6 c0             	movzbl %al,%eax
c0100f80:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100f84:	83 c2 06             	add    $0x6,%edx
c0100f87:	0f b7 d2             	movzwl %dx,%edx
c0100f8a:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0100f8e:	88 45 d1             	mov    %al,-0x2f(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100f91:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0100f95:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0100f99:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0100f9a:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f9e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100fa5:	00 
c0100fa6:	89 04 24             	mov    %eax,(%esp)
c0100fa9:	e8 0f ff ff ff       	call   c0100ebd <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0100fae:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fb2:	83 c0 07             	add    $0x7,%eax
c0100fb5:	0f b7 c0             	movzwl %ax,%eax
c0100fb8:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c0100fbc:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c0100fc0:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c0100fc4:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c0100fc8:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0100fc9:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fcd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100fd4:	00 
c0100fd5:	89 04 24             	mov    %eax,(%esp)
c0100fd8:	e8 e0 fe ff ff       	call   c0100ebd <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c0100fdd:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fe1:	83 c0 07             	add    $0x7,%eax
c0100fe4:	0f b7 c0             	movzwl %ax,%eax
c0100fe7:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100feb:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c0100fef:	89 c2                	mov    %eax,%edx
c0100ff1:	ec                   	in     (%dx),%al
c0100ff2:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c0100ff5:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0100ff9:	84 c0                	test   %al,%al
c0100ffb:	0f 84 f7 01 00 00    	je     c01011f8 <ide_init+0x2e1>
c0101001:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101005:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010100c:	00 
c010100d:	89 04 24             	mov    %eax,(%esp)
c0101010:	e8 a8 fe ff ff       	call   c0100ebd <ide_wait_ready>
c0101015:	85 c0                	test   %eax,%eax
c0101017:	0f 85 db 01 00 00    	jne    c01011f8 <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c010101d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101021:	c1 e0 03             	shl    $0x3,%eax
c0101024:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010102b:	29 c2                	sub    %eax,%edx
c010102d:	8d 82 40 44 1c c0    	lea    -0x3fe3bbc0(%edx),%eax
c0101033:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0101036:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c010103a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010103d:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101043:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101046:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
    asm volatile (
c010104d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0101050:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0101053:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101056:	89 cb                	mov    %ecx,%ebx
c0101058:	89 df                	mov    %ebx,%edi
c010105a:	89 c1                	mov    %eax,%ecx
c010105c:	fc                   	cld    
c010105d:	f2 6d                	repnz insl (%dx),%es:(%edi)
c010105f:	89 c8                	mov    %ecx,%eax
c0101061:	89 fb                	mov    %edi,%ebx
c0101063:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101066:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101069:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c010106f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101072:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101075:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c010107b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c010107e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101081:	25 00 00 00 04       	and    $0x4000000,%eax
c0101086:	85 c0                	test   %eax,%eax
c0101088:	74 0e                	je     c0101098 <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c010108a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010108d:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101093:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101096:	eb 09                	jmp    c01010a1 <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101098:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010109b:	8b 40 78             	mov    0x78(%eax),%eax
c010109e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c01010a1:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01010a5:	c1 e0 03             	shl    $0x3,%eax
c01010a8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01010af:	29 c2                	sub    %eax,%edx
c01010b1:	81 c2 40 44 1c c0    	add    $0xc01c4440,%edx
c01010b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01010ba:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c01010bd:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01010c1:	c1 e0 03             	shl    $0x3,%eax
c01010c4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01010cb:	29 c2                	sub    %eax,%edx
c01010cd:	81 c2 40 44 1c c0    	add    $0xc01c4440,%edx
c01010d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01010d6:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c01010d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01010dc:	83 c0 62             	add    $0x62,%eax
c01010df:	0f b7 00             	movzwl (%eax),%eax
c01010e2:	0f b7 c0             	movzwl %ax,%eax
c01010e5:	25 00 02 00 00       	and    $0x200,%eax
c01010ea:	85 c0                	test   %eax,%eax
c01010ec:	75 24                	jne    c0101112 <ide_init+0x1fb>
c01010ee:	c7 44 24 0c 94 d9 10 	movl   $0xc010d994,0xc(%esp)
c01010f5:	c0 
c01010f6:	c7 44 24 08 d7 d9 10 	movl   $0xc010d9d7,0x8(%esp)
c01010fd:	c0 
c01010fe:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0101105:	00 
c0101106:	c7 04 24 ec d9 10 c0 	movl   $0xc010d9ec,(%esp)
c010110d:	e8 f3 f2 ff ff       	call   c0100405 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101112:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101116:	c1 e0 03             	shl    $0x3,%eax
c0101119:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101120:	29 c2                	sub    %eax,%edx
c0101122:	8d 82 40 44 1c c0    	lea    -0x3fe3bbc0(%edx),%eax
c0101128:	83 c0 0c             	add    $0xc,%eax
c010112b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010112e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101131:	83 c0 36             	add    $0x36,%eax
c0101134:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0101137:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c010113e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101145:	eb 34                	jmp    c010117b <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101147:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010114a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010114d:	01 c2                	add    %eax,%edx
c010114f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101152:	8d 48 01             	lea    0x1(%eax),%ecx
c0101155:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101158:	01 c8                	add    %ecx,%eax
c010115a:	0f b6 00             	movzbl (%eax),%eax
c010115d:	88 02                	mov    %al,(%edx)
c010115f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101162:	8d 50 01             	lea    0x1(%eax),%edx
c0101165:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101168:	01 c2                	add    %eax,%edx
c010116a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010116d:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0101170:	01 c8                	add    %ecx,%eax
c0101172:	0f b6 00             	movzbl (%eax),%eax
c0101175:	88 02                	mov    %al,(%edx)
        for (i = 0; i < length; i += 2) {
c0101177:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c010117b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010117e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101181:	72 c4                	jb     c0101147 <ide_init+0x230>
        }
        do {
            model[i] = '\0';
c0101183:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101186:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101189:	01 d0                	add    %edx,%eax
c010118b:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c010118e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101191:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101194:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101197:	85 c0                	test   %eax,%eax
c0101199:	74 0f                	je     c01011aa <ide_init+0x293>
c010119b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010119e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01011a1:	01 d0                	add    %edx,%eax
c01011a3:	0f b6 00             	movzbl (%eax),%eax
c01011a6:	3c 20                	cmp    $0x20,%al
c01011a8:	74 d9                	je     c0101183 <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c01011aa:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01011ae:	c1 e0 03             	shl    $0x3,%eax
c01011b1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01011b8:	29 c2                	sub    %eax,%edx
c01011ba:	8d 82 40 44 1c c0    	lea    -0x3fe3bbc0(%edx),%eax
c01011c0:	8d 48 0c             	lea    0xc(%eax),%ecx
c01011c3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01011c7:	c1 e0 03             	shl    $0x3,%eax
c01011ca:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01011d1:	29 c2                	sub    %eax,%edx
c01011d3:	8d 82 40 44 1c c0    	lea    -0x3fe3bbc0(%edx),%eax
c01011d9:	8b 50 08             	mov    0x8(%eax),%edx
c01011dc:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01011e0:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c01011e4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01011e8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01011ec:	c7 04 24 fe d9 10 c0 	movl   $0xc010d9fe,(%esp)
c01011f3:	e8 b6 f0 ff ff       	call   c01002ae <cprintf>
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c01011f8:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01011fc:	83 c0 01             	add    $0x1,%eax
c01011ff:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0101203:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0101208:	0f 86 1f fd ff ff    	jbe    c0100f2d <ide_init+0x16>
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c010120e:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101215:	e8 91 0e 00 00       	call   c01020ab <pic_enable>
    pic_enable(IRQ_IDE2);
c010121a:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101221:	e8 85 0e 00 00       	call   c01020ab <pic_enable>
}
c0101226:	81 c4 50 02 00 00    	add    $0x250,%esp
c010122c:	5b                   	pop    %ebx
c010122d:	5f                   	pop    %edi
c010122e:	5d                   	pop    %ebp
c010122f:	c3                   	ret    

c0101230 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101230:	55                   	push   %ebp
c0101231:	89 e5                	mov    %esp,%ebp
c0101233:	83 ec 04             	sub    $0x4,%esp
c0101236:	8b 45 08             	mov    0x8(%ebp),%eax
c0101239:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c010123d:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101242:	77 24                	ja     c0101268 <ide_device_valid+0x38>
c0101244:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101248:	c1 e0 03             	shl    $0x3,%eax
c010124b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101252:	29 c2                	sub    %eax,%edx
c0101254:	8d 82 40 44 1c c0    	lea    -0x3fe3bbc0(%edx),%eax
c010125a:	0f b6 00             	movzbl (%eax),%eax
c010125d:	84 c0                	test   %al,%al
c010125f:	74 07                	je     c0101268 <ide_device_valid+0x38>
c0101261:	b8 01 00 00 00       	mov    $0x1,%eax
c0101266:	eb 05                	jmp    c010126d <ide_device_valid+0x3d>
c0101268:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010126d:	c9                   	leave  
c010126e:	c3                   	ret    

c010126f <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c010126f:	55                   	push   %ebp
c0101270:	89 e5                	mov    %esp,%ebp
c0101272:	83 ec 08             	sub    $0x8,%esp
c0101275:	8b 45 08             	mov    0x8(%ebp),%eax
c0101278:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c010127c:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101280:	89 04 24             	mov    %eax,(%esp)
c0101283:	e8 a8 ff ff ff       	call   c0101230 <ide_device_valid>
c0101288:	85 c0                	test   %eax,%eax
c010128a:	74 1b                	je     c01012a7 <ide_device_size+0x38>
        return ide_devices[ideno].size;
c010128c:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101290:	c1 e0 03             	shl    $0x3,%eax
c0101293:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010129a:	29 c2                	sub    %eax,%edx
c010129c:	8d 82 40 44 1c c0    	lea    -0x3fe3bbc0(%edx),%eax
c01012a2:	8b 40 08             	mov    0x8(%eax),%eax
c01012a5:	eb 05                	jmp    c01012ac <ide_device_size+0x3d>
    }
    return 0;
c01012a7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01012ac:	c9                   	leave  
c01012ad:	c3                   	ret    

c01012ae <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c01012ae:	55                   	push   %ebp
c01012af:	89 e5                	mov    %esp,%ebp
c01012b1:	57                   	push   %edi
c01012b2:	53                   	push   %ebx
c01012b3:	83 ec 50             	sub    $0x50,%esp
c01012b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01012b9:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c01012bd:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c01012c4:	77 24                	ja     c01012ea <ide_read_secs+0x3c>
c01012c6:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c01012cb:	77 1d                	ja     c01012ea <ide_read_secs+0x3c>
c01012cd:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01012d1:	c1 e0 03             	shl    $0x3,%eax
c01012d4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01012db:	29 c2                	sub    %eax,%edx
c01012dd:	8d 82 40 44 1c c0    	lea    -0x3fe3bbc0(%edx),%eax
c01012e3:	0f b6 00             	movzbl (%eax),%eax
c01012e6:	84 c0                	test   %al,%al
c01012e8:	75 24                	jne    c010130e <ide_read_secs+0x60>
c01012ea:	c7 44 24 0c 1c da 10 	movl   $0xc010da1c,0xc(%esp)
c01012f1:	c0 
c01012f2:	c7 44 24 08 d7 d9 10 	movl   $0xc010d9d7,0x8(%esp)
c01012f9:	c0 
c01012fa:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101301:	00 
c0101302:	c7 04 24 ec d9 10 c0 	movl   $0xc010d9ec,(%esp)
c0101309:	e8 f7 f0 ff ff       	call   c0100405 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c010130e:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101315:	77 0f                	ja     c0101326 <ide_read_secs+0x78>
c0101317:	8b 45 14             	mov    0x14(%ebp),%eax
c010131a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010131d:	01 d0                	add    %edx,%eax
c010131f:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101324:	76 24                	jbe    c010134a <ide_read_secs+0x9c>
c0101326:	c7 44 24 0c 44 da 10 	movl   $0xc010da44,0xc(%esp)
c010132d:	c0 
c010132e:	c7 44 24 08 d7 d9 10 	movl   $0xc010d9d7,0x8(%esp)
c0101335:	c0 
c0101336:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010133d:	00 
c010133e:	c7 04 24 ec d9 10 c0 	movl   $0xc010d9ec,(%esp)
c0101345:	e8 bb f0 ff ff       	call   c0100405 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c010134a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010134e:	66 d1 e8             	shr    %ax
c0101351:	0f b7 c0             	movzwl %ax,%eax
c0101354:	0f b7 04 85 8c d9 10 	movzwl -0x3fef2674(,%eax,4),%eax
c010135b:	c0 
c010135c:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101360:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101364:	66 d1 e8             	shr    %ax
c0101367:	0f b7 c0             	movzwl %ax,%eax
c010136a:	0f b7 04 85 8e d9 10 	movzwl -0x3fef2672(,%eax,4),%eax
c0101371:	c0 
c0101372:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101376:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010137a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101381:	00 
c0101382:	89 04 24             	mov    %eax,(%esp)
c0101385:	e8 33 fb ff ff       	call   c0100ebd <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c010138a:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010138e:	83 c0 02             	add    $0x2,%eax
c0101391:	0f b7 c0             	movzwl %ax,%eax
c0101394:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101398:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010139c:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01013a0:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01013a4:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c01013a5:	8b 45 14             	mov    0x14(%ebp),%eax
c01013a8:	0f b6 c0             	movzbl %al,%eax
c01013ab:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013af:	83 c2 02             	add    $0x2,%edx
c01013b2:	0f b7 d2             	movzwl %dx,%edx
c01013b5:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c01013b9:	88 45 e9             	mov    %al,-0x17(%ebp)
c01013bc:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01013c0:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01013c4:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c01013c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01013c8:	0f b6 c0             	movzbl %al,%eax
c01013cb:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013cf:	83 c2 03             	add    $0x3,%edx
c01013d2:	0f b7 d2             	movzwl %dx,%edx
c01013d5:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01013d9:	88 45 e5             	mov    %al,-0x1b(%ebp)
c01013dc:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01013e0:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01013e4:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c01013e5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01013e8:	c1 e8 08             	shr    $0x8,%eax
c01013eb:	0f b6 c0             	movzbl %al,%eax
c01013ee:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013f2:	83 c2 04             	add    $0x4,%edx
c01013f5:	0f b7 d2             	movzwl %dx,%edx
c01013f8:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01013fc:	88 45 e1             	mov    %al,-0x1f(%ebp)
c01013ff:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101403:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101407:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101408:	8b 45 0c             	mov    0xc(%ebp),%eax
c010140b:	c1 e8 10             	shr    $0x10,%eax
c010140e:	0f b6 c0             	movzbl %al,%eax
c0101411:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101415:	83 c2 05             	add    $0x5,%edx
c0101418:	0f b7 d2             	movzwl %dx,%edx
c010141b:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c010141f:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101422:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101426:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010142a:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c010142b:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010142f:	83 e0 01             	and    $0x1,%eax
c0101432:	c1 e0 04             	shl    $0x4,%eax
c0101435:	89 c2                	mov    %eax,%edx
c0101437:	8b 45 0c             	mov    0xc(%ebp),%eax
c010143a:	c1 e8 18             	shr    $0x18,%eax
c010143d:	83 e0 0f             	and    $0xf,%eax
c0101440:	09 d0                	or     %edx,%eax
c0101442:	83 c8 e0             	or     $0xffffffe0,%eax
c0101445:	0f b6 c0             	movzbl %al,%eax
c0101448:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010144c:	83 c2 06             	add    $0x6,%edx
c010144f:	0f b7 d2             	movzwl %dx,%edx
c0101452:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101456:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101459:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010145d:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101461:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101462:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101466:	83 c0 07             	add    $0x7,%eax
c0101469:	0f b7 c0             	movzwl %ax,%eax
c010146c:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101470:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c0101474:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101478:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c010147c:	ee                   	out    %al,(%dx)

    int ret = 0;
c010147d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101484:	eb 5a                	jmp    c01014e0 <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101486:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010148a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101491:	00 
c0101492:	89 04 24             	mov    %eax,(%esp)
c0101495:	e8 23 fa ff ff       	call   c0100ebd <ide_wait_ready>
c010149a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010149d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01014a1:	74 02                	je     c01014a5 <ide_read_secs+0x1f7>
            goto out;
c01014a3:	eb 41                	jmp    c01014e6 <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c01014a5:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01014a9:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01014ac:	8b 45 10             	mov    0x10(%ebp),%eax
c01014af:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01014b2:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile (
c01014b9:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01014bc:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c01014bf:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01014c2:	89 cb                	mov    %ecx,%ebx
c01014c4:	89 df                	mov    %ebx,%edi
c01014c6:	89 c1                	mov    %eax,%ecx
c01014c8:	fc                   	cld    
c01014c9:	f2 6d                	repnz insl (%dx),%es:(%edi)
c01014cb:	89 c8                	mov    %ecx,%eax
c01014cd:	89 fb                	mov    %edi,%ebx
c01014cf:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c01014d2:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c01014d5:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c01014d9:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c01014e0:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01014e4:	75 a0                	jne    c0101486 <ide_read_secs+0x1d8>
    }

out:
    return ret;
c01014e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01014e9:	83 c4 50             	add    $0x50,%esp
c01014ec:	5b                   	pop    %ebx
c01014ed:	5f                   	pop    %edi
c01014ee:	5d                   	pop    %ebp
c01014ef:	c3                   	ret    

c01014f0 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c01014f0:	55                   	push   %ebp
c01014f1:	89 e5                	mov    %esp,%ebp
c01014f3:	56                   	push   %esi
c01014f4:	53                   	push   %ebx
c01014f5:	83 ec 50             	sub    $0x50,%esp
c01014f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01014fb:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c01014ff:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101506:	77 24                	ja     c010152c <ide_write_secs+0x3c>
c0101508:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c010150d:	77 1d                	ja     c010152c <ide_write_secs+0x3c>
c010150f:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101513:	c1 e0 03             	shl    $0x3,%eax
c0101516:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010151d:	29 c2                	sub    %eax,%edx
c010151f:	8d 82 40 44 1c c0    	lea    -0x3fe3bbc0(%edx),%eax
c0101525:	0f b6 00             	movzbl (%eax),%eax
c0101528:	84 c0                	test   %al,%al
c010152a:	75 24                	jne    c0101550 <ide_write_secs+0x60>
c010152c:	c7 44 24 0c 1c da 10 	movl   $0xc010da1c,0xc(%esp)
c0101533:	c0 
c0101534:	c7 44 24 08 d7 d9 10 	movl   $0xc010d9d7,0x8(%esp)
c010153b:	c0 
c010153c:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101543:	00 
c0101544:	c7 04 24 ec d9 10 c0 	movl   $0xc010d9ec,(%esp)
c010154b:	e8 b5 ee ff ff       	call   c0100405 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101550:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101557:	77 0f                	ja     c0101568 <ide_write_secs+0x78>
c0101559:	8b 45 14             	mov    0x14(%ebp),%eax
c010155c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010155f:	01 d0                	add    %edx,%eax
c0101561:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101566:	76 24                	jbe    c010158c <ide_write_secs+0x9c>
c0101568:	c7 44 24 0c 44 da 10 	movl   $0xc010da44,0xc(%esp)
c010156f:	c0 
c0101570:	c7 44 24 08 d7 d9 10 	movl   $0xc010d9d7,0x8(%esp)
c0101577:	c0 
c0101578:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c010157f:	00 
c0101580:	c7 04 24 ec d9 10 c0 	movl   $0xc010d9ec,(%esp)
c0101587:	e8 79 ee ff ff       	call   c0100405 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c010158c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101590:	66 d1 e8             	shr    %ax
c0101593:	0f b7 c0             	movzwl %ax,%eax
c0101596:	0f b7 04 85 8c d9 10 	movzwl -0x3fef2674(,%eax,4),%eax
c010159d:	c0 
c010159e:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01015a2:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01015a6:	66 d1 e8             	shr    %ax
c01015a9:	0f b7 c0             	movzwl %ax,%eax
c01015ac:	0f b7 04 85 8e d9 10 	movzwl -0x3fef2672(,%eax,4),%eax
c01015b3:	c0 
c01015b4:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c01015b8:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01015bc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01015c3:	00 
c01015c4:	89 04 24             	mov    %eax,(%esp)
c01015c7:	e8 f1 f8 ff ff       	call   c0100ebd <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c01015cc:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01015d0:	83 c0 02             	add    $0x2,%eax
c01015d3:	0f b7 c0             	movzwl %ax,%eax
c01015d6:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c01015da:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01015de:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01015e2:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01015e6:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c01015e7:	8b 45 14             	mov    0x14(%ebp),%eax
c01015ea:	0f b6 c0             	movzbl %al,%eax
c01015ed:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01015f1:	83 c2 02             	add    $0x2,%edx
c01015f4:	0f b7 d2             	movzwl %dx,%edx
c01015f7:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c01015fb:	88 45 e9             	mov    %al,-0x17(%ebp)
c01015fe:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101602:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101606:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101607:	8b 45 0c             	mov    0xc(%ebp),%eax
c010160a:	0f b6 c0             	movzbl %al,%eax
c010160d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101611:	83 c2 03             	add    $0x3,%edx
c0101614:	0f b7 d2             	movzwl %dx,%edx
c0101617:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010161b:	88 45 e5             	mov    %al,-0x1b(%ebp)
c010161e:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101622:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101626:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101627:	8b 45 0c             	mov    0xc(%ebp),%eax
c010162a:	c1 e8 08             	shr    $0x8,%eax
c010162d:	0f b6 c0             	movzbl %al,%eax
c0101630:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101634:	83 c2 04             	add    $0x4,%edx
c0101637:	0f b7 d2             	movzwl %dx,%edx
c010163a:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c010163e:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101641:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101645:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101649:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c010164a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010164d:	c1 e8 10             	shr    $0x10,%eax
c0101650:	0f b6 c0             	movzbl %al,%eax
c0101653:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101657:	83 c2 05             	add    $0x5,%edx
c010165a:	0f b7 d2             	movzwl %dx,%edx
c010165d:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101661:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101664:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101668:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010166c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c010166d:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101671:	83 e0 01             	and    $0x1,%eax
c0101674:	c1 e0 04             	shl    $0x4,%eax
c0101677:	89 c2                	mov    %eax,%edx
c0101679:	8b 45 0c             	mov    0xc(%ebp),%eax
c010167c:	c1 e8 18             	shr    $0x18,%eax
c010167f:	83 e0 0f             	and    $0xf,%eax
c0101682:	09 d0                	or     %edx,%eax
c0101684:	83 c8 e0             	or     $0xffffffe0,%eax
c0101687:	0f b6 c0             	movzbl %al,%eax
c010168a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010168e:	83 c2 06             	add    $0x6,%edx
c0101691:	0f b7 d2             	movzwl %dx,%edx
c0101694:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101698:	88 45 d9             	mov    %al,-0x27(%ebp)
c010169b:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010169f:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c01016a3:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c01016a4:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01016a8:	83 c0 07             	add    $0x7,%eax
c01016ab:	0f b7 c0             	movzwl %ax,%eax
c01016ae:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c01016b2:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c01016b6:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01016ba:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01016be:	ee                   	out    %al,(%dx)

    int ret = 0;
c01016bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01016c6:	eb 5a                	jmp    c0101722 <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c01016c8:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01016cc:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01016d3:	00 
c01016d4:	89 04 24             	mov    %eax,(%esp)
c01016d7:	e8 e1 f7 ff ff       	call   c0100ebd <ide_wait_ready>
c01016dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01016df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01016e3:	74 02                	je     c01016e7 <ide_write_secs+0x1f7>
            goto out;
c01016e5:	eb 41                	jmp    c0101728 <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c01016e7:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01016eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01016ee:	8b 45 10             	mov    0x10(%ebp),%eax
c01016f1:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01016f4:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile (
c01016fb:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01016fe:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101701:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101704:	89 cb                	mov    %ecx,%ebx
c0101706:	89 de                	mov    %ebx,%esi
c0101708:	89 c1                	mov    %eax,%ecx
c010170a:	fc                   	cld    
c010170b:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c010170d:	89 c8                	mov    %ecx,%eax
c010170f:	89 f3                	mov    %esi,%ebx
c0101711:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0101714:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0101717:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c010171b:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101722:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101726:	75 a0                	jne    c01016c8 <ide_write_secs+0x1d8>
    }

out:
    return ret;
c0101728:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010172b:	83 c4 50             	add    $0x50,%esp
c010172e:	5b                   	pop    %ebx
c010172f:	5e                   	pop    %esi
c0101730:	5d                   	pop    %ebp
c0101731:	c3                   	ret    

c0101732 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0101732:	55                   	push   %ebp
c0101733:	89 e5                	mov    %esp,%ebp
c0101735:	83 ec 28             	sub    $0x28,%esp
c0101738:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c010173e:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101742:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101746:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010174a:	ee                   	out    %al,(%dx)
c010174b:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0101751:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0101755:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101759:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010175d:	ee                   	out    %al,(%dx)
c010175e:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0101764:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0101768:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010176c:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101770:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0101771:	c7 05 b8 70 1c c0 00 	movl   $0x0,0xc01c70b8
c0101778:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c010177b:	c7 04 24 7e da 10 c0 	movl   $0xc010da7e,(%esp)
c0101782:	e8 27 eb ff ff       	call   c01002ae <cprintf>
    pic_enable(IRQ_TIMER);
c0101787:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010178e:	e8 18 09 00 00       	call   c01020ab <pic_enable>
}
c0101793:	c9                   	leave  
c0101794:	c3                   	ret    

c0101795 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0101795:	55                   	push   %ebp
c0101796:	89 e5                	mov    %esp,%ebp
c0101798:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010179b:	9c                   	pushf  
c010179c:	58                   	pop    %eax
c010179d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01017a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01017a3:	25 00 02 00 00       	and    $0x200,%eax
c01017a8:	85 c0                	test   %eax,%eax
c01017aa:	74 0c                	je     c01017b8 <__intr_save+0x23>
        intr_disable();
c01017ac:	e8 69 0a 00 00       	call   c010221a <intr_disable>
        return 1;
c01017b1:	b8 01 00 00 00       	mov    $0x1,%eax
c01017b6:	eb 05                	jmp    c01017bd <__intr_save+0x28>
    }
    return 0;
c01017b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01017bd:	c9                   	leave  
c01017be:	c3                   	ret    

c01017bf <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01017bf:	55                   	push   %ebp
c01017c0:	89 e5                	mov    %esp,%ebp
c01017c2:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01017c5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01017c9:	74 05                	je     c01017d0 <__intr_restore+0x11>
        intr_enable();
c01017cb:	e8 44 0a 00 00       	call   c0102214 <intr_enable>
    }
}
c01017d0:	c9                   	leave  
c01017d1:	c3                   	ret    

c01017d2 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c01017d2:	55                   	push   %ebp
c01017d3:	89 e5                	mov    %esp,%ebp
c01017d5:	83 ec 10             	sub    $0x10,%esp
c01017d8:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01017de:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01017e2:	89 c2                	mov    %eax,%edx
c01017e4:	ec                   	in     (%dx),%al
c01017e5:	88 45 fd             	mov    %al,-0x3(%ebp)
c01017e8:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c01017ee:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01017f2:	89 c2                	mov    %eax,%edx
c01017f4:	ec                   	in     (%dx),%al
c01017f5:	88 45 f9             	mov    %al,-0x7(%ebp)
c01017f8:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c01017fe:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101802:	89 c2                	mov    %eax,%edx
c0101804:	ec                   	in     (%dx),%al
c0101805:	88 45 f5             	mov    %al,-0xb(%ebp)
c0101808:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c010180e:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101812:	89 c2                	mov    %eax,%edx
c0101814:	ec                   	in     (%dx),%al
c0101815:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0101818:	c9                   	leave  
c0101819:	c3                   	ret    

c010181a <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c010181a:	55                   	push   %ebp
c010181b:	89 e5                	mov    %esp,%ebp
c010181d:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0101820:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0101827:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010182a:	0f b7 00             	movzwl (%eax),%eax
c010182d:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c0101831:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101834:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0101839:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010183c:	0f b7 00             	movzwl (%eax),%eax
c010183f:	66 3d 5a a5          	cmp    $0xa55a,%ax
c0101843:	74 12                	je     c0101857 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c0101845:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c010184c:	66 c7 05 26 45 1c c0 	movw   $0x3b4,0xc01c4526
c0101853:	b4 03 
c0101855:	eb 13                	jmp    c010186a <cga_init+0x50>
    } else {
        *cp = was;
c0101857:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010185a:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c010185e:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c0101861:	66 c7 05 26 45 1c c0 	movw   $0x3d4,0xc01c4526
c0101868:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c010186a:	0f b7 05 26 45 1c c0 	movzwl 0xc01c4526,%eax
c0101871:	0f b7 c0             	movzwl %ax,%eax
c0101874:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101878:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010187c:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101880:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101884:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0101885:	0f b7 05 26 45 1c c0 	movzwl 0xc01c4526,%eax
c010188c:	83 c0 01             	add    $0x1,%eax
c010188f:	0f b7 c0             	movzwl %ax,%eax
c0101892:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101896:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c010189a:	89 c2                	mov    %eax,%edx
c010189c:	ec                   	in     (%dx),%al
c010189d:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c01018a0:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01018a4:	0f b6 c0             	movzbl %al,%eax
c01018a7:	c1 e0 08             	shl    $0x8,%eax
c01018aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c01018ad:	0f b7 05 26 45 1c c0 	movzwl 0xc01c4526,%eax
c01018b4:	0f b7 c0             	movzwl %ax,%eax
c01018b7:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c01018bb:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01018bf:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01018c3:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01018c7:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c01018c8:	0f b7 05 26 45 1c c0 	movzwl 0xc01c4526,%eax
c01018cf:	83 c0 01             	add    $0x1,%eax
c01018d2:	0f b7 c0             	movzwl %ax,%eax
c01018d5:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01018d9:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c01018dd:	89 c2                	mov    %eax,%edx
c01018df:	ec                   	in     (%dx),%al
c01018e0:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c01018e3:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01018e7:	0f b6 c0             	movzbl %al,%eax
c01018ea:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c01018ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018f0:	a3 20 45 1c c0       	mov    %eax,0xc01c4520
    crt_pos = pos;
c01018f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01018f8:	66 a3 24 45 1c c0    	mov    %ax,0xc01c4524
}
c01018fe:	c9                   	leave  
c01018ff:	c3                   	ret    

c0101900 <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c0101900:	55                   	push   %ebp
c0101901:	89 e5                	mov    %esp,%ebp
c0101903:	83 ec 48             	sub    $0x48,%esp
c0101906:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c010190c:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101910:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101914:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101918:	ee                   	out    %al,(%dx)
c0101919:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c010191f:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c0101923:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101927:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010192b:	ee                   	out    %al,(%dx)
c010192c:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c0101932:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c0101936:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010193a:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010193e:	ee                   	out    %al,(%dx)
c010193f:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c0101945:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c0101949:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010194d:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101951:	ee                   	out    %al,(%dx)
c0101952:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c0101958:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c010195c:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101960:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101964:	ee                   	out    %al,(%dx)
c0101965:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c010196b:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c010196f:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101973:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101977:	ee                   	out    %al,(%dx)
c0101978:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c010197e:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c0101982:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101986:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010198a:	ee                   	out    %al,(%dx)
c010198b:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101991:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0101995:	89 c2                	mov    %eax,%edx
c0101997:	ec                   	in     (%dx),%al
c0101998:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c010199b:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c010199f:	3c ff                	cmp    $0xff,%al
c01019a1:	0f 95 c0             	setne  %al
c01019a4:	0f b6 c0             	movzbl %al,%eax
c01019a7:	a3 28 45 1c c0       	mov    %eax,0xc01c4528
c01019ac:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01019b2:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c01019b6:	89 c2                	mov    %eax,%edx
c01019b8:	ec                   	in     (%dx),%al
c01019b9:	88 45 d5             	mov    %al,-0x2b(%ebp)
c01019bc:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c01019c2:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c01019c6:	89 c2                	mov    %eax,%edx
c01019c8:	ec                   	in     (%dx),%al
c01019c9:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c01019cc:	a1 28 45 1c c0       	mov    0xc01c4528,%eax
c01019d1:	85 c0                	test   %eax,%eax
c01019d3:	74 0c                	je     c01019e1 <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c01019d5:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c01019dc:	e8 ca 06 00 00       	call   c01020ab <pic_enable>
    }
}
c01019e1:	c9                   	leave  
c01019e2:	c3                   	ret    

c01019e3 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c01019e3:	55                   	push   %ebp
c01019e4:	89 e5                	mov    %esp,%ebp
c01019e6:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c01019e9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01019f0:	eb 09                	jmp    c01019fb <lpt_putc_sub+0x18>
        delay();
c01019f2:	e8 db fd ff ff       	call   c01017d2 <delay>
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c01019f7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01019fb:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c0101a01:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101a05:	89 c2                	mov    %eax,%edx
c0101a07:	ec                   	in     (%dx),%al
c0101a08:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101a0b:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0101a0f:	84 c0                	test   %al,%al
c0101a11:	78 09                	js     c0101a1c <lpt_putc_sub+0x39>
c0101a13:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101a1a:	7e d6                	jle    c01019f2 <lpt_putc_sub+0xf>
    }
    outb(LPTPORT + 0, c);
c0101a1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a1f:	0f b6 c0             	movzbl %al,%eax
c0101a22:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c0101a28:	88 45 f5             	mov    %al,-0xb(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101a2b:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101a2f:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101a33:	ee                   	out    %al,(%dx)
c0101a34:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c0101a3a:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c0101a3e:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101a42:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101a46:	ee                   	out    %al,(%dx)
c0101a47:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c0101a4d:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c0101a51:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101a55:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101a59:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c0101a5a:	c9                   	leave  
c0101a5b:	c3                   	ret    

c0101a5c <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c0101a5c:	55                   	push   %ebp
c0101a5d:	89 e5                	mov    %esp,%ebp
c0101a5f:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0101a62:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101a66:	74 0d                	je     c0101a75 <lpt_putc+0x19>
        lpt_putc_sub(c);
c0101a68:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a6b:	89 04 24             	mov    %eax,(%esp)
c0101a6e:	e8 70 ff ff ff       	call   c01019e3 <lpt_putc_sub>
c0101a73:	eb 24                	jmp    c0101a99 <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c0101a75:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101a7c:	e8 62 ff ff ff       	call   c01019e3 <lpt_putc_sub>
        lpt_putc_sub(' ');
c0101a81:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101a88:	e8 56 ff ff ff       	call   c01019e3 <lpt_putc_sub>
        lpt_putc_sub('\b');
c0101a8d:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101a94:	e8 4a ff ff ff       	call   c01019e3 <lpt_putc_sub>
    }
}
c0101a99:	c9                   	leave  
c0101a9a:	c3                   	ret    

c0101a9b <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0101a9b:	55                   	push   %ebp
c0101a9c:	89 e5                	mov    %esp,%ebp
c0101a9e:	53                   	push   %ebx
c0101a9f:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101aa2:	8b 45 08             	mov    0x8(%ebp),%eax
c0101aa5:	b0 00                	mov    $0x0,%al
c0101aa7:	85 c0                	test   %eax,%eax
c0101aa9:	75 07                	jne    c0101ab2 <cga_putc+0x17>
        c |= 0x0700;
c0101aab:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101ab2:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ab5:	0f b6 c0             	movzbl %al,%eax
c0101ab8:	83 f8 0a             	cmp    $0xa,%eax
c0101abb:	74 4c                	je     c0101b09 <cga_putc+0x6e>
c0101abd:	83 f8 0d             	cmp    $0xd,%eax
c0101ac0:	74 57                	je     c0101b19 <cga_putc+0x7e>
c0101ac2:	83 f8 08             	cmp    $0x8,%eax
c0101ac5:	0f 85 88 00 00 00    	jne    c0101b53 <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c0101acb:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101ad2:	66 85 c0             	test   %ax,%ax
c0101ad5:	74 30                	je     c0101b07 <cga_putc+0x6c>
            crt_pos --;
c0101ad7:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101ade:	83 e8 01             	sub    $0x1,%eax
c0101ae1:	66 a3 24 45 1c c0    	mov    %ax,0xc01c4524
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101ae7:	a1 20 45 1c c0       	mov    0xc01c4520,%eax
c0101aec:	0f b7 15 24 45 1c c0 	movzwl 0xc01c4524,%edx
c0101af3:	0f b7 d2             	movzwl %dx,%edx
c0101af6:	01 d2                	add    %edx,%edx
c0101af8:	01 c2                	add    %eax,%edx
c0101afa:	8b 45 08             	mov    0x8(%ebp),%eax
c0101afd:	b0 00                	mov    $0x0,%al
c0101aff:	83 c8 20             	or     $0x20,%eax
c0101b02:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c0101b05:	eb 72                	jmp    c0101b79 <cga_putc+0xde>
c0101b07:	eb 70                	jmp    c0101b79 <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c0101b09:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101b10:	83 c0 50             	add    $0x50,%eax
c0101b13:	66 a3 24 45 1c c0    	mov    %ax,0xc01c4524
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101b19:	0f b7 1d 24 45 1c c0 	movzwl 0xc01c4524,%ebx
c0101b20:	0f b7 0d 24 45 1c c0 	movzwl 0xc01c4524,%ecx
c0101b27:	0f b7 c1             	movzwl %cx,%eax
c0101b2a:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0101b30:	c1 e8 10             	shr    $0x10,%eax
c0101b33:	89 c2                	mov    %eax,%edx
c0101b35:	66 c1 ea 06          	shr    $0x6,%dx
c0101b39:	89 d0                	mov    %edx,%eax
c0101b3b:	c1 e0 02             	shl    $0x2,%eax
c0101b3e:	01 d0                	add    %edx,%eax
c0101b40:	c1 e0 04             	shl    $0x4,%eax
c0101b43:	29 c1                	sub    %eax,%ecx
c0101b45:	89 ca                	mov    %ecx,%edx
c0101b47:	89 d8                	mov    %ebx,%eax
c0101b49:	29 d0                	sub    %edx,%eax
c0101b4b:	66 a3 24 45 1c c0    	mov    %ax,0xc01c4524
        break;
c0101b51:	eb 26                	jmp    c0101b79 <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0101b53:	8b 0d 20 45 1c c0    	mov    0xc01c4520,%ecx
c0101b59:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101b60:	8d 50 01             	lea    0x1(%eax),%edx
c0101b63:	66 89 15 24 45 1c c0 	mov    %dx,0xc01c4524
c0101b6a:	0f b7 c0             	movzwl %ax,%eax
c0101b6d:	01 c0                	add    %eax,%eax
c0101b6f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0101b72:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b75:	66 89 02             	mov    %ax,(%edx)
        break;
c0101b78:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0101b79:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101b80:	66 3d cf 07          	cmp    $0x7cf,%ax
c0101b84:	76 5b                	jbe    c0101be1 <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101b86:	a1 20 45 1c c0       	mov    0xc01c4520,%eax
c0101b8b:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0101b91:	a1 20 45 1c c0       	mov    0xc01c4520,%eax
c0101b96:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c0101b9d:	00 
c0101b9e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101ba2:	89 04 24             	mov    %eax,(%esp)
c0101ba5:	e8 e8 b1 00 00       	call   c010cd92 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101baa:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101bb1:	eb 15                	jmp    c0101bc8 <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c0101bb3:	a1 20 45 1c c0       	mov    0xc01c4520,%eax
c0101bb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101bbb:	01 d2                	add    %edx,%edx
c0101bbd:	01 d0                	add    %edx,%eax
c0101bbf:	66 c7 00 20 07       	movw   $0x720,(%eax)
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101bc4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101bc8:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101bcf:	7e e2                	jle    c0101bb3 <cga_putc+0x118>
        }
        crt_pos -= CRT_COLS;
c0101bd1:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101bd8:	83 e8 50             	sub    $0x50,%eax
c0101bdb:	66 a3 24 45 1c c0    	mov    %ax,0xc01c4524
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101be1:	0f b7 05 26 45 1c c0 	movzwl 0xc01c4526,%eax
c0101be8:	0f b7 c0             	movzwl %ax,%eax
c0101beb:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101bef:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c0101bf3:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101bf7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101bfb:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101bfc:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101c03:	66 c1 e8 08          	shr    $0x8,%ax
c0101c07:	0f b6 c0             	movzbl %al,%eax
c0101c0a:	0f b7 15 26 45 1c c0 	movzwl 0xc01c4526,%edx
c0101c11:	83 c2 01             	add    $0x1,%edx
c0101c14:	0f b7 d2             	movzwl %dx,%edx
c0101c17:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c0101c1b:	88 45 ed             	mov    %al,-0x13(%ebp)
c0101c1e:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101c22:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101c26:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101c27:	0f b7 05 26 45 1c c0 	movzwl 0xc01c4526,%eax
c0101c2e:	0f b7 c0             	movzwl %ax,%eax
c0101c31:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101c35:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c0101c39:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101c3d:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101c41:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0101c42:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101c49:	0f b6 c0             	movzbl %al,%eax
c0101c4c:	0f b7 15 26 45 1c c0 	movzwl 0xc01c4526,%edx
c0101c53:	83 c2 01             	add    $0x1,%edx
c0101c56:	0f b7 d2             	movzwl %dx,%edx
c0101c59:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101c5d:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101c60:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101c64:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101c68:	ee                   	out    %al,(%dx)
}
c0101c69:	83 c4 34             	add    $0x34,%esp
c0101c6c:	5b                   	pop    %ebx
c0101c6d:	5d                   	pop    %ebp
c0101c6e:	c3                   	ret    

c0101c6f <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0101c6f:	55                   	push   %ebp
c0101c70:	89 e5                	mov    %esp,%ebp
c0101c72:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101c75:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101c7c:	eb 09                	jmp    c0101c87 <serial_putc_sub+0x18>
        delay();
c0101c7e:	e8 4f fb ff ff       	call   c01017d2 <delay>
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101c83:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101c87:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101c8d:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101c91:	89 c2                	mov    %eax,%edx
c0101c93:	ec                   	in     (%dx),%al
c0101c94:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101c97:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0101c9b:	0f b6 c0             	movzbl %al,%eax
c0101c9e:	83 e0 20             	and    $0x20,%eax
c0101ca1:	85 c0                	test   %eax,%eax
c0101ca3:	75 09                	jne    c0101cae <serial_putc_sub+0x3f>
c0101ca5:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101cac:	7e d0                	jle    c0101c7e <serial_putc_sub+0xf>
    }
    outb(COM1 + COM_TX, c);
c0101cae:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cb1:	0f b6 c0             	movzbl %al,%eax
c0101cb4:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c0101cba:	88 45 f5             	mov    %al,-0xb(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101cbd:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101cc1:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101cc5:	ee                   	out    %al,(%dx)
}
c0101cc6:	c9                   	leave  
c0101cc7:	c3                   	ret    

c0101cc8 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101cc8:	55                   	push   %ebp
c0101cc9:	89 e5                	mov    %esp,%ebp
c0101ccb:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0101cce:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101cd2:	74 0d                	je     c0101ce1 <serial_putc+0x19>
        serial_putc_sub(c);
c0101cd4:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cd7:	89 04 24             	mov    %eax,(%esp)
c0101cda:	e8 90 ff ff ff       	call   c0101c6f <serial_putc_sub>
c0101cdf:	eb 24                	jmp    c0101d05 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c0101ce1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101ce8:	e8 82 ff ff ff       	call   c0101c6f <serial_putc_sub>
        serial_putc_sub(' ');
c0101ced:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101cf4:	e8 76 ff ff ff       	call   c0101c6f <serial_putc_sub>
        serial_putc_sub('\b');
c0101cf9:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101d00:	e8 6a ff ff ff       	call   c0101c6f <serial_putc_sub>
    }
}
c0101d05:	c9                   	leave  
c0101d06:	c3                   	ret    

c0101d07 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101d07:	55                   	push   %ebp
c0101d08:	89 e5                	mov    %esp,%ebp
c0101d0a:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101d0d:	eb 33                	jmp    c0101d42 <cons_intr+0x3b>
        if (c != 0) {
c0101d0f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101d13:	74 2d                	je     c0101d42 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101d15:	a1 44 47 1c c0       	mov    0xc01c4744,%eax
c0101d1a:	8d 50 01             	lea    0x1(%eax),%edx
c0101d1d:	89 15 44 47 1c c0    	mov    %edx,0xc01c4744
c0101d23:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101d26:	88 90 40 45 1c c0    	mov    %dl,-0x3fe3bac0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101d2c:	a1 44 47 1c c0       	mov    0xc01c4744,%eax
c0101d31:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101d36:	75 0a                	jne    c0101d42 <cons_intr+0x3b>
                cons.wpos = 0;
c0101d38:	c7 05 44 47 1c c0 00 	movl   $0x0,0xc01c4744
c0101d3f:	00 00 00 
    while ((c = (*proc)()) != -1) {
c0101d42:	8b 45 08             	mov    0x8(%ebp),%eax
c0101d45:	ff d0                	call   *%eax
c0101d47:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101d4a:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0101d4e:	75 bf                	jne    c0101d0f <cons_intr+0x8>
            }
        }
    }
}
c0101d50:	c9                   	leave  
c0101d51:	c3                   	ret    

c0101d52 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c0101d52:	55                   	push   %ebp
c0101d53:	89 e5                	mov    %esp,%ebp
c0101d55:	83 ec 10             	sub    $0x10,%esp
c0101d58:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d5e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101d62:	89 c2                	mov    %eax,%edx
c0101d64:	ec                   	in     (%dx),%al
c0101d65:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101d68:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c0101d6c:	0f b6 c0             	movzbl %al,%eax
c0101d6f:	83 e0 01             	and    $0x1,%eax
c0101d72:	85 c0                	test   %eax,%eax
c0101d74:	75 07                	jne    c0101d7d <serial_proc_data+0x2b>
        return -1;
c0101d76:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101d7b:	eb 2a                	jmp    c0101da7 <serial_proc_data+0x55>
c0101d7d:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d83:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101d87:	89 c2                	mov    %eax,%edx
c0101d89:	ec                   	in     (%dx),%al
c0101d8a:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c0101d8d:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0101d91:	0f b6 c0             	movzbl %al,%eax
c0101d94:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c0101d97:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c0101d9b:	75 07                	jne    c0101da4 <serial_proc_data+0x52>
        c = '\b';
c0101d9d:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101da4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101da7:	c9                   	leave  
c0101da8:	c3                   	ret    

c0101da9 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101da9:	55                   	push   %ebp
c0101daa:	89 e5                	mov    %esp,%ebp
c0101dac:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c0101daf:	a1 28 45 1c c0       	mov    0xc01c4528,%eax
c0101db4:	85 c0                	test   %eax,%eax
c0101db6:	74 0c                	je     c0101dc4 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c0101db8:	c7 04 24 52 1d 10 c0 	movl   $0xc0101d52,(%esp)
c0101dbf:	e8 43 ff ff ff       	call   c0101d07 <cons_intr>
    }
}
c0101dc4:	c9                   	leave  
c0101dc5:	c3                   	ret    

c0101dc6 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101dc6:	55                   	push   %ebp
c0101dc7:	89 e5                	mov    %esp,%ebp
c0101dc9:	83 ec 38             	sub    $0x38,%esp
c0101dcc:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101dd2:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101dd6:	89 c2                	mov    %eax,%edx
c0101dd8:	ec                   	in     (%dx),%al
c0101dd9:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c0101ddc:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101de0:	0f b6 c0             	movzbl %al,%eax
c0101de3:	83 e0 01             	and    $0x1,%eax
c0101de6:	85 c0                	test   %eax,%eax
c0101de8:	75 0a                	jne    c0101df4 <kbd_proc_data+0x2e>
        return -1;
c0101dea:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101def:	e9 59 01 00 00       	jmp    c0101f4d <kbd_proc_data+0x187>
c0101df4:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101dfa:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101dfe:	89 c2                	mov    %eax,%edx
c0101e00:	ec                   	in     (%dx),%al
c0101e01:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101e04:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101e08:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101e0b:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c0101e0f:	75 17                	jne    c0101e28 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c0101e11:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101e16:	83 c8 40             	or     $0x40,%eax
c0101e19:	a3 48 47 1c c0       	mov    %eax,0xc01c4748
        return 0;
c0101e1e:	b8 00 00 00 00       	mov    $0x0,%eax
c0101e23:	e9 25 01 00 00       	jmp    c0101f4d <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c0101e28:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e2c:	84 c0                	test   %al,%al
c0101e2e:	79 47                	jns    c0101e77 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101e30:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101e35:	83 e0 40             	and    $0x40,%eax
c0101e38:	85 c0                	test   %eax,%eax
c0101e3a:	75 09                	jne    c0101e45 <kbd_proc_data+0x7f>
c0101e3c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e40:	83 e0 7f             	and    $0x7f,%eax
c0101e43:	eb 04                	jmp    c0101e49 <kbd_proc_data+0x83>
c0101e45:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e49:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0101e4c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e50:	0f b6 80 40 10 13 c0 	movzbl -0x3fecefc0(%eax),%eax
c0101e57:	83 c8 40             	or     $0x40,%eax
c0101e5a:	0f b6 c0             	movzbl %al,%eax
c0101e5d:	f7 d0                	not    %eax
c0101e5f:	89 c2                	mov    %eax,%edx
c0101e61:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101e66:	21 d0                	and    %edx,%eax
c0101e68:	a3 48 47 1c c0       	mov    %eax,0xc01c4748
        return 0;
c0101e6d:	b8 00 00 00 00       	mov    $0x0,%eax
c0101e72:	e9 d6 00 00 00       	jmp    c0101f4d <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c0101e77:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101e7c:	83 e0 40             	and    $0x40,%eax
c0101e7f:	85 c0                	test   %eax,%eax
c0101e81:	74 11                	je     c0101e94 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0101e83:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0101e87:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101e8c:	83 e0 bf             	and    $0xffffffbf,%eax
c0101e8f:	a3 48 47 1c c0       	mov    %eax,0xc01c4748
    }

    shift |= shiftcode[data];
c0101e94:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e98:	0f b6 80 40 10 13 c0 	movzbl -0x3fecefc0(%eax),%eax
c0101e9f:	0f b6 d0             	movzbl %al,%edx
c0101ea2:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101ea7:	09 d0                	or     %edx,%eax
c0101ea9:	a3 48 47 1c c0       	mov    %eax,0xc01c4748
    shift ^= togglecode[data];
c0101eae:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101eb2:	0f b6 80 40 11 13 c0 	movzbl -0x3feceec0(%eax),%eax
c0101eb9:	0f b6 d0             	movzbl %al,%edx
c0101ebc:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101ec1:	31 d0                	xor    %edx,%eax
c0101ec3:	a3 48 47 1c c0       	mov    %eax,0xc01c4748

    c = charcode[shift & (CTL | SHIFT)][data];
c0101ec8:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101ecd:	83 e0 03             	and    $0x3,%eax
c0101ed0:	8b 14 85 40 15 13 c0 	mov    -0x3feceac0(,%eax,4),%edx
c0101ed7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101edb:	01 d0                	add    %edx,%eax
c0101edd:	0f b6 00             	movzbl (%eax),%eax
c0101ee0:	0f b6 c0             	movzbl %al,%eax
c0101ee3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101ee6:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101eeb:	83 e0 08             	and    $0x8,%eax
c0101eee:	85 c0                	test   %eax,%eax
c0101ef0:	74 22                	je     c0101f14 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101ef2:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101ef6:	7e 0c                	jle    c0101f04 <kbd_proc_data+0x13e>
c0101ef8:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101efc:	7f 06                	jg     c0101f04 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101efe:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101f02:	eb 10                	jmp    c0101f14 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101f04:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101f08:	7e 0a                	jle    c0101f14 <kbd_proc_data+0x14e>
c0101f0a:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101f0e:	7f 04                	jg     c0101f14 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101f10:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101f14:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101f19:	f7 d0                	not    %eax
c0101f1b:	83 e0 06             	and    $0x6,%eax
c0101f1e:	85 c0                	test   %eax,%eax
c0101f20:	75 28                	jne    c0101f4a <kbd_proc_data+0x184>
c0101f22:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101f29:	75 1f                	jne    c0101f4a <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c0101f2b:	c7 04 24 99 da 10 c0 	movl   $0xc010da99,(%esp)
c0101f32:	e8 77 e3 ff ff       	call   c01002ae <cprintf>
c0101f37:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c0101f3d:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101f41:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0101f45:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101f49:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0101f4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101f4d:	c9                   	leave  
c0101f4e:	c3                   	ret    

c0101f4f <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0101f4f:	55                   	push   %ebp
c0101f50:	89 e5                	mov    %esp,%ebp
c0101f52:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c0101f55:	c7 04 24 c6 1d 10 c0 	movl   $0xc0101dc6,(%esp)
c0101f5c:	e8 a6 fd ff ff       	call   c0101d07 <cons_intr>
}
c0101f61:	c9                   	leave  
c0101f62:	c3                   	ret    

c0101f63 <kbd_init>:

static void
kbd_init(void) {
c0101f63:	55                   	push   %ebp
c0101f64:	89 e5                	mov    %esp,%ebp
c0101f66:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c0101f69:	e8 e1 ff ff ff       	call   c0101f4f <kbd_intr>
    pic_enable(IRQ_KBD);
c0101f6e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0101f75:	e8 31 01 00 00       	call   c01020ab <pic_enable>
}
c0101f7a:	c9                   	leave  
c0101f7b:	c3                   	ret    

c0101f7c <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0101f7c:	55                   	push   %ebp
c0101f7d:	89 e5                	mov    %esp,%ebp
c0101f7f:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c0101f82:	e8 93 f8 ff ff       	call   c010181a <cga_init>
    serial_init();
c0101f87:	e8 74 f9 ff ff       	call   c0101900 <serial_init>
    kbd_init();
c0101f8c:	e8 d2 ff ff ff       	call   c0101f63 <kbd_init>
    if (!serial_exists) {
c0101f91:	a1 28 45 1c c0       	mov    0xc01c4528,%eax
c0101f96:	85 c0                	test   %eax,%eax
c0101f98:	75 0c                	jne    c0101fa6 <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c0101f9a:	c7 04 24 a5 da 10 c0 	movl   $0xc010daa5,(%esp)
c0101fa1:	e8 08 e3 ff ff       	call   c01002ae <cprintf>
    }
}
c0101fa6:	c9                   	leave  
c0101fa7:	c3                   	ret    

c0101fa8 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101fa8:	55                   	push   %ebp
c0101fa9:	89 e5                	mov    %esp,%ebp
c0101fab:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0101fae:	e8 e2 f7 ff ff       	call   c0101795 <__intr_save>
c0101fb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101fb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0101fb9:	89 04 24             	mov    %eax,(%esp)
c0101fbc:	e8 9b fa ff ff       	call   c0101a5c <lpt_putc>
        cga_putc(c);
c0101fc1:	8b 45 08             	mov    0x8(%ebp),%eax
c0101fc4:	89 04 24             	mov    %eax,(%esp)
c0101fc7:	e8 cf fa ff ff       	call   c0101a9b <cga_putc>
        serial_putc(c);
c0101fcc:	8b 45 08             	mov    0x8(%ebp),%eax
c0101fcf:	89 04 24             	mov    %eax,(%esp)
c0101fd2:	e8 f1 fc ff ff       	call   c0101cc8 <serial_putc>
    }
    local_intr_restore(intr_flag);
c0101fd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101fda:	89 04 24             	mov    %eax,(%esp)
c0101fdd:	e8 dd f7 ff ff       	call   c01017bf <__intr_restore>
}
c0101fe2:	c9                   	leave  
c0101fe3:	c3                   	ret    

c0101fe4 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101fe4:	55                   	push   %ebp
c0101fe5:	89 e5                	mov    %esp,%ebp
c0101fe7:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c0101fea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0101ff1:	e8 9f f7 ff ff       	call   c0101795 <__intr_save>
c0101ff6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101ff9:	e8 ab fd ff ff       	call   c0101da9 <serial_intr>
        kbd_intr();
c0101ffe:	e8 4c ff ff ff       	call   c0101f4f <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0102003:	8b 15 40 47 1c c0    	mov    0xc01c4740,%edx
c0102009:	a1 44 47 1c c0       	mov    0xc01c4744,%eax
c010200e:	39 c2                	cmp    %eax,%edx
c0102010:	74 31                	je     c0102043 <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0102012:	a1 40 47 1c c0       	mov    0xc01c4740,%eax
c0102017:	8d 50 01             	lea    0x1(%eax),%edx
c010201a:	89 15 40 47 1c c0    	mov    %edx,0xc01c4740
c0102020:	0f b6 80 40 45 1c c0 	movzbl -0x3fe3bac0(%eax),%eax
c0102027:	0f b6 c0             	movzbl %al,%eax
c010202a:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c010202d:	a1 40 47 1c c0       	mov    0xc01c4740,%eax
c0102032:	3d 00 02 00 00       	cmp    $0x200,%eax
c0102037:	75 0a                	jne    c0102043 <cons_getc+0x5f>
                cons.rpos = 0;
c0102039:	c7 05 40 47 1c c0 00 	movl   $0x0,0xc01c4740
c0102040:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c0102043:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102046:	89 04 24             	mov    %eax,(%esp)
c0102049:	e8 71 f7 ff ff       	call   c01017bf <__intr_restore>
    return c;
c010204e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102051:	c9                   	leave  
c0102052:	c3                   	ret    

c0102053 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0102053:	55                   	push   %ebp
c0102054:	89 e5                	mov    %esp,%ebp
c0102056:	83 ec 14             	sub    $0x14,%esp
c0102059:	8b 45 08             	mov    0x8(%ebp),%eax
c010205c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c0102060:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102064:	66 a3 50 15 13 c0    	mov    %ax,0xc0131550
    if (did_init) {
c010206a:	a1 4c 47 1c c0       	mov    0xc01c474c,%eax
c010206f:	85 c0                	test   %eax,%eax
c0102071:	74 36                	je     c01020a9 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102073:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102077:	0f b6 c0             	movzbl %al,%eax
c010207a:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0102080:	88 45 fd             	mov    %al,-0x3(%ebp)
c0102083:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102087:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010208b:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c010208c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102090:	66 c1 e8 08          	shr    $0x8,%ax
c0102094:	0f b6 c0             	movzbl %al,%eax
c0102097:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c010209d:	88 45 f9             	mov    %al,-0x7(%ebp)
c01020a0:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01020a4:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01020a8:	ee                   	out    %al,(%dx)
    }
}
c01020a9:	c9                   	leave  
c01020aa:	c3                   	ret    

c01020ab <pic_enable>:

void
pic_enable(unsigned int irq) {
c01020ab:	55                   	push   %ebp
c01020ac:	89 e5                	mov    %esp,%ebp
c01020ae:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c01020b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01020b4:	ba 01 00 00 00       	mov    $0x1,%edx
c01020b9:	89 c1                	mov    %eax,%ecx
c01020bb:	d3 e2                	shl    %cl,%edx
c01020bd:	89 d0                	mov    %edx,%eax
c01020bf:	f7 d0                	not    %eax
c01020c1:	89 c2                	mov    %eax,%edx
c01020c3:	0f b7 05 50 15 13 c0 	movzwl 0xc0131550,%eax
c01020ca:	21 d0                	and    %edx,%eax
c01020cc:	0f b7 c0             	movzwl %ax,%eax
c01020cf:	89 04 24             	mov    %eax,(%esp)
c01020d2:	e8 7c ff ff ff       	call   c0102053 <pic_setmask>
}
c01020d7:	c9                   	leave  
c01020d8:	c3                   	ret    

c01020d9 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01020d9:	55                   	push   %ebp
c01020da:	89 e5                	mov    %esp,%ebp
c01020dc:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c01020df:	c7 05 4c 47 1c c0 01 	movl   $0x1,0xc01c474c
c01020e6:	00 00 00 
c01020e9:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01020ef:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c01020f3:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01020f7:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01020fb:	ee                   	out    %al,(%dx)
c01020fc:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c0102102:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c0102106:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010210a:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c010210e:	ee                   	out    %al,(%dx)
c010210f:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c0102115:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c0102119:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010211d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0102121:	ee                   	out    %al,(%dx)
c0102122:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c0102128:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c010212c:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102130:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102134:	ee                   	out    %al,(%dx)
c0102135:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c010213b:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c010213f:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102143:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102147:	ee                   	out    %al,(%dx)
c0102148:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c010214e:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c0102152:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102156:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010215a:	ee                   	out    %al,(%dx)
c010215b:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c0102161:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c0102165:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102169:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010216d:	ee                   	out    %al,(%dx)
c010216e:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102174:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c0102178:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c010217c:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102180:	ee                   	out    %al,(%dx)
c0102181:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c0102187:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c010218b:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010218f:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102193:	ee                   	out    %al,(%dx)
c0102194:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c010219a:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c010219e:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01021a2:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c01021a6:	ee                   	out    %al,(%dx)
c01021a7:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c01021ad:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c01021b1:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01021b5:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01021b9:	ee                   	out    %al,(%dx)
c01021ba:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c01021c0:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c01021c4:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01021c8:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01021cc:	ee                   	out    %al,(%dx)
c01021cd:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c01021d3:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c01021d7:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01021db:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01021df:	ee                   	out    %al,(%dx)
c01021e0:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c01021e6:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c01021ea:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01021ee:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01021f2:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01021f3:	0f b7 05 50 15 13 c0 	movzwl 0xc0131550,%eax
c01021fa:	66 83 f8 ff          	cmp    $0xffff,%ax
c01021fe:	74 12                	je     c0102212 <pic_init+0x139>
        pic_setmask(irq_mask);
c0102200:	0f b7 05 50 15 13 c0 	movzwl 0xc0131550,%eax
c0102207:	0f b7 c0             	movzwl %ax,%eax
c010220a:	89 04 24             	mov    %eax,(%esp)
c010220d:	e8 41 fe ff ff       	call   c0102053 <pic_setmask>
    }
}
c0102212:	c9                   	leave  
c0102213:	c3                   	ret    

c0102214 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c0102214:	55                   	push   %ebp
c0102215:	89 e5                	mov    %esp,%ebp
    asm volatile ("sti");
c0102217:	fb                   	sti    
    sti();
}
c0102218:	5d                   	pop    %ebp
c0102219:	c3                   	ret    

c010221a <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c010221a:	55                   	push   %ebp
c010221b:	89 e5                	mov    %esp,%ebp
    asm volatile ("cli" ::: "memory");
c010221d:	fa                   	cli    
    cli();
}
c010221e:	5d                   	pop    %ebp
c010221f:	c3                   	ret    

c0102220 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c0102220:	55                   	push   %ebp
c0102221:	89 e5                	mov    %esp,%ebp
c0102223:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c0102226:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c010222d:	00 
c010222e:	c7 04 24 e0 da 10 c0 	movl   $0xc010dae0,(%esp)
c0102235:	e8 74 e0 ff ff       	call   c01002ae <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c010223a:	c7 04 24 ea da 10 c0 	movl   $0xc010daea,(%esp)
c0102241:	e8 68 e0 ff ff       	call   c01002ae <cprintf>
    panic("EOT: kernel seems ok.");
c0102246:	c7 44 24 08 f8 da 10 	movl   $0xc010daf8,0x8(%esp)
c010224d:	c0 
c010224e:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c0102255:	00 
c0102256:	c7 04 24 0e db 10 c0 	movl   $0xc010db0e,(%esp)
c010225d:	e8 a3 e1 ff ff       	call   c0100405 <__panic>

c0102262 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c0102262:	55                   	push   %ebp
c0102263:	89 e5                	mov    %esp,%ebp
c0102265:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c0102268:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010226f:	e9 c3 00 00 00       	jmp    c0102337 <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c0102274:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102277:	8b 04 85 e0 15 13 c0 	mov    -0x3fecea20(,%eax,4),%eax
c010227e:	89 c2                	mov    %eax,%edx
c0102280:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102283:	66 89 14 c5 60 47 1c 	mov    %dx,-0x3fe3b8a0(,%eax,8)
c010228a:	c0 
c010228b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010228e:	66 c7 04 c5 62 47 1c 	movw   $0x8,-0x3fe3b89e(,%eax,8)
c0102295:	c0 08 00 
c0102298:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010229b:	0f b6 14 c5 64 47 1c 	movzbl -0x3fe3b89c(,%eax,8),%edx
c01022a2:	c0 
c01022a3:	83 e2 e0             	and    $0xffffffe0,%edx
c01022a6:	88 14 c5 64 47 1c c0 	mov    %dl,-0x3fe3b89c(,%eax,8)
c01022ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022b0:	0f b6 14 c5 64 47 1c 	movzbl -0x3fe3b89c(,%eax,8),%edx
c01022b7:	c0 
c01022b8:	83 e2 1f             	and    $0x1f,%edx
c01022bb:	88 14 c5 64 47 1c c0 	mov    %dl,-0x3fe3b89c(,%eax,8)
c01022c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022c5:	0f b6 14 c5 65 47 1c 	movzbl -0x3fe3b89b(,%eax,8),%edx
c01022cc:	c0 
c01022cd:	83 e2 f0             	and    $0xfffffff0,%edx
c01022d0:	83 ca 0e             	or     $0xe,%edx
c01022d3:	88 14 c5 65 47 1c c0 	mov    %dl,-0x3fe3b89b(,%eax,8)
c01022da:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022dd:	0f b6 14 c5 65 47 1c 	movzbl -0x3fe3b89b(,%eax,8),%edx
c01022e4:	c0 
c01022e5:	83 e2 ef             	and    $0xffffffef,%edx
c01022e8:	88 14 c5 65 47 1c c0 	mov    %dl,-0x3fe3b89b(,%eax,8)
c01022ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022f2:	0f b6 14 c5 65 47 1c 	movzbl -0x3fe3b89b(,%eax,8),%edx
c01022f9:	c0 
c01022fa:	83 e2 9f             	and    $0xffffff9f,%edx
c01022fd:	88 14 c5 65 47 1c c0 	mov    %dl,-0x3fe3b89b(,%eax,8)
c0102304:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102307:	0f b6 14 c5 65 47 1c 	movzbl -0x3fe3b89b(,%eax,8),%edx
c010230e:	c0 
c010230f:	83 ca 80             	or     $0xffffff80,%edx
c0102312:	88 14 c5 65 47 1c c0 	mov    %dl,-0x3fe3b89b(,%eax,8)
c0102319:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010231c:	8b 04 85 e0 15 13 c0 	mov    -0x3fecea20(,%eax,4),%eax
c0102323:	c1 e8 10             	shr    $0x10,%eax
c0102326:	89 c2                	mov    %eax,%edx
c0102328:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010232b:	66 89 14 c5 66 47 1c 	mov    %dx,-0x3fe3b89a(,%eax,8)
c0102332:	c0 
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c0102333:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102337:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010233a:	3d ff 00 00 00       	cmp    $0xff,%eax
c010233f:	0f 86 2f ff ff ff    	jbe    c0102274 <idt_init+0x12>
    }
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c0102345:	a1 e0 17 13 c0       	mov    0xc01317e0,%eax
c010234a:	66 a3 60 4b 1c c0    	mov    %ax,0xc01c4b60
c0102350:	66 c7 05 62 4b 1c c0 	movw   $0x8,0xc01c4b62
c0102357:	08 00 
c0102359:	0f b6 05 64 4b 1c c0 	movzbl 0xc01c4b64,%eax
c0102360:	83 e0 e0             	and    $0xffffffe0,%eax
c0102363:	a2 64 4b 1c c0       	mov    %al,0xc01c4b64
c0102368:	0f b6 05 64 4b 1c c0 	movzbl 0xc01c4b64,%eax
c010236f:	83 e0 1f             	and    $0x1f,%eax
c0102372:	a2 64 4b 1c c0       	mov    %al,0xc01c4b64
c0102377:	0f b6 05 65 4b 1c c0 	movzbl 0xc01c4b65,%eax
c010237e:	83 c8 0f             	or     $0xf,%eax
c0102381:	a2 65 4b 1c c0       	mov    %al,0xc01c4b65
c0102386:	0f b6 05 65 4b 1c c0 	movzbl 0xc01c4b65,%eax
c010238d:	83 e0 ef             	and    $0xffffffef,%eax
c0102390:	a2 65 4b 1c c0       	mov    %al,0xc01c4b65
c0102395:	0f b6 05 65 4b 1c c0 	movzbl 0xc01c4b65,%eax
c010239c:	83 c8 60             	or     $0x60,%eax
c010239f:	a2 65 4b 1c c0       	mov    %al,0xc01c4b65
c01023a4:	0f b6 05 65 4b 1c c0 	movzbl 0xc01c4b65,%eax
c01023ab:	83 c8 80             	or     $0xffffff80,%eax
c01023ae:	a2 65 4b 1c c0       	mov    %al,0xc01c4b65
c01023b3:	a1 e0 17 13 c0       	mov    0xc01317e0,%eax
c01023b8:	c1 e8 10             	shr    $0x10,%eax
c01023bb:	66 a3 66 4b 1c c0    	mov    %ax,0xc01c4b66
c01023c1:	c7 45 f8 60 15 13 c0 	movl   $0xc0131560,-0x8(%ebp)
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c01023c8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01023cb:	0f 01 18             	lidtl  (%eax)
    lidt(&idt_pd);
}
c01023ce:	c9                   	leave  
c01023cf:	c3                   	ret    

c01023d0 <trapname>:

static const char *
trapname(int trapno) {
c01023d0:	55                   	push   %ebp
c01023d1:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c01023d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01023d6:	83 f8 13             	cmp    $0x13,%eax
c01023d9:	77 0c                	ja     c01023e7 <trapname+0x17>
        return excnames[trapno];
c01023db:	8b 45 08             	mov    0x8(%ebp),%eax
c01023de:	8b 04 85 a0 df 10 c0 	mov    -0x3fef2060(,%eax,4),%eax
c01023e5:	eb 18                	jmp    c01023ff <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c01023e7:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c01023eb:	7e 0d                	jle    c01023fa <trapname+0x2a>
c01023ed:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01023f1:	7f 07                	jg     c01023fa <trapname+0x2a>
        return "Hardware Interrupt";
c01023f3:	b8 1f db 10 c0       	mov    $0xc010db1f,%eax
c01023f8:	eb 05                	jmp    c01023ff <trapname+0x2f>
    }
    return "(unknown trap)";
c01023fa:	b8 32 db 10 c0       	mov    $0xc010db32,%eax
}
c01023ff:	5d                   	pop    %ebp
c0102400:	c3                   	ret    

c0102401 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c0102401:	55                   	push   %ebp
c0102402:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c0102404:	8b 45 08             	mov    0x8(%ebp),%eax
c0102407:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c010240b:	66 83 f8 08          	cmp    $0x8,%ax
c010240f:	0f 94 c0             	sete   %al
c0102412:	0f b6 c0             	movzbl %al,%eax
}
c0102415:	5d                   	pop    %ebp
c0102416:	c3                   	ret    

c0102417 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c0102417:	55                   	push   %ebp
c0102418:	89 e5                	mov    %esp,%ebp
c010241a:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c010241d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102420:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102424:	c7 04 24 73 db 10 c0 	movl   $0xc010db73,(%esp)
c010242b:	e8 7e de ff ff       	call   c01002ae <cprintf>
    print_regs(&tf->tf_regs);
c0102430:	8b 45 08             	mov    0x8(%ebp),%eax
c0102433:	89 04 24             	mov    %eax,(%esp)
c0102436:	e8 a1 01 00 00       	call   c01025dc <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c010243b:	8b 45 08             	mov    0x8(%ebp),%eax
c010243e:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0102442:	0f b7 c0             	movzwl %ax,%eax
c0102445:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102449:	c7 04 24 84 db 10 c0 	movl   $0xc010db84,(%esp)
c0102450:	e8 59 de ff ff       	call   c01002ae <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0102455:	8b 45 08             	mov    0x8(%ebp),%eax
c0102458:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c010245c:	0f b7 c0             	movzwl %ax,%eax
c010245f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102463:	c7 04 24 97 db 10 c0 	movl   $0xc010db97,(%esp)
c010246a:	e8 3f de ff ff       	call   c01002ae <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c010246f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102472:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102476:	0f b7 c0             	movzwl %ax,%eax
c0102479:	89 44 24 04          	mov    %eax,0x4(%esp)
c010247d:	c7 04 24 aa db 10 c0 	movl   $0xc010dbaa,(%esp)
c0102484:	e8 25 de ff ff       	call   c01002ae <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c0102489:	8b 45 08             	mov    0x8(%ebp),%eax
c010248c:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c0102490:	0f b7 c0             	movzwl %ax,%eax
c0102493:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102497:	c7 04 24 bd db 10 c0 	movl   $0xc010dbbd,(%esp)
c010249e:	e8 0b de ff ff       	call   c01002ae <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c01024a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01024a6:	8b 40 30             	mov    0x30(%eax),%eax
c01024a9:	89 04 24             	mov    %eax,(%esp)
c01024ac:	e8 1f ff ff ff       	call   c01023d0 <trapname>
c01024b1:	8b 55 08             	mov    0x8(%ebp),%edx
c01024b4:	8b 52 30             	mov    0x30(%edx),%edx
c01024b7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01024bb:	89 54 24 04          	mov    %edx,0x4(%esp)
c01024bf:	c7 04 24 d0 db 10 c0 	movl   $0xc010dbd0,(%esp)
c01024c6:	e8 e3 dd ff ff       	call   c01002ae <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c01024cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01024ce:	8b 40 34             	mov    0x34(%eax),%eax
c01024d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024d5:	c7 04 24 e2 db 10 c0 	movl   $0xc010dbe2,(%esp)
c01024dc:	e8 cd dd ff ff       	call   c01002ae <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c01024e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01024e4:	8b 40 38             	mov    0x38(%eax),%eax
c01024e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024eb:	c7 04 24 f1 db 10 c0 	movl   $0xc010dbf1,(%esp)
c01024f2:	e8 b7 dd ff ff       	call   c01002ae <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c01024f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01024fa:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024fe:	0f b7 c0             	movzwl %ax,%eax
c0102501:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102505:	c7 04 24 00 dc 10 c0 	movl   $0xc010dc00,(%esp)
c010250c:	e8 9d dd ff ff       	call   c01002ae <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c0102511:	8b 45 08             	mov    0x8(%ebp),%eax
c0102514:	8b 40 40             	mov    0x40(%eax),%eax
c0102517:	89 44 24 04          	mov    %eax,0x4(%esp)
c010251b:	c7 04 24 13 dc 10 c0 	movl   $0xc010dc13,(%esp)
c0102522:	e8 87 dd ff ff       	call   c01002ae <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102527:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010252e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0102535:	eb 3e                	jmp    c0102575 <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c0102537:	8b 45 08             	mov    0x8(%ebp),%eax
c010253a:	8b 50 40             	mov    0x40(%eax),%edx
c010253d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102540:	21 d0                	and    %edx,%eax
c0102542:	85 c0                	test   %eax,%eax
c0102544:	74 28                	je     c010256e <print_trapframe+0x157>
c0102546:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102549:	8b 04 85 80 15 13 c0 	mov    -0x3fecea80(,%eax,4),%eax
c0102550:	85 c0                	test   %eax,%eax
c0102552:	74 1a                	je     c010256e <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c0102554:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102557:	8b 04 85 80 15 13 c0 	mov    -0x3fecea80(,%eax,4),%eax
c010255e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102562:	c7 04 24 22 dc 10 c0 	movl   $0xc010dc22,(%esp)
c0102569:	e8 40 dd ff ff       	call   c01002ae <cprintf>
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010256e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102572:	d1 65 f0             	shll   -0x10(%ebp)
c0102575:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102578:	83 f8 17             	cmp    $0x17,%eax
c010257b:	76 ba                	jbe    c0102537 <print_trapframe+0x120>
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c010257d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102580:	8b 40 40             	mov    0x40(%eax),%eax
c0102583:	25 00 30 00 00       	and    $0x3000,%eax
c0102588:	c1 e8 0c             	shr    $0xc,%eax
c010258b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010258f:	c7 04 24 26 dc 10 c0 	movl   $0xc010dc26,(%esp)
c0102596:	e8 13 dd ff ff       	call   c01002ae <cprintf>

    if (!trap_in_kernel(tf)) {
c010259b:	8b 45 08             	mov    0x8(%ebp),%eax
c010259e:	89 04 24             	mov    %eax,(%esp)
c01025a1:	e8 5b fe ff ff       	call   c0102401 <trap_in_kernel>
c01025a6:	85 c0                	test   %eax,%eax
c01025a8:	75 30                	jne    c01025da <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c01025aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ad:	8b 40 44             	mov    0x44(%eax),%eax
c01025b0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025b4:	c7 04 24 2f dc 10 c0 	movl   $0xc010dc2f,(%esp)
c01025bb:	e8 ee dc ff ff       	call   c01002ae <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c01025c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01025c3:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c01025c7:	0f b7 c0             	movzwl %ax,%eax
c01025ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025ce:	c7 04 24 3e dc 10 c0 	movl   $0xc010dc3e,(%esp)
c01025d5:	e8 d4 dc ff ff       	call   c01002ae <cprintf>
    }
}
c01025da:	c9                   	leave  
c01025db:	c3                   	ret    

c01025dc <print_regs>:

void
print_regs(struct pushregs *regs) {
c01025dc:	55                   	push   %ebp
c01025dd:	89 e5                	mov    %esp,%ebp
c01025df:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c01025e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01025e5:	8b 00                	mov    (%eax),%eax
c01025e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025eb:	c7 04 24 51 dc 10 c0 	movl   $0xc010dc51,(%esp)
c01025f2:	e8 b7 dc ff ff       	call   c01002ae <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c01025f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01025fa:	8b 40 04             	mov    0x4(%eax),%eax
c01025fd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102601:	c7 04 24 60 dc 10 c0 	movl   $0xc010dc60,(%esp)
c0102608:	e8 a1 dc ff ff       	call   c01002ae <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c010260d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102610:	8b 40 08             	mov    0x8(%eax),%eax
c0102613:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102617:	c7 04 24 6f dc 10 c0 	movl   $0xc010dc6f,(%esp)
c010261e:	e8 8b dc ff ff       	call   c01002ae <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c0102623:	8b 45 08             	mov    0x8(%ebp),%eax
c0102626:	8b 40 0c             	mov    0xc(%eax),%eax
c0102629:	89 44 24 04          	mov    %eax,0x4(%esp)
c010262d:	c7 04 24 7e dc 10 c0 	movl   $0xc010dc7e,(%esp)
c0102634:	e8 75 dc ff ff       	call   c01002ae <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c0102639:	8b 45 08             	mov    0x8(%ebp),%eax
c010263c:	8b 40 10             	mov    0x10(%eax),%eax
c010263f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102643:	c7 04 24 8d dc 10 c0 	movl   $0xc010dc8d,(%esp)
c010264a:	e8 5f dc ff ff       	call   c01002ae <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c010264f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102652:	8b 40 14             	mov    0x14(%eax),%eax
c0102655:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102659:	c7 04 24 9c dc 10 c0 	movl   $0xc010dc9c,(%esp)
c0102660:	e8 49 dc ff ff       	call   c01002ae <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0102665:	8b 45 08             	mov    0x8(%ebp),%eax
c0102668:	8b 40 18             	mov    0x18(%eax),%eax
c010266b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010266f:	c7 04 24 ab dc 10 c0 	movl   $0xc010dcab,(%esp)
c0102676:	e8 33 dc ff ff       	call   c01002ae <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c010267b:	8b 45 08             	mov    0x8(%ebp),%eax
c010267e:	8b 40 1c             	mov    0x1c(%eax),%eax
c0102681:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102685:	c7 04 24 ba dc 10 c0 	movl   $0xc010dcba,(%esp)
c010268c:	e8 1d dc ff ff       	call   c01002ae <cprintf>
}
c0102691:	c9                   	leave  
c0102692:	c3                   	ret    

c0102693 <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c0102693:	55                   	push   %ebp
c0102694:	89 e5                	mov    %esp,%ebp
c0102696:	53                   	push   %ebx
c0102697:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c010269a:	8b 45 08             	mov    0x8(%ebp),%eax
c010269d:	8b 40 34             	mov    0x34(%eax),%eax
c01026a0:	83 e0 01             	and    $0x1,%eax
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026a3:	85 c0                	test   %eax,%eax
c01026a5:	74 07                	je     c01026ae <print_pgfault+0x1b>
c01026a7:	b9 c9 dc 10 c0       	mov    $0xc010dcc9,%ecx
c01026ac:	eb 05                	jmp    c01026b3 <print_pgfault+0x20>
c01026ae:	b9 da dc 10 c0       	mov    $0xc010dcda,%ecx
            (tf->tf_err & 2) ? 'W' : 'R',
c01026b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01026b6:	8b 40 34             	mov    0x34(%eax),%eax
c01026b9:	83 e0 02             	and    $0x2,%eax
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026bc:	85 c0                	test   %eax,%eax
c01026be:	74 07                	je     c01026c7 <print_pgfault+0x34>
c01026c0:	ba 57 00 00 00       	mov    $0x57,%edx
c01026c5:	eb 05                	jmp    c01026cc <print_pgfault+0x39>
c01026c7:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c01026cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01026cf:	8b 40 34             	mov    0x34(%eax),%eax
c01026d2:	83 e0 04             	and    $0x4,%eax
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026d5:	85 c0                	test   %eax,%eax
c01026d7:	74 07                	je     c01026e0 <print_pgfault+0x4d>
c01026d9:	b8 55 00 00 00       	mov    $0x55,%eax
c01026de:	eb 05                	jmp    c01026e5 <print_pgfault+0x52>
c01026e0:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01026e5:	0f 20 d3             	mov    %cr2,%ebx
c01026e8:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c01026eb:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c01026ee:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01026f2:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01026f6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01026fa:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01026fe:	c7 04 24 e8 dc 10 c0 	movl   $0xc010dce8,(%esp)
c0102705:	e8 a4 db ff ff       	call   c01002ae <cprintf>
}
c010270a:	83 c4 34             	add    $0x34,%esp
c010270d:	5b                   	pop    %ebx
c010270e:	5d                   	pop    %ebp
c010270f:	c3                   	ret    

c0102710 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c0102710:	55                   	push   %ebp
c0102711:	89 e5                	mov    %esp,%ebp
c0102713:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c0102716:	a1 bc 70 1c c0       	mov    0xc01c70bc,%eax
c010271b:	85 c0                	test   %eax,%eax
c010271d:	74 0b                	je     c010272a <pgfault_handler+0x1a>
            print_pgfault(tf);
c010271f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102722:	89 04 24             	mov    %eax,(%esp)
c0102725:	e8 69 ff ff ff       	call   c0102693 <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c010272a:	a1 bc 70 1c c0       	mov    0xc01c70bc,%eax
c010272f:	85 c0                	test   %eax,%eax
c0102731:	74 3d                	je     c0102770 <pgfault_handler+0x60>
        assert(current == idleproc);
c0102733:	8b 15 28 50 1c c0    	mov    0xc01c5028,%edx
c0102739:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010273e:	39 c2                	cmp    %eax,%edx
c0102740:	74 24                	je     c0102766 <pgfault_handler+0x56>
c0102742:	c7 44 24 0c 0b dd 10 	movl   $0xc010dd0b,0xc(%esp)
c0102749:	c0 
c010274a:	c7 44 24 08 1f dd 10 	movl   $0xc010dd1f,0x8(%esp)
c0102751:	c0 
c0102752:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c0102759:	00 
c010275a:	c7 04 24 0e db 10 c0 	movl   $0xc010db0e,(%esp)
c0102761:	e8 9f dc ff ff       	call   c0100405 <__panic>
        mm = check_mm_struct;
c0102766:	a1 bc 70 1c c0       	mov    0xc01c70bc,%eax
c010276b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010276e:	eb 46                	jmp    c01027b6 <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c0102770:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102775:	85 c0                	test   %eax,%eax
c0102777:	75 32                	jne    c01027ab <pgfault_handler+0x9b>
            print_trapframe(tf);
c0102779:	8b 45 08             	mov    0x8(%ebp),%eax
c010277c:	89 04 24             	mov    %eax,(%esp)
c010277f:	e8 93 fc ff ff       	call   c0102417 <print_trapframe>
            print_pgfault(tf);
c0102784:	8b 45 08             	mov    0x8(%ebp),%eax
c0102787:	89 04 24             	mov    %eax,(%esp)
c010278a:	e8 04 ff ff ff       	call   c0102693 <print_pgfault>
            panic("unhandled page fault.\n");
c010278f:	c7 44 24 08 34 dd 10 	movl   $0xc010dd34,0x8(%esp)
c0102796:	c0 
c0102797:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c010279e:	00 
c010279f:	c7 04 24 0e db 10 c0 	movl   $0xc010db0e,(%esp)
c01027a6:	e8 5a dc ff ff       	call   c0100405 <__panic>
        }
        mm = current->mm;
c01027ab:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c01027b0:	8b 40 18             	mov    0x18(%eax),%eax
c01027b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01027b6:	0f 20 d0             	mov    %cr2,%eax
c01027b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c01027bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c01027bf:	89 c2                	mov    %eax,%edx
c01027c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01027c4:	8b 40 34             	mov    0x34(%eax),%eax
c01027c7:	89 54 24 08          	mov    %edx,0x8(%esp)
c01027cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01027cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01027d2:	89 04 24             	mov    %eax,(%esp)
c01027d5:	e8 77 1c 00 00       	call   c0104451 <do_pgfault>
}
c01027da:	c9                   	leave  
c01027db:	c3                   	ret    

c01027dc <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c01027dc:	55                   	push   %ebp
c01027dd:	89 e5                	mov    %esp,%ebp
c01027df:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c01027e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c01027e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01027ec:	8b 40 30             	mov    0x30(%eax),%eax
c01027ef:	83 f8 2f             	cmp    $0x2f,%eax
c01027f2:	77 38                	ja     c010282c <trap_dispatch+0x50>
c01027f4:	83 f8 2e             	cmp    $0x2e,%eax
c01027f7:	0f 83 07 02 00 00    	jae    c0102a04 <trap_dispatch+0x228>
c01027fd:	83 f8 20             	cmp    $0x20,%eax
c0102800:	0f 84 07 01 00 00    	je     c010290d <trap_dispatch+0x131>
c0102806:	83 f8 20             	cmp    $0x20,%eax
c0102809:	77 0a                	ja     c0102815 <trap_dispatch+0x39>
c010280b:	83 f8 0e             	cmp    $0xe,%eax
c010280e:	74 3e                	je     c010284e <trap_dispatch+0x72>
c0102810:	e9 a7 01 00 00       	jmp    c01029bc <trap_dispatch+0x1e0>
c0102815:	83 f8 21             	cmp    $0x21,%eax
c0102818:	0f 84 5c 01 00 00    	je     c010297a <trap_dispatch+0x19e>
c010281e:	83 f8 24             	cmp    $0x24,%eax
c0102821:	0f 84 2a 01 00 00    	je     c0102951 <trap_dispatch+0x175>
c0102827:	e9 90 01 00 00       	jmp    c01029bc <trap_dispatch+0x1e0>
c010282c:	83 f8 78             	cmp    $0x78,%eax
c010282f:	0f 82 87 01 00 00    	jb     c01029bc <trap_dispatch+0x1e0>
c0102835:	83 f8 79             	cmp    $0x79,%eax
c0102838:	0f 86 62 01 00 00    	jbe    c01029a0 <trap_dispatch+0x1c4>
c010283e:	3d 80 00 00 00       	cmp    $0x80,%eax
c0102843:	0f 84 ba 00 00 00    	je     c0102903 <trap_dispatch+0x127>
c0102849:	e9 6e 01 00 00       	jmp    c01029bc <trap_dispatch+0x1e0>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c010284e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102851:	89 04 24             	mov    %eax,(%esp)
c0102854:	e8 b7 fe ff ff       	call   c0102710 <pgfault_handler>
c0102859:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010285c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102860:	0f 84 98 00 00 00    	je     c01028fe <trap_dispatch+0x122>
            print_trapframe(tf);
c0102866:	8b 45 08             	mov    0x8(%ebp),%eax
c0102869:	89 04 24             	mov    %eax,(%esp)
c010286c:	e8 a6 fb ff ff       	call   c0102417 <print_trapframe>
            if (current == NULL) {
c0102871:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102876:	85 c0                	test   %eax,%eax
c0102878:	75 23                	jne    c010289d <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c010287a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010287d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102881:	c7 44 24 08 4c dd 10 	movl   $0xc010dd4c,0x8(%esp)
c0102888:	c0 
c0102889:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c0102890:	00 
c0102891:	c7 04 24 0e db 10 c0 	movl   $0xc010db0e,(%esp)
c0102898:	e8 68 db ff ff       	call   c0100405 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c010289d:	8b 45 08             	mov    0x8(%ebp),%eax
c01028a0:	89 04 24             	mov    %eax,(%esp)
c01028a3:	e8 59 fb ff ff       	call   c0102401 <trap_in_kernel>
c01028a8:	85 c0                	test   %eax,%eax
c01028aa:	74 23                	je     c01028cf <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c01028ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028af:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01028b3:	c7 44 24 08 6c dd 10 	movl   $0xc010dd6c,0x8(%esp)
c01028ba:	c0 
c01028bb:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c01028c2:	00 
c01028c3:	c7 04 24 0e db 10 c0 	movl   $0xc010db0e,(%esp)
c01028ca:	e8 36 db ff ff       	call   c0100405 <__panic>
                }
                cprintf("killed by kernel.\n");
c01028cf:	c7 04 24 9a dd 10 c0 	movl   $0xc010dd9a,(%esp)
c01028d6:	e8 d3 d9 ff ff       	call   c01002ae <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c01028db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028de:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01028e2:	c7 44 24 08 b0 dd 10 	movl   $0xc010ddb0,0x8(%esp)
c01028e9:	c0 
c01028ea:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c01028f1:	00 
c01028f2:	c7 04 24 0e db 10 c0 	movl   $0xc010db0e,(%esp)
c01028f9:	e8 07 db ff ff       	call   c0100405 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c01028fe:	e9 02 01 00 00       	jmp    c0102a05 <trap_dispatch+0x229>
    case T_SYSCALL:
        syscall();
c0102903:	e8 54 a0 00 00       	call   c010c95c <syscall>
        break;
c0102908:	e9 f8 00 00 00       	jmp    c0102a05 <trap_dispatch+0x229>
        /* LAB7 YOUR CODE */
        /* you should upate you lab6 code
         * IMPORTANT FUNCTIONS:
	     * run_timer_list
         */
        ticks ++;
c010290d:	a1 b8 70 1c c0       	mov    0xc01c70b8,%eax
c0102912:	83 c0 01             	add    $0x1,%eax
c0102915:	a3 b8 70 1c c0       	mov    %eax,0xc01c70b8
        assert(current != NULL);
c010291a:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010291f:	85 c0                	test   %eax,%eax
c0102921:	75 24                	jne    c0102947 <trap_dispatch+0x16b>
c0102923:	c7 44 24 0c d9 dd 10 	movl   $0xc010ddd9,0xc(%esp)
c010292a:	c0 
c010292b:	c7 44 24 08 1f dd 10 	movl   $0xc010dd1f,0x8(%esp)
c0102932:	c0 
c0102933:	c7 44 24 04 f5 00 00 	movl   $0xf5,0x4(%esp)
c010293a:	00 
c010293b:	c7 04 24 0e db 10 c0 	movl   $0xc010db0e,(%esp)
c0102942:	e8 be da ff ff       	call   c0100405 <__panic>
        run_timer_list();
c0102947:	e8 e7 99 00 00       	call   c010c333 <run_timer_list>
        break;
c010294c:	e9 b4 00 00 00       	jmp    c0102a05 <trap_dispatch+0x229>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c0102951:	e8 8e f6 ff ff       	call   c0101fe4 <cons_getc>
c0102956:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c0102959:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c010295d:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102961:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102965:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102969:	c7 04 24 e9 dd 10 c0 	movl   $0xc010dde9,(%esp)
c0102970:	e8 39 d9 ff ff       	call   c01002ae <cprintf>
        break;
c0102975:	e9 8b 00 00 00       	jmp    c0102a05 <trap_dispatch+0x229>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c010297a:	e8 65 f6 ff ff       	call   c0101fe4 <cons_getc>
c010297f:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c0102982:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0102986:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c010298a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010298e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102992:	c7 04 24 fb dd 10 c0 	movl   $0xc010ddfb,(%esp)
c0102999:	e8 10 d9 ff ff       	call   c01002ae <cprintf>
        break;
c010299e:	eb 65                	jmp    c0102a05 <trap_dispatch+0x229>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c01029a0:	c7 44 24 08 0a de 10 	movl   $0xc010de0a,0x8(%esp)
c01029a7:	c0 
c01029a8:	c7 44 24 04 03 01 00 	movl   $0x103,0x4(%esp)
c01029af:	00 
c01029b0:	c7 04 24 0e db 10 c0 	movl   $0xc010db0e,(%esp)
c01029b7:	e8 49 da ff ff       	call   c0100405 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c01029bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01029bf:	89 04 24             	mov    %eax,(%esp)
c01029c2:	e8 50 fa ff ff       	call   c0102417 <print_trapframe>
        if (current != NULL) {
c01029c7:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c01029cc:	85 c0                	test   %eax,%eax
c01029ce:	74 18                	je     c01029e8 <trap_dispatch+0x20c>
            cprintf("unhandled trap.\n");
c01029d0:	c7 04 24 1a de 10 c0 	movl   $0xc010de1a,(%esp)
c01029d7:	e8 d2 d8 ff ff       	call   c01002ae <cprintf>
            do_exit(-E_KILLED);
c01029dc:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c01029e3:	e8 79 84 00 00       	call   c010ae61 <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c01029e8:	c7 44 24 08 2b de 10 	movl   $0xc010de2b,0x8(%esp)
c01029ef:	c0 
c01029f0:	c7 44 24 04 10 01 00 	movl   $0x110,0x4(%esp)
c01029f7:	00 
c01029f8:	c7 04 24 0e db 10 c0 	movl   $0xc010db0e,(%esp)
c01029ff:	e8 01 da ff ff       	call   c0100405 <__panic>
        break;
c0102a04:	90                   	nop

    }
}
c0102a05:	c9                   	leave  
c0102a06:	c3                   	ret    

c0102a07 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102a07:	55                   	push   %ebp
c0102a08:	89 e5                	mov    %esp,%ebp
c0102a0a:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102a0d:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102a12:	85 c0                	test   %eax,%eax
c0102a14:	75 0d                	jne    c0102a23 <trap+0x1c>
        trap_dispatch(tf);
c0102a16:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a19:	89 04 24             	mov    %eax,(%esp)
c0102a1c:	e8 bb fd ff ff       	call   c01027dc <trap_dispatch>
c0102a21:	eb 6c                	jmp    c0102a8f <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102a23:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102a28:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102a2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102a2e:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102a33:	8b 55 08             	mov    0x8(%ebp),%edx
c0102a36:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102a39:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a3c:	89 04 24             	mov    %eax,(%esp)
c0102a3f:	e8 bd f9 ff ff       	call   c0102401 <trap_in_kernel>
c0102a44:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102a47:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a4a:	89 04 24             	mov    %eax,(%esp)
c0102a4d:	e8 8a fd ff ff       	call   c01027dc <trap_dispatch>
    
        current->tf = otf;
c0102a52:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102a57:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102a5a:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102a5d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102a61:	75 2c                	jne    c0102a8f <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102a63:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102a68:	8b 40 44             	mov    0x44(%eax),%eax
c0102a6b:	83 e0 01             	and    $0x1,%eax
c0102a6e:	85 c0                	test   %eax,%eax
c0102a70:	74 0c                	je     c0102a7e <trap+0x77>
                do_exit(-E_KILLED);
c0102a72:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102a79:	e8 e3 83 00 00       	call   c010ae61 <do_exit>
            }
            if (current->need_resched) {
c0102a7e:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102a83:	8b 40 10             	mov    0x10(%eax),%eax
c0102a86:	85 c0                	test   %eax,%eax
c0102a88:	74 05                	je     c0102a8f <trap+0x88>
                schedule();
c0102a8a:	e8 17 96 00 00       	call   c010c0a6 <schedule>
            }
        }
    }
}
c0102a8f:	c9                   	leave  
c0102a90:	c3                   	ret    

c0102a91 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102a91:	6a 00                	push   $0x0
  pushl $0
c0102a93:	6a 00                	push   $0x0
  jmp __alltraps
c0102a95:	e9 69 0a 00 00       	jmp    c0103503 <__alltraps>

c0102a9a <vector1>:
.globl vector1
vector1:
  pushl $0
c0102a9a:	6a 00                	push   $0x0
  pushl $1
c0102a9c:	6a 01                	push   $0x1
  jmp __alltraps
c0102a9e:	e9 60 0a 00 00       	jmp    c0103503 <__alltraps>

c0102aa3 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102aa3:	6a 00                	push   $0x0
  pushl $2
c0102aa5:	6a 02                	push   $0x2
  jmp __alltraps
c0102aa7:	e9 57 0a 00 00       	jmp    c0103503 <__alltraps>

c0102aac <vector3>:
.globl vector3
vector3:
  pushl $0
c0102aac:	6a 00                	push   $0x0
  pushl $3
c0102aae:	6a 03                	push   $0x3
  jmp __alltraps
c0102ab0:	e9 4e 0a 00 00       	jmp    c0103503 <__alltraps>

c0102ab5 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102ab5:	6a 00                	push   $0x0
  pushl $4
c0102ab7:	6a 04                	push   $0x4
  jmp __alltraps
c0102ab9:	e9 45 0a 00 00       	jmp    c0103503 <__alltraps>

c0102abe <vector5>:
.globl vector5
vector5:
  pushl $0
c0102abe:	6a 00                	push   $0x0
  pushl $5
c0102ac0:	6a 05                	push   $0x5
  jmp __alltraps
c0102ac2:	e9 3c 0a 00 00       	jmp    c0103503 <__alltraps>

c0102ac7 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102ac7:	6a 00                	push   $0x0
  pushl $6
c0102ac9:	6a 06                	push   $0x6
  jmp __alltraps
c0102acb:	e9 33 0a 00 00       	jmp    c0103503 <__alltraps>

c0102ad0 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102ad0:	6a 00                	push   $0x0
  pushl $7
c0102ad2:	6a 07                	push   $0x7
  jmp __alltraps
c0102ad4:	e9 2a 0a 00 00       	jmp    c0103503 <__alltraps>

c0102ad9 <vector8>:
.globl vector8
vector8:
  pushl $8
c0102ad9:	6a 08                	push   $0x8
  jmp __alltraps
c0102adb:	e9 23 0a 00 00       	jmp    c0103503 <__alltraps>

c0102ae0 <vector9>:
.globl vector9
vector9:
  pushl $0
c0102ae0:	6a 00                	push   $0x0
  pushl $9
c0102ae2:	6a 09                	push   $0x9
  jmp __alltraps
c0102ae4:	e9 1a 0a 00 00       	jmp    c0103503 <__alltraps>

c0102ae9 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102ae9:	6a 0a                	push   $0xa
  jmp __alltraps
c0102aeb:	e9 13 0a 00 00       	jmp    c0103503 <__alltraps>

c0102af0 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102af0:	6a 0b                	push   $0xb
  jmp __alltraps
c0102af2:	e9 0c 0a 00 00       	jmp    c0103503 <__alltraps>

c0102af7 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102af7:	6a 0c                	push   $0xc
  jmp __alltraps
c0102af9:	e9 05 0a 00 00       	jmp    c0103503 <__alltraps>

c0102afe <vector13>:
.globl vector13
vector13:
  pushl $13
c0102afe:	6a 0d                	push   $0xd
  jmp __alltraps
c0102b00:	e9 fe 09 00 00       	jmp    c0103503 <__alltraps>

c0102b05 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102b05:	6a 0e                	push   $0xe
  jmp __alltraps
c0102b07:	e9 f7 09 00 00       	jmp    c0103503 <__alltraps>

c0102b0c <vector15>:
.globl vector15
vector15:
  pushl $0
c0102b0c:	6a 00                	push   $0x0
  pushl $15
c0102b0e:	6a 0f                	push   $0xf
  jmp __alltraps
c0102b10:	e9 ee 09 00 00       	jmp    c0103503 <__alltraps>

c0102b15 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102b15:	6a 00                	push   $0x0
  pushl $16
c0102b17:	6a 10                	push   $0x10
  jmp __alltraps
c0102b19:	e9 e5 09 00 00       	jmp    c0103503 <__alltraps>

c0102b1e <vector17>:
.globl vector17
vector17:
  pushl $17
c0102b1e:	6a 11                	push   $0x11
  jmp __alltraps
c0102b20:	e9 de 09 00 00       	jmp    c0103503 <__alltraps>

c0102b25 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102b25:	6a 00                	push   $0x0
  pushl $18
c0102b27:	6a 12                	push   $0x12
  jmp __alltraps
c0102b29:	e9 d5 09 00 00       	jmp    c0103503 <__alltraps>

c0102b2e <vector19>:
.globl vector19
vector19:
  pushl $0
c0102b2e:	6a 00                	push   $0x0
  pushl $19
c0102b30:	6a 13                	push   $0x13
  jmp __alltraps
c0102b32:	e9 cc 09 00 00       	jmp    c0103503 <__alltraps>

c0102b37 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102b37:	6a 00                	push   $0x0
  pushl $20
c0102b39:	6a 14                	push   $0x14
  jmp __alltraps
c0102b3b:	e9 c3 09 00 00       	jmp    c0103503 <__alltraps>

c0102b40 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102b40:	6a 00                	push   $0x0
  pushl $21
c0102b42:	6a 15                	push   $0x15
  jmp __alltraps
c0102b44:	e9 ba 09 00 00       	jmp    c0103503 <__alltraps>

c0102b49 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102b49:	6a 00                	push   $0x0
  pushl $22
c0102b4b:	6a 16                	push   $0x16
  jmp __alltraps
c0102b4d:	e9 b1 09 00 00       	jmp    c0103503 <__alltraps>

c0102b52 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102b52:	6a 00                	push   $0x0
  pushl $23
c0102b54:	6a 17                	push   $0x17
  jmp __alltraps
c0102b56:	e9 a8 09 00 00       	jmp    c0103503 <__alltraps>

c0102b5b <vector24>:
.globl vector24
vector24:
  pushl $0
c0102b5b:	6a 00                	push   $0x0
  pushl $24
c0102b5d:	6a 18                	push   $0x18
  jmp __alltraps
c0102b5f:	e9 9f 09 00 00       	jmp    c0103503 <__alltraps>

c0102b64 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102b64:	6a 00                	push   $0x0
  pushl $25
c0102b66:	6a 19                	push   $0x19
  jmp __alltraps
c0102b68:	e9 96 09 00 00       	jmp    c0103503 <__alltraps>

c0102b6d <vector26>:
.globl vector26
vector26:
  pushl $0
c0102b6d:	6a 00                	push   $0x0
  pushl $26
c0102b6f:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102b71:	e9 8d 09 00 00       	jmp    c0103503 <__alltraps>

c0102b76 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102b76:	6a 00                	push   $0x0
  pushl $27
c0102b78:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102b7a:	e9 84 09 00 00       	jmp    c0103503 <__alltraps>

c0102b7f <vector28>:
.globl vector28
vector28:
  pushl $0
c0102b7f:	6a 00                	push   $0x0
  pushl $28
c0102b81:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102b83:	e9 7b 09 00 00       	jmp    c0103503 <__alltraps>

c0102b88 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102b88:	6a 00                	push   $0x0
  pushl $29
c0102b8a:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102b8c:	e9 72 09 00 00       	jmp    c0103503 <__alltraps>

c0102b91 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102b91:	6a 00                	push   $0x0
  pushl $30
c0102b93:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102b95:	e9 69 09 00 00       	jmp    c0103503 <__alltraps>

c0102b9a <vector31>:
.globl vector31
vector31:
  pushl $0
c0102b9a:	6a 00                	push   $0x0
  pushl $31
c0102b9c:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102b9e:	e9 60 09 00 00       	jmp    c0103503 <__alltraps>

c0102ba3 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102ba3:	6a 00                	push   $0x0
  pushl $32
c0102ba5:	6a 20                	push   $0x20
  jmp __alltraps
c0102ba7:	e9 57 09 00 00       	jmp    c0103503 <__alltraps>

c0102bac <vector33>:
.globl vector33
vector33:
  pushl $0
c0102bac:	6a 00                	push   $0x0
  pushl $33
c0102bae:	6a 21                	push   $0x21
  jmp __alltraps
c0102bb0:	e9 4e 09 00 00       	jmp    c0103503 <__alltraps>

c0102bb5 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102bb5:	6a 00                	push   $0x0
  pushl $34
c0102bb7:	6a 22                	push   $0x22
  jmp __alltraps
c0102bb9:	e9 45 09 00 00       	jmp    c0103503 <__alltraps>

c0102bbe <vector35>:
.globl vector35
vector35:
  pushl $0
c0102bbe:	6a 00                	push   $0x0
  pushl $35
c0102bc0:	6a 23                	push   $0x23
  jmp __alltraps
c0102bc2:	e9 3c 09 00 00       	jmp    c0103503 <__alltraps>

c0102bc7 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102bc7:	6a 00                	push   $0x0
  pushl $36
c0102bc9:	6a 24                	push   $0x24
  jmp __alltraps
c0102bcb:	e9 33 09 00 00       	jmp    c0103503 <__alltraps>

c0102bd0 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102bd0:	6a 00                	push   $0x0
  pushl $37
c0102bd2:	6a 25                	push   $0x25
  jmp __alltraps
c0102bd4:	e9 2a 09 00 00       	jmp    c0103503 <__alltraps>

c0102bd9 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102bd9:	6a 00                	push   $0x0
  pushl $38
c0102bdb:	6a 26                	push   $0x26
  jmp __alltraps
c0102bdd:	e9 21 09 00 00       	jmp    c0103503 <__alltraps>

c0102be2 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102be2:	6a 00                	push   $0x0
  pushl $39
c0102be4:	6a 27                	push   $0x27
  jmp __alltraps
c0102be6:	e9 18 09 00 00       	jmp    c0103503 <__alltraps>

c0102beb <vector40>:
.globl vector40
vector40:
  pushl $0
c0102beb:	6a 00                	push   $0x0
  pushl $40
c0102bed:	6a 28                	push   $0x28
  jmp __alltraps
c0102bef:	e9 0f 09 00 00       	jmp    c0103503 <__alltraps>

c0102bf4 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102bf4:	6a 00                	push   $0x0
  pushl $41
c0102bf6:	6a 29                	push   $0x29
  jmp __alltraps
c0102bf8:	e9 06 09 00 00       	jmp    c0103503 <__alltraps>

c0102bfd <vector42>:
.globl vector42
vector42:
  pushl $0
c0102bfd:	6a 00                	push   $0x0
  pushl $42
c0102bff:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102c01:	e9 fd 08 00 00       	jmp    c0103503 <__alltraps>

c0102c06 <vector43>:
.globl vector43
vector43:
  pushl $0
c0102c06:	6a 00                	push   $0x0
  pushl $43
c0102c08:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102c0a:	e9 f4 08 00 00       	jmp    c0103503 <__alltraps>

c0102c0f <vector44>:
.globl vector44
vector44:
  pushl $0
c0102c0f:	6a 00                	push   $0x0
  pushl $44
c0102c11:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102c13:	e9 eb 08 00 00       	jmp    c0103503 <__alltraps>

c0102c18 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102c18:	6a 00                	push   $0x0
  pushl $45
c0102c1a:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102c1c:	e9 e2 08 00 00       	jmp    c0103503 <__alltraps>

c0102c21 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102c21:	6a 00                	push   $0x0
  pushl $46
c0102c23:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102c25:	e9 d9 08 00 00       	jmp    c0103503 <__alltraps>

c0102c2a <vector47>:
.globl vector47
vector47:
  pushl $0
c0102c2a:	6a 00                	push   $0x0
  pushl $47
c0102c2c:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102c2e:	e9 d0 08 00 00       	jmp    c0103503 <__alltraps>

c0102c33 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102c33:	6a 00                	push   $0x0
  pushl $48
c0102c35:	6a 30                	push   $0x30
  jmp __alltraps
c0102c37:	e9 c7 08 00 00       	jmp    c0103503 <__alltraps>

c0102c3c <vector49>:
.globl vector49
vector49:
  pushl $0
c0102c3c:	6a 00                	push   $0x0
  pushl $49
c0102c3e:	6a 31                	push   $0x31
  jmp __alltraps
c0102c40:	e9 be 08 00 00       	jmp    c0103503 <__alltraps>

c0102c45 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102c45:	6a 00                	push   $0x0
  pushl $50
c0102c47:	6a 32                	push   $0x32
  jmp __alltraps
c0102c49:	e9 b5 08 00 00       	jmp    c0103503 <__alltraps>

c0102c4e <vector51>:
.globl vector51
vector51:
  pushl $0
c0102c4e:	6a 00                	push   $0x0
  pushl $51
c0102c50:	6a 33                	push   $0x33
  jmp __alltraps
c0102c52:	e9 ac 08 00 00       	jmp    c0103503 <__alltraps>

c0102c57 <vector52>:
.globl vector52
vector52:
  pushl $0
c0102c57:	6a 00                	push   $0x0
  pushl $52
c0102c59:	6a 34                	push   $0x34
  jmp __alltraps
c0102c5b:	e9 a3 08 00 00       	jmp    c0103503 <__alltraps>

c0102c60 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102c60:	6a 00                	push   $0x0
  pushl $53
c0102c62:	6a 35                	push   $0x35
  jmp __alltraps
c0102c64:	e9 9a 08 00 00       	jmp    c0103503 <__alltraps>

c0102c69 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102c69:	6a 00                	push   $0x0
  pushl $54
c0102c6b:	6a 36                	push   $0x36
  jmp __alltraps
c0102c6d:	e9 91 08 00 00       	jmp    c0103503 <__alltraps>

c0102c72 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102c72:	6a 00                	push   $0x0
  pushl $55
c0102c74:	6a 37                	push   $0x37
  jmp __alltraps
c0102c76:	e9 88 08 00 00       	jmp    c0103503 <__alltraps>

c0102c7b <vector56>:
.globl vector56
vector56:
  pushl $0
c0102c7b:	6a 00                	push   $0x0
  pushl $56
c0102c7d:	6a 38                	push   $0x38
  jmp __alltraps
c0102c7f:	e9 7f 08 00 00       	jmp    c0103503 <__alltraps>

c0102c84 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102c84:	6a 00                	push   $0x0
  pushl $57
c0102c86:	6a 39                	push   $0x39
  jmp __alltraps
c0102c88:	e9 76 08 00 00       	jmp    c0103503 <__alltraps>

c0102c8d <vector58>:
.globl vector58
vector58:
  pushl $0
c0102c8d:	6a 00                	push   $0x0
  pushl $58
c0102c8f:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102c91:	e9 6d 08 00 00       	jmp    c0103503 <__alltraps>

c0102c96 <vector59>:
.globl vector59
vector59:
  pushl $0
c0102c96:	6a 00                	push   $0x0
  pushl $59
c0102c98:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102c9a:	e9 64 08 00 00       	jmp    c0103503 <__alltraps>

c0102c9f <vector60>:
.globl vector60
vector60:
  pushl $0
c0102c9f:	6a 00                	push   $0x0
  pushl $60
c0102ca1:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102ca3:	e9 5b 08 00 00       	jmp    c0103503 <__alltraps>

c0102ca8 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102ca8:	6a 00                	push   $0x0
  pushl $61
c0102caa:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102cac:	e9 52 08 00 00       	jmp    c0103503 <__alltraps>

c0102cb1 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102cb1:	6a 00                	push   $0x0
  pushl $62
c0102cb3:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102cb5:	e9 49 08 00 00       	jmp    c0103503 <__alltraps>

c0102cba <vector63>:
.globl vector63
vector63:
  pushl $0
c0102cba:	6a 00                	push   $0x0
  pushl $63
c0102cbc:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102cbe:	e9 40 08 00 00       	jmp    c0103503 <__alltraps>

c0102cc3 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102cc3:	6a 00                	push   $0x0
  pushl $64
c0102cc5:	6a 40                	push   $0x40
  jmp __alltraps
c0102cc7:	e9 37 08 00 00       	jmp    c0103503 <__alltraps>

c0102ccc <vector65>:
.globl vector65
vector65:
  pushl $0
c0102ccc:	6a 00                	push   $0x0
  pushl $65
c0102cce:	6a 41                	push   $0x41
  jmp __alltraps
c0102cd0:	e9 2e 08 00 00       	jmp    c0103503 <__alltraps>

c0102cd5 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102cd5:	6a 00                	push   $0x0
  pushl $66
c0102cd7:	6a 42                	push   $0x42
  jmp __alltraps
c0102cd9:	e9 25 08 00 00       	jmp    c0103503 <__alltraps>

c0102cde <vector67>:
.globl vector67
vector67:
  pushl $0
c0102cde:	6a 00                	push   $0x0
  pushl $67
c0102ce0:	6a 43                	push   $0x43
  jmp __alltraps
c0102ce2:	e9 1c 08 00 00       	jmp    c0103503 <__alltraps>

c0102ce7 <vector68>:
.globl vector68
vector68:
  pushl $0
c0102ce7:	6a 00                	push   $0x0
  pushl $68
c0102ce9:	6a 44                	push   $0x44
  jmp __alltraps
c0102ceb:	e9 13 08 00 00       	jmp    c0103503 <__alltraps>

c0102cf0 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102cf0:	6a 00                	push   $0x0
  pushl $69
c0102cf2:	6a 45                	push   $0x45
  jmp __alltraps
c0102cf4:	e9 0a 08 00 00       	jmp    c0103503 <__alltraps>

c0102cf9 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102cf9:	6a 00                	push   $0x0
  pushl $70
c0102cfb:	6a 46                	push   $0x46
  jmp __alltraps
c0102cfd:	e9 01 08 00 00       	jmp    c0103503 <__alltraps>

c0102d02 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102d02:	6a 00                	push   $0x0
  pushl $71
c0102d04:	6a 47                	push   $0x47
  jmp __alltraps
c0102d06:	e9 f8 07 00 00       	jmp    c0103503 <__alltraps>

c0102d0b <vector72>:
.globl vector72
vector72:
  pushl $0
c0102d0b:	6a 00                	push   $0x0
  pushl $72
c0102d0d:	6a 48                	push   $0x48
  jmp __alltraps
c0102d0f:	e9 ef 07 00 00       	jmp    c0103503 <__alltraps>

c0102d14 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102d14:	6a 00                	push   $0x0
  pushl $73
c0102d16:	6a 49                	push   $0x49
  jmp __alltraps
c0102d18:	e9 e6 07 00 00       	jmp    c0103503 <__alltraps>

c0102d1d <vector74>:
.globl vector74
vector74:
  pushl $0
c0102d1d:	6a 00                	push   $0x0
  pushl $74
c0102d1f:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102d21:	e9 dd 07 00 00       	jmp    c0103503 <__alltraps>

c0102d26 <vector75>:
.globl vector75
vector75:
  pushl $0
c0102d26:	6a 00                	push   $0x0
  pushl $75
c0102d28:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102d2a:	e9 d4 07 00 00       	jmp    c0103503 <__alltraps>

c0102d2f <vector76>:
.globl vector76
vector76:
  pushl $0
c0102d2f:	6a 00                	push   $0x0
  pushl $76
c0102d31:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102d33:	e9 cb 07 00 00       	jmp    c0103503 <__alltraps>

c0102d38 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102d38:	6a 00                	push   $0x0
  pushl $77
c0102d3a:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102d3c:	e9 c2 07 00 00       	jmp    c0103503 <__alltraps>

c0102d41 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102d41:	6a 00                	push   $0x0
  pushl $78
c0102d43:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102d45:	e9 b9 07 00 00       	jmp    c0103503 <__alltraps>

c0102d4a <vector79>:
.globl vector79
vector79:
  pushl $0
c0102d4a:	6a 00                	push   $0x0
  pushl $79
c0102d4c:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102d4e:	e9 b0 07 00 00       	jmp    c0103503 <__alltraps>

c0102d53 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102d53:	6a 00                	push   $0x0
  pushl $80
c0102d55:	6a 50                	push   $0x50
  jmp __alltraps
c0102d57:	e9 a7 07 00 00       	jmp    c0103503 <__alltraps>

c0102d5c <vector81>:
.globl vector81
vector81:
  pushl $0
c0102d5c:	6a 00                	push   $0x0
  pushl $81
c0102d5e:	6a 51                	push   $0x51
  jmp __alltraps
c0102d60:	e9 9e 07 00 00       	jmp    c0103503 <__alltraps>

c0102d65 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102d65:	6a 00                	push   $0x0
  pushl $82
c0102d67:	6a 52                	push   $0x52
  jmp __alltraps
c0102d69:	e9 95 07 00 00       	jmp    c0103503 <__alltraps>

c0102d6e <vector83>:
.globl vector83
vector83:
  pushl $0
c0102d6e:	6a 00                	push   $0x0
  pushl $83
c0102d70:	6a 53                	push   $0x53
  jmp __alltraps
c0102d72:	e9 8c 07 00 00       	jmp    c0103503 <__alltraps>

c0102d77 <vector84>:
.globl vector84
vector84:
  pushl $0
c0102d77:	6a 00                	push   $0x0
  pushl $84
c0102d79:	6a 54                	push   $0x54
  jmp __alltraps
c0102d7b:	e9 83 07 00 00       	jmp    c0103503 <__alltraps>

c0102d80 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102d80:	6a 00                	push   $0x0
  pushl $85
c0102d82:	6a 55                	push   $0x55
  jmp __alltraps
c0102d84:	e9 7a 07 00 00       	jmp    c0103503 <__alltraps>

c0102d89 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102d89:	6a 00                	push   $0x0
  pushl $86
c0102d8b:	6a 56                	push   $0x56
  jmp __alltraps
c0102d8d:	e9 71 07 00 00       	jmp    c0103503 <__alltraps>

c0102d92 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102d92:	6a 00                	push   $0x0
  pushl $87
c0102d94:	6a 57                	push   $0x57
  jmp __alltraps
c0102d96:	e9 68 07 00 00       	jmp    c0103503 <__alltraps>

c0102d9b <vector88>:
.globl vector88
vector88:
  pushl $0
c0102d9b:	6a 00                	push   $0x0
  pushl $88
c0102d9d:	6a 58                	push   $0x58
  jmp __alltraps
c0102d9f:	e9 5f 07 00 00       	jmp    c0103503 <__alltraps>

c0102da4 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102da4:	6a 00                	push   $0x0
  pushl $89
c0102da6:	6a 59                	push   $0x59
  jmp __alltraps
c0102da8:	e9 56 07 00 00       	jmp    c0103503 <__alltraps>

c0102dad <vector90>:
.globl vector90
vector90:
  pushl $0
c0102dad:	6a 00                	push   $0x0
  pushl $90
c0102daf:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102db1:	e9 4d 07 00 00       	jmp    c0103503 <__alltraps>

c0102db6 <vector91>:
.globl vector91
vector91:
  pushl $0
c0102db6:	6a 00                	push   $0x0
  pushl $91
c0102db8:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102dba:	e9 44 07 00 00       	jmp    c0103503 <__alltraps>

c0102dbf <vector92>:
.globl vector92
vector92:
  pushl $0
c0102dbf:	6a 00                	push   $0x0
  pushl $92
c0102dc1:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102dc3:	e9 3b 07 00 00       	jmp    c0103503 <__alltraps>

c0102dc8 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102dc8:	6a 00                	push   $0x0
  pushl $93
c0102dca:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102dcc:	e9 32 07 00 00       	jmp    c0103503 <__alltraps>

c0102dd1 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102dd1:	6a 00                	push   $0x0
  pushl $94
c0102dd3:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102dd5:	e9 29 07 00 00       	jmp    c0103503 <__alltraps>

c0102dda <vector95>:
.globl vector95
vector95:
  pushl $0
c0102dda:	6a 00                	push   $0x0
  pushl $95
c0102ddc:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102dde:	e9 20 07 00 00       	jmp    c0103503 <__alltraps>

c0102de3 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102de3:	6a 00                	push   $0x0
  pushl $96
c0102de5:	6a 60                	push   $0x60
  jmp __alltraps
c0102de7:	e9 17 07 00 00       	jmp    c0103503 <__alltraps>

c0102dec <vector97>:
.globl vector97
vector97:
  pushl $0
c0102dec:	6a 00                	push   $0x0
  pushl $97
c0102dee:	6a 61                	push   $0x61
  jmp __alltraps
c0102df0:	e9 0e 07 00 00       	jmp    c0103503 <__alltraps>

c0102df5 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102df5:	6a 00                	push   $0x0
  pushl $98
c0102df7:	6a 62                	push   $0x62
  jmp __alltraps
c0102df9:	e9 05 07 00 00       	jmp    c0103503 <__alltraps>

c0102dfe <vector99>:
.globl vector99
vector99:
  pushl $0
c0102dfe:	6a 00                	push   $0x0
  pushl $99
c0102e00:	6a 63                	push   $0x63
  jmp __alltraps
c0102e02:	e9 fc 06 00 00       	jmp    c0103503 <__alltraps>

c0102e07 <vector100>:
.globl vector100
vector100:
  pushl $0
c0102e07:	6a 00                	push   $0x0
  pushl $100
c0102e09:	6a 64                	push   $0x64
  jmp __alltraps
c0102e0b:	e9 f3 06 00 00       	jmp    c0103503 <__alltraps>

c0102e10 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102e10:	6a 00                	push   $0x0
  pushl $101
c0102e12:	6a 65                	push   $0x65
  jmp __alltraps
c0102e14:	e9 ea 06 00 00       	jmp    c0103503 <__alltraps>

c0102e19 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102e19:	6a 00                	push   $0x0
  pushl $102
c0102e1b:	6a 66                	push   $0x66
  jmp __alltraps
c0102e1d:	e9 e1 06 00 00       	jmp    c0103503 <__alltraps>

c0102e22 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102e22:	6a 00                	push   $0x0
  pushl $103
c0102e24:	6a 67                	push   $0x67
  jmp __alltraps
c0102e26:	e9 d8 06 00 00       	jmp    c0103503 <__alltraps>

c0102e2b <vector104>:
.globl vector104
vector104:
  pushl $0
c0102e2b:	6a 00                	push   $0x0
  pushl $104
c0102e2d:	6a 68                	push   $0x68
  jmp __alltraps
c0102e2f:	e9 cf 06 00 00       	jmp    c0103503 <__alltraps>

c0102e34 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102e34:	6a 00                	push   $0x0
  pushl $105
c0102e36:	6a 69                	push   $0x69
  jmp __alltraps
c0102e38:	e9 c6 06 00 00       	jmp    c0103503 <__alltraps>

c0102e3d <vector106>:
.globl vector106
vector106:
  pushl $0
c0102e3d:	6a 00                	push   $0x0
  pushl $106
c0102e3f:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102e41:	e9 bd 06 00 00       	jmp    c0103503 <__alltraps>

c0102e46 <vector107>:
.globl vector107
vector107:
  pushl $0
c0102e46:	6a 00                	push   $0x0
  pushl $107
c0102e48:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102e4a:	e9 b4 06 00 00       	jmp    c0103503 <__alltraps>

c0102e4f <vector108>:
.globl vector108
vector108:
  pushl $0
c0102e4f:	6a 00                	push   $0x0
  pushl $108
c0102e51:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102e53:	e9 ab 06 00 00       	jmp    c0103503 <__alltraps>

c0102e58 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102e58:	6a 00                	push   $0x0
  pushl $109
c0102e5a:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102e5c:	e9 a2 06 00 00       	jmp    c0103503 <__alltraps>

c0102e61 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102e61:	6a 00                	push   $0x0
  pushl $110
c0102e63:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102e65:	e9 99 06 00 00       	jmp    c0103503 <__alltraps>

c0102e6a <vector111>:
.globl vector111
vector111:
  pushl $0
c0102e6a:	6a 00                	push   $0x0
  pushl $111
c0102e6c:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102e6e:	e9 90 06 00 00       	jmp    c0103503 <__alltraps>

c0102e73 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102e73:	6a 00                	push   $0x0
  pushl $112
c0102e75:	6a 70                	push   $0x70
  jmp __alltraps
c0102e77:	e9 87 06 00 00       	jmp    c0103503 <__alltraps>

c0102e7c <vector113>:
.globl vector113
vector113:
  pushl $0
c0102e7c:	6a 00                	push   $0x0
  pushl $113
c0102e7e:	6a 71                	push   $0x71
  jmp __alltraps
c0102e80:	e9 7e 06 00 00       	jmp    c0103503 <__alltraps>

c0102e85 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102e85:	6a 00                	push   $0x0
  pushl $114
c0102e87:	6a 72                	push   $0x72
  jmp __alltraps
c0102e89:	e9 75 06 00 00       	jmp    c0103503 <__alltraps>

c0102e8e <vector115>:
.globl vector115
vector115:
  pushl $0
c0102e8e:	6a 00                	push   $0x0
  pushl $115
c0102e90:	6a 73                	push   $0x73
  jmp __alltraps
c0102e92:	e9 6c 06 00 00       	jmp    c0103503 <__alltraps>

c0102e97 <vector116>:
.globl vector116
vector116:
  pushl $0
c0102e97:	6a 00                	push   $0x0
  pushl $116
c0102e99:	6a 74                	push   $0x74
  jmp __alltraps
c0102e9b:	e9 63 06 00 00       	jmp    c0103503 <__alltraps>

c0102ea0 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102ea0:	6a 00                	push   $0x0
  pushl $117
c0102ea2:	6a 75                	push   $0x75
  jmp __alltraps
c0102ea4:	e9 5a 06 00 00       	jmp    c0103503 <__alltraps>

c0102ea9 <vector118>:
.globl vector118
vector118:
  pushl $0
c0102ea9:	6a 00                	push   $0x0
  pushl $118
c0102eab:	6a 76                	push   $0x76
  jmp __alltraps
c0102ead:	e9 51 06 00 00       	jmp    c0103503 <__alltraps>

c0102eb2 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102eb2:	6a 00                	push   $0x0
  pushl $119
c0102eb4:	6a 77                	push   $0x77
  jmp __alltraps
c0102eb6:	e9 48 06 00 00       	jmp    c0103503 <__alltraps>

c0102ebb <vector120>:
.globl vector120
vector120:
  pushl $0
c0102ebb:	6a 00                	push   $0x0
  pushl $120
c0102ebd:	6a 78                	push   $0x78
  jmp __alltraps
c0102ebf:	e9 3f 06 00 00       	jmp    c0103503 <__alltraps>

c0102ec4 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102ec4:	6a 00                	push   $0x0
  pushl $121
c0102ec6:	6a 79                	push   $0x79
  jmp __alltraps
c0102ec8:	e9 36 06 00 00       	jmp    c0103503 <__alltraps>

c0102ecd <vector122>:
.globl vector122
vector122:
  pushl $0
c0102ecd:	6a 00                	push   $0x0
  pushl $122
c0102ecf:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102ed1:	e9 2d 06 00 00       	jmp    c0103503 <__alltraps>

c0102ed6 <vector123>:
.globl vector123
vector123:
  pushl $0
c0102ed6:	6a 00                	push   $0x0
  pushl $123
c0102ed8:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102eda:	e9 24 06 00 00       	jmp    c0103503 <__alltraps>

c0102edf <vector124>:
.globl vector124
vector124:
  pushl $0
c0102edf:	6a 00                	push   $0x0
  pushl $124
c0102ee1:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102ee3:	e9 1b 06 00 00       	jmp    c0103503 <__alltraps>

c0102ee8 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102ee8:	6a 00                	push   $0x0
  pushl $125
c0102eea:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102eec:	e9 12 06 00 00       	jmp    c0103503 <__alltraps>

c0102ef1 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102ef1:	6a 00                	push   $0x0
  pushl $126
c0102ef3:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102ef5:	e9 09 06 00 00       	jmp    c0103503 <__alltraps>

c0102efa <vector127>:
.globl vector127
vector127:
  pushl $0
c0102efa:	6a 00                	push   $0x0
  pushl $127
c0102efc:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102efe:	e9 00 06 00 00       	jmp    c0103503 <__alltraps>

c0102f03 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102f03:	6a 00                	push   $0x0
  pushl $128
c0102f05:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102f0a:	e9 f4 05 00 00       	jmp    c0103503 <__alltraps>

c0102f0f <vector129>:
.globl vector129
vector129:
  pushl $0
c0102f0f:	6a 00                	push   $0x0
  pushl $129
c0102f11:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102f16:	e9 e8 05 00 00       	jmp    c0103503 <__alltraps>

c0102f1b <vector130>:
.globl vector130
vector130:
  pushl $0
c0102f1b:	6a 00                	push   $0x0
  pushl $130
c0102f1d:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102f22:	e9 dc 05 00 00       	jmp    c0103503 <__alltraps>

c0102f27 <vector131>:
.globl vector131
vector131:
  pushl $0
c0102f27:	6a 00                	push   $0x0
  pushl $131
c0102f29:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102f2e:	e9 d0 05 00 00       	jmp    c0103503 <__alltraps>

c0102f33 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102f33:	6a 00                	push   $0x0
  pushl $132
c0102f35:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102f3a:	e9 c4 05 00 00       	jmp    c0103503 <__alltraps>

c0102f3f <vector133>:
.globl vector133
vector133:
  pushl $0
c0102f3f:	6a 00                	push   $0x0
  pushl $133
c0102f41:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102f46:	e9 b8 05 00 00       	jmp    c0103503 <__alltraps>

c0102f4b <vector134>:
.globl vector134
vector134:
  pushl $0
c0102f4b:	6a 00                	push   $0x0
  pushl $134
c0102f4d:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102f52:	e9 ac 05 00 00       	jmp    c0103503 <__alltraps>

c0102f57 <vector135>:
.globl vector135
vector135:
  pushl $0
c0102f57:	6a 00                	push   $0x0
  pushl $135
c0102f59:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0102f5e:	e9 a0 05 00 00       	jmp    c0103503 <__alltraps>

c0102f63 <vector136>:
.globl vector136
vector136:
  pushl $0
c0102f63:	6a 00                	push   $0x0
  pushl $136
c0102f65:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0102f6a:	e9 94 05 00 00       	jmp    c0103503 <__alltraps>

c0102f6f <vector137>:
.globl vector137
vector137:
  pushl $0
c0102f6f:	6a 00                	push   $0x0
  pushl $137
c0102f71:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0102f76:	e9 88 05 00 00       	jmp    c0103503 <__alltraps>

c0102f7b <vector138>:
.globl vector138
vector138:
  pushl $0
c0102f7b:	6a 00                	push   $0x0
  pushl $138
c0102f7d:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0102f82:	e9 7c 05 00 00       	jmp    c0103503 <__alltraps>

c0102f87 <vector139>:
.globl vector139
vector139:
  pushl $0
c0102f87:	6a 00                	push   $0x0
  pushl $139
c0102f89:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0102f8e:	e9 70 05 00 00       	jmp    c0103503 <__alltraps>

c0102f93 <vector140>:
.globl vector140
vector140:
  pushl $0
c0102f93:	6a 00                	push   $0x0
  pushl $140
c0102f95:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0102f9a:	e9 64 05 00 00       	jmp    c0103503 <__alltraps>

c0102f9f <vector141>:
.globl vector141
vector141:
  pushl $0
c0102f9f:	6a 00                	push   $0x0
  pushl $141
c0102fa1:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0102fa6:	e9 58 05 00 00       	jmp    c0103503 <__alltraps>

c0102fab <vector142>:
.globl vector142
vector142:
  pushl $0
c0102fab:	6a 00                	push   $0x0
  pushl $142
c0102fad:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0102fb2:	e9 4c 05 00 00       	jmp    c0103503 <__alltraps>

c0102fb7 <vector143>:
.globl vector143
vector143:
  pushl $0
c0102fb7:	6a 00                	push   $0x0
  pushl $143
c0102fb9:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0102fbe:	e9 40 05 00 00       	jmp    c0103503 <__alltraps>

c0102fc3 <vector144>:
.globl vector144
vector144:
  pushl $0
c0102fc3:	6a 00                	push   $0x0
  pushl $144
c0102fc5:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0102fca:	e9 34 05 00 00       	jmp    c0103503 <__alltraps>

c0102fcf <vector145>:
.globl vector145
vector145:
  pushl $0
c0102fcf:	6a 00                	push   $0x0
  pushl $145
c0102fd1:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0102fd6:	e9 28 05 00 00       	jmp    c0103503 <__alltraps>

c0102fdb <vector146>:
.globl vector146
vector146:
  pushl $0
c0102fdb:	6a 00                	push   $0x0
  pushl $146
c0102fdd:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0102fe2:	e9 1c 05 00 00       	jmp    c0103503 <__alltraps>

c0102fe7 <vector147>:
.globl vector147
vector147:
  pushl $0
c0102fe7:	6a 00                	push   $0x0
  pushl $147
c0102fe9:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0102fee:	e9 10 05 00 00       	jmp    c0103503 <__alltraps>

c0102ff3 <vector148>:
.globl vector148
vector148:
  pushl $0
c0102ff3:	6a 00                	push   $0x0
  pushl $148
c0102ff5:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c0102ffa:	e9 04 05 00 00       	jmp    c0103503 <__alltraps>

c0102fff <vector149>:
.globl vector149
vector149:
  pushl $0
c0102fff:	6a 00                	push   $0x0
  pushl $149
c0103001:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c0103006:	e9 f8 04 00 00       	jmp    c0103503 <__alltraps>

c010300b <vector150>:
.globl vector150
vector150:
  pushl $0
c010300b:	6a 00                	push   $0x0
  pushl $150
c010300d:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c0103012:	e9 ec 04 00 00       	jmp    c0103503 <__alltraps>

c0103017 <vector151>:
.globl vector151
vector151:
  pushl $0
c0103017:	6a 00                	push   $0x0
  pushl $151
c0103019:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c010301e:	e9 e0 04 00 00       	jmp    c0103503 <__alltraps>

c0103023 <vector152>:
.globl vector152
vector152:
  pushl $0
c0103023:	6a 00                	push   $0x0
  pushl $152
c0103025:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c010302a:	e9 d4 04 00 00       	jmp    c0103503 <__alltraps>

c010302f <vector153>:
.globl vector153
vector153:
  pushl $0
c010302f:	6a 00                	push   $0x0
  pushl $153
c0103031:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c0103036:	e9 c8 04 00 00       	jmp    c0103503 <__alltraps>

c010303b <vector154>:
.globl vector154
vector154:
  pushl $0
c010303b:	6a 00                	push   $0x0
  pushl $154
c010303d:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c0103042:	e9 bc 04 00 00       	jmp    c0103503 <__alltraps>

c0103047 <vector155>:
.globl vector155
vector155:
  pushl $0
c0103047:	6a 00                	push   $0x0
  pushl $155
c0103049:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c010304e:	e9 b0 04 00 00       	jmp    c0103503 <__alltraps>

c0103053 <vector156>:
.globl vector156
vector156:
  pushl $0
c0103053:	6a 00                	push   $0x0
  pushl $156
c0103055:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c010305a:	e9 a4 04 00 00       	jmp    c0103503 <__alltraps>

c010305f <vector157>:
.globl vector157
vector157:
  pushl $0
c010305f:	6a 00                	push   $0x0
  pushl $157
c0103061:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0103066:	e9 98 04 00 00       	jmp    c0103503 <__alltraps>

c010306b <vector158>:
.globl vector158
vector158:
  pushl $0
c010306b:	6a 00                	push   $0x0
  pushl $158
c010306d:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103072:	e9 8c 04 00 00       	jmp    c0103503 <__alltraps>

c0103077 <vector159>:
.globl vector159
vector159:
  pushl $0
c0103077:	6a 00                	push   $0x0
  pushl $159
c0103079:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c010307e:	e9 80 04 00 00       	jmp    c0103503 <__alltraps>

c0103083 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103083:	6a 00                	push   $0x0
  pushl $160
c0103085:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c010308a:	e9 74 04 00 00       	jmp    c0103503 <__alltraps>

c010308f <vector161>:
.globl vector161
vector161:
  pushl $0
c010308f:	6a 00                	push   $0x0
  pushl $161
c0103091:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0103096:	e9 68 04 00 00       	jmp    c0103503 <__alltraps>

c010309b <vector162>:
.globl vector162
vector162:
  pushl $0
c010309b:	6a 00                	push   $0x0
  pushl $162
c010309d:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c01030a2:	e9 5c 04 00 00       	jmp    c0103503 <__alltraps>

c01030a7 <vector163>:
.globl vector163
vector163:
  pushl $0
c01030a7:	6a 00                	push   $0x0
  pushl $163
c01030a9:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c01030ae:	e9 50 04 00 00       	jmp    c0103503 <__alltraps>

c01030b3 <vector164>:
.globl vector164
vector164:
  pushl $0
c01030b3:	6a 00                	push   $0x0
  pushl $164
c01030b5:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c01030ba:	e9 44 04 00 00       	jmp    c0103503 <__alltraps>

c01030bf <vector165>:
.globl vector165
vector165:
  pushl $0
c01030bf:	6a 00                	push   $0x0
  pushl $165
c01030c1:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c01030c6:	e9 38 04 00 00       	jmp    c0103503 <__alltraps>

c01030cb <vector166>:
.globl vector166
vector166:
  pushl $0
c01030cb:	6a 00                	push   $0x0
  pushl $166
c01030cd:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c01030d2:	e9 2c 04 00 00       	jmp    c0103503 <__alltraps>

c01030d7 <vector167>:
.globl vector167
vector167:
  pushl $0
c01030d7:	6a 00                	push   $0x0
  pushl $167
c01030d9:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c01030de:	e9 20 04 00 00       	jmp    c0103503 <__alltraps>

c01030e3 <vector168>:
.globl vector168
vector168:
  pushl $0
c01030e3:	6a 00                	push   $0x0
  pushl $168
c01030e5:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c01030ea:	e9 14 04 00 00       	jmp    c0103503 <__alltraps>

c01030ef <vector169>:
.globl vector169
vector169:
  pushl $0
c01030ef:	6a 00                	push   $0x0
  pushl $169
c01030f1:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c01030f6:	e9 08 04 00 00       	jmp    c0103503 <__alltraps>

c01030fb <vector170>:
.globl vector170
vector170:
  pushl $0
c01030fb:	6a 00                	push   $0x0
  pushl $170
c01030fd:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c0103102:	e9 fc 03 00 00       	jmp    c0103503 <__alltraps>

c0103107 <vector171>:
.globl vector171
vector171:
  pushl $0
c0103107:	6a 00                	push   $0x0
  pushl $171
c0103109:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c010310e:	e9 f0 03 00 00       	jmp    c0103503 <__alltraps>

c0103113 <vector172>:
.globl vector172
vector172:
  pushl $0
c0103113:	6a 00                	push   $0x0
  pushl $172
c0103115:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c010311a:	e9 e4 03 00 00       	jmp    c0103503 <__alltraps>

c010311f <vector173>:
.globl vector173
vector173:
  pushl $0
c010311f:	6a 00                	push   $0x0
  pushl $173
c0103121:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c0103126:	e9 d8 03 00 00       	jmp    c0103503 <__alltraps>

c010312b <vector174>:
.globl vector174
vector174:
  pushl $0
c010312b:	6a 00                	push   $0x0
  pushl $174
c010312d:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c0103132:	e9 cc 03 00 00       	jmp    c0103503 <__alltraps>

c0103137 <vector175>:
.globl vector175
vector175:
  pushl $0
c0103137:	6a 00                	push   $0x0
  pushl $175
c0103139:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c010313e:	e9 c0 03 00 00       	jmp    c0103503 <__alltraps>

c0103143 <vector176>:
.globl vector176
vector176:
  pushl $0
c0103143:	6a 00                	push   $0x0
  pushl $176
c0103145:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c010314a:	e9 b4 03 00 00       	jmp    c0103503 <__alltraps>

c010314f <vector177>:
.globl vector177
vector177:
  pushl $0
c010314f:	6a 00                	push   $0x0
  pushl $177
c0103151:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c0103156:	e9 a8 03 00 00       	jmp    c0103503 <__alltraps>

c010315b <vector178>:
.globl vector178
vector178:
  pushl $0
c010315b:	6a 00                	push   $0x0
  pushl $178
c010315d:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103162:	e9 9c 03 00 00       	jmp    c0103503 <__alltraps>

c0103167 <vector179>:
.globl vector179
vector179:
  pushl $0
c0103167:	6a 00                	push   $0x0
  pushl $179
c0103169:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c010316e:	e9 90 03 00 00       	jmp    c0103503 <__alltraps>

c0103173 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103173:	6a 00                	push   $0x0
  pushl $180
c0103175:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c010317a:	e9 84 03 00 00       	jmp    c0103503 <__alltraps>

c010317f <vector181>:
.globl vector181
vector181:
  pushl $0
c010317f:	6a 00                	push   $0x0
  pushl $181
c0103181:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0103186:	e9 78 03 00 00       	jmp    c0103503 <__alltraps>

c010318b <vector182>:
.globl vector182
vector182:
  pushl $0
c010318b:	6a 00                	push   $0x0
  pushl $182
c010318d:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103192:	e9 6c 03 00 00       	jmp    c0103503 <__alltraps>

c0103197 <vector183>:
.globl vector183
vector183:
  pushl $0
c0103197:	6a 00                	push   $0x0
  pushl $183
c0103199:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c010319e:	e9 60 03 00 00       	jmp    c0103503 <__alltraps>

c01031a3 <vector184>:
.globl vector184
vector184:
  pushl $0
c01031a3:	6a 00                	push   $0x0
  pushl $184
c01031a5:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c01031aa:	e9 54 03 00 00       	jmp    c0103503 <__alltraps>

c01031af <vector185>:
.globl vector185
vector185:
  pushl $0
c01031af:	6a 00                	push   $0x0
  pushl $185
c01031b1:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c01031b6:	e9 48 03 00 00       	jmp    c0103503 <__alltraps>

c01031bb <vector186>:
.globl vector186
vector186:
  pushl $0
c01031bb:	6a 00                	push   $0x0
  pushl $186
c01031bd:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c01031c2:	e9 3c 03 00 00       	jmp    c0103503 <__alltraps>

c01031c7 <vector187>:
.globl vector187
vector187:
  pushl $0
c01031c7:	6a 00                	push   $0x0
  pushl $187
c01031c9:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c01031ce:	e9 30 03 00 00       	jmp    c0103503 <__alltraps>

c01031d3 <vector188>:
.globl vector188
vector188:
  pushl $0
c01031d3:	6a 00                	push   $0x0
  pushl $188
c01031d5:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c01031da:	e9 24 03 00 00       	jmp    c0103503 <__alltraps>

c01031df <vector189>:
.globl vector189
vector189:
  pushl $0
c01031df:	6a 00                	push   $0x0
  pushl $189
c01031e1:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c01031e6:	e9 18 03 00 00       	jmp    c0103503 <__alltraps>

c01031eb <vector190>:
.globl vector190
vector190:
  pushl $0
c01031eb:	6a 00                	push   $0x0
  pushl $190
c01031ed:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c01031f2:	e9 0c 03 00 00       	jmp    c0103503 <__alltraps>

c01031f7 <vector191>:
.globl vector191
vector191:
  pushl $0
c01031f7:	6a 00                	push   $0x0
  pushl $191
c01031f9:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c01031fe:	e9 00 03 00 00       	jmp    c0103503 <__alltraps>

c0103203 <vector192>:
.globl vector192
vector192:
  pushl $0
c0103203:	6a 00                	push   $0x0
  pushl $192
c0103205:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c010320a:	e9 f4 02 00 00       	jmp    c0103503 <__alltraps>

c010320f <vector193>:
.globl vector193
vector193:
  pushl $0
c010320f:	6a 00                	push   $0x0
  pushl $193
c0103211:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c0103216:	e9 e8 02 00 00       	jmp    c0103503 <__alltraps>

c010321b <vector194>:
.globl vector194
vector194:
  pushl $0
c010321b:	6a 00                	push   $0x0
  pushl $194
c010321d:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c0103222:	e9 dc 02 00 00       	jmp    c0103503 <__alltraps>

c0103227 <vector195>:
.globl vector195
vector195:
  pushl $0
c0103227:	6a 00                	push   $0x0
  pushl $195
c0103229:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c010322e:	e9 d0 02 00 00       	jmp    c0103503 <__alltraps>

c0103233 <vector196>:
.globl vector196
vector196:
  pushl $0
c0103233:	6a 00                	push   $0x0
  pushl $196
c0103235:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c010323a:	e9 c4 02 00 00       	jmp    c0103503 <__alltraps>

c010323f <vector197>:
.globl vector197
vector197:
  pushl $0
c010323f:	6a 00                	push   $0x0
  pushl $197
c0103241:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c0103246:	e9 b8 02 00 00       	jmp    c0103503 <__alltraps>

c010324b <vector198>:
.globl vector198
vector198:
  pushl $0
c010324b:	6a 00                	push   $0x0
  pushl $198
c010324d:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c0103252:	e9 ac 02 00 00       	jmp    c0103503 <__alltraps>

c0103257 <vector199>:
.globl vector199
vector199:
  pushl $0
c0103257:	6a 00                	push   $0x0
  pushl $199
c0103259:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c010325e:	e9 a0 02 00 00       	jmp    c0103503 <__alltraps>

c0103263 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103263:	6a 00                	push   $0x0
  pushl $200
c0103265:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c010326a:	e9 94 02 00 00       	jmp    c0103503 <__alltraps>

c010326f <vector201>:
.globl vector201
vector201:
  pushl $0
c010326f:	6a 00                	push   $0x0
  pushl $201
c0103271:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0103276:	e9 88 02 00 00       	jmp    c0103503 <__alltraps>

c010327b <vector202>:
.globl vector202
vector202:
  pushl $0
c010327b:	6a 00                	push   $0x0
  pushl $202
c010327d:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103282:	e9 7c 02 00 00       	jmp    c0103503 <__alltraps>

c0103287 <vector203>:
.globl vector203
vector203:
  pushl $0
c0103287:	6a 00                	push   $0x0
  pushl $203
c0103289:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c010328e:	e9 70 02 00 00       	jmp    c0103503 <__alltraps>

c0103293 <vector204>:
.globl vector204
vector204:
  pushl $0
c0103293:	6a 00                	push   $0x0
  pushl $204
c0103295:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c010329a:	e9 64 02 00 00       	jmp    c0103503 <__alltraps>

c010329f <vector205>:
.globl vector205
vector205:
  pushl $0
c010329f:	6a 00                	push   $0x0
  pushl $205
c01032a1:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c01032a6:	e9 58 02 00 00       	jmp    c0103503 <__alltraps>

c01032ab <vector206>:
.globl vector206
vector206:
  pushl $0
c01032ab:	6a 00                	push   $0x0
  pushl $206
c01032ad:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c01032b2:	e9 4c 02 00 00       	jmp    c0103503 <__alltraps>

c01032b7 <vector207>:
.globl vector207
vector207:
  pushl $0
c01032b7:	6a 00                	push   $0x0
  pushl $207
c01032b9:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c01032be:	e9 40 02 00 00       	jmp    c0103503 <__alltraps>

c01032c3 <vector208>:
.globl vector208
vector208:
  pushl $0
c01032c3:	6a 00                	push   $0x0
  pushl $208
c01032c5:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c01032ca:	e9 34 02 00 00       	jmp    c0103503 <__alltraps>

c01032cf <vector209>:
.globl vector209
vector209:
  pushl $0
c01032cf:	6a 00                	push   $0x0
  pushl $209
c01032d1:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c01032d6:	e9 28 02 00 00       	jmp    c0103503 <__alltraps>

c01032db <vector210>:
.globl vector210
vector210:
  pushl $0
c01032db:	6a 00                	push   $0x0
  pushl $210
c01032dd:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c01032e2:	e9 1c 02 00 00       	jmp    c0103503 <__alltraps>

c01032e7 <vector211>:
.globl vector211
vector211:
  pushl $0
c01032e7:	6a 00                	push   $0x0
  pushl $211
c01032e9:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c01032ee:	e9 10 02 00 00       	jmp    c0103503 <__alltraps>

c01032f3 <vector212>:
.globl vector212
vector212:
  pushl $0
c01032f3:	6a 00                	push   $0x0
  pushl $212
c01032f5:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01032fa:	e9 04 02 00 00       	jmp    c0103503 <__alltraps>

c01032ff <vector213>:
.globl vector213
vector213:
  pushl $0
c01032ff:	6a 00                	push   $0x0
  pushl $213
c0103301:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c0103306:	e9 f8 01 00 00       	jmp    c0103503 <__alltraps>

c010330b <vector214>:
.globl vector214
vector214:
  pushl $0
c010330b:	6a 00                	push   $0x0
  pushl $214
c010330d:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c0103312:	e9 ec 01 00 00       	jmp    c0103503 <__alltraps>

c0103317 <vector215>:
.globl vector215
vector215:
  pushl $0
c0103317:	6a 00                	push   $0x0
  pushl $215
c0103319:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c010331e:	e9 e0 01 00 00       	jmp    c0103503 <__alltraps>

c0103323 <vector216>:
.globl vector216
vector216:
  pushl $0
c0103323:	6a 00                	push   $0x0
  pushl $216
c0103325:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c010332a:	e9 d4 01 00 00       	jmp    c0103503 <__alltraps>

c010332f <vector217>:
.globl vector217
vector217:
  pushl $0
c010332f:	6a 00                	push   $0x0
  pushl $217
c0103331:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c0103336:	e9 c8 01 00 00       	jmp    c0103503 <__alltraps>

c010333b <vector218>:
.globl vector218
vector218:
  pushl $0
c010333b:	6a 00                	push   $0x0
  pushl $218
c010333d:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c0103342:	e9 bc 01 00 00       	jmp    c0103503 <__alltraps>

c0103347 <vector219>:
.globl vector219
vector219:
  pushl $0
c0103347:	6a 00                	push   $0x0
  pushl $219
c0103349:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c010334e:	e9 b0 01 00 00       	jmp    c0103503 <__alltraps>

c0103353 <vector220>:
.globl vector220
vector220:
  pushl $0
c0103353:	6a 00                	push   $0x0
  pushl $220
c0103355:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c010335a:	e9 a4 01 00 00       	jmp    c0103503 <__alltraps>

c010335f <vector221>:
.globl vector221
vector221:
  pushl $0
c010335f:	6a 00                	push   $0x0
  pushl $221
c0103361:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0103366:	e9 98 01 00 00       	jmp    c0103503 <__alltraps>

c010336b <vector222>:
.globl vector222
vector222:
  pushl $0
c010336b:	6a 00                	push   $0x0
  pushl $222
c010336d:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103372:	e9 8c 01 00 00       	jmp    c0103503 <__alltraps>

c0103377 <vector223>:
.globl vector223
vector223:
  pushl $0
c0103377:	6a 00                	push   $0x0
  pushl $223
c0103379:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c010337e:	e9 80 01 00 00       	jmp    c0103503 <__alltraps>

c0103383 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103383:	6a 00                	push   $0x0
  pushl $224
c0103385:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c010338a:	e9 74 01 00 00       	jmp    c0103503 <__alltraps>

c010338f <vector225>:
.globl vector225
vector225:
  pushl $0
c010338f:	6a 00                	push   $0x0
  pushl $225
c0103391:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0103396:	e9 68 01 00 00       	jmp    c0103503 <__alltraps>

c010339b <vector226>:
.globl vector226
vector226:
  pushl $0
c010339b:	6a 00                	push   $0x0
  pushl $226
c010339d:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c01033a2:	e9 5c 01 00 00       	jmp    c0103503 <__alltraps>

c01033a7 <vector227>:
.globl vector227
vector227:
  pushl $0
c01033a7:	6a 00                	push   $0x0
  pushl $227
c01033a9:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c01033ae:	e9 50 01 00 00       	jmp    c0103503 <__alltraps>

c01033b3 <vector228>:
.globl vector228
vector228:
  pushl $0
c01033b3:	6a 00                	push   $0x0
  pushl $228
c01033b5:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c01033ba:	e9 44 01 00 00       	jmp    c0103503 <__alltraps>

c01033bf <vector229>:
.globl vector229
vector229:
  pushl $0
c01033bf:	6a 00                	push   $0x0
  pushl $229
c01033c1:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c01033c6:	e9 38 01 00 00       	jmp    c0103503 <__alltraps>

c01033cb <vector230>:
.globl vector230
vector230:
  pushl $0
c01033cb:	6a 00                	push   $0x0
  pushl $230
c01033cd:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c01033d2:	e9 2c 01 00 00       	jmp    c0103503 <__alltraps>

c01033d7 <vector231>:
.globl vector231
vector231:
  pushl $0
c01033d7:	6a 00                	push   $0x0
  pushl $231
c01033d9:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c01033de:	e9 20 01 00 00       	jmp    c0103503 <__alltraps>

c01033e3 <vector232>:
.globl vector232
vector232:
  pushl $0
c01033e3:	6a 00                	push   $0x0
  pushl $232
c01033e5:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c01033ea:	e9 14 01 00 00       	jmp    c0103503 <__alltraps>

c01033ef <vector233>:
.globl vector233
vector233:
  pushl $0
c01033ef:	6a 00                	push   $0x0
  pushl $233
c01033f1:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c01033f6:	e9 08 01 00 00       	jmp    c0103503 <__alltraps>

c01033fb <vector234>:
.globl vector234
vector234:
  pushl $0
c01033fb:	6a 00                	push   $0x0
  pushl $234
c01033fd:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c0103402:	e9 fc 00 00 00       	jmp    c0103503 <__alltraps>

c0103407 <vector235>:
.globl vector235
vector235:
  pushl $0
c0103407:	6a 00                	push   $0x0
  pushl $235
c0103409:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c010340e:	e9 f0 00 00 00       	jmp    c0103503 <__alltraps>

c0103413 <vector236>:
.globl vector236
vector236:
  pushl $0
c0103413:	6a 00                	push   $0x0
  pushl $236
c0103415:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c010341a:	e9 e4 00 00 00       	jmp    c0103503 <__alltraps>

c010341f <vector237>:
.globl vector237
vector237:
  pushl $0
c010341f:	6a 00                	push   $0x0
  pushl $237
c0103421:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c0103426:	e9 d8 00 00 00       	jmp    c0103503 <__alltraps>

c010342b <vector238>:
.globl vector238
vector238:
  pushl $0
c010342b:	6a 00                	push   $0x0
  pushl $238
c010342d:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c0103432:	e9 cc 00 00 00       	jmp    c0103503 <__alltraps>

c0103437 <vector239>:
.globl vector239
vector239:
  pushl $0
c0103437:	6a 00                	push   $0x0
  pushl $239
c0103439:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c010343e:	e9 c0 00 00 00       	jmp    c0103503 <__alltraps>

c0103443 <vector240>:
.globl vector240
vector240:
  pushl $0
c0103443:	6a 00                	push   $0x0
  pushl $240
c0103445:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c010344a:	e9 b4 00 00 00       	jmp    c0103503 <__alltraps>

c010344f <vector241>:
.globl vector241
vector241:
  pushl $0
c010344f:	6a 00                	push   $0x0
  pushl $241
c0103451:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c0103456:	e9 a8 00 00 00       	jmp    c0103503 <__alltraps>

c010345b <vector242>:
.globl vector242
vector242:
  pushl $0
c010345b:	6a 00                	push   $0x0
  pushl $242
c010345d:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103462:	e9 9c 00 00 00       	jmp    c0103503 <__alltraps>

c0103467 <vector243>:
.globl vector243
vector243:
  pushl $0
c0103467:	6a 00                	push   $0x0
  pushl $243
c0103469:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c010346e:	e9 90 00 00 00       	jmp    c0103503 <__alltraps>

c0103473 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103473:	6a 00                	push   $0x0
  pushl $244
c0103475:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c010347a:	e9 84 00 00 00       	jmp    c0103503 <__alltraps>

c010347f <vector245>:
.globl vector245
vector245:
  pushl $0
c010347f:	6a 00                	push   $0x0
  pushl $245
c0103481:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0103486:	e9 78 00 00 00       	jmp    c0103503 <__alltraps>

c010348b <vector246>:
.globl vector246
vector246:
  pushl $0
c010348b:	6a 00                	push   $0x0
  pushl $246
c010348d:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103492:	e9 6c 00 00 00       	jmp    c0103503 <__alltraps>

c0103497 <vector247>:
.globl vector247
vector247:
  pushl $0
c0103497:	6a 00                	push   $0x0
  pushl $247
c0103499:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c010349e:	e9 60 00 00 00       	jmp    c0103503 <__alltraps>

c01034a3 <vector248>:
.globl vector248
vector248:
  pushl $0
c01034a3:	6a 00                	push   $0x0
  pushl $248
c01034a5:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c01034aa:	e9 54 00 00 00       	jmp    c0103503 <__alltraps>

c01034af <vector249>:
.globl vector249
vector249:
  pushl $0
c01034af:	6a 00                	push   $0x0
  pushl $249
c01034b1:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c01034b6:	e9 48 00 00 00       	jmp    c0103503 <__alltraps>

c01034bb <vector250>:
.globl vector250
vector250:
  pushl $0
c01034bb:	6a 00                	push   $0x0
  pushl $250
c01034bd:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c01034c2:	e9 3c 00 00 00       	jmp    c0103503 <__alltraps>

c01034c7 <vector251>:
.globl vector251
vector251:
  pushl $0
c01034c7:	6a 00                	push   $0x0
  pushl $251
c01034c9:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c01034ce:	e9 30 00 00 00       	jmp    c0103503 <__alltraps>

c01034d3 <vector252>:
.globl vector252
vector252:
  pushl $0
c01034d3:	6a 00                	push   $0x0
  pushl $252
c01034d5:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c01034da:	e9 24 00 00 00       	jmp    c0103503 <__alltraps>

c01034df <vector253>:
.globl vector253
vector253:
  pushl $0
c01034df:	6a 00                	push   $0x0
  pushl $253
c01034e1:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c01034e6:	e9 18 00 00 00       	jmp    c0103503 <__alltraps>

c01034eb <vector254>:
.globl vector254
vector254:
  pushl $0
c01034eb:	6a 00                	push   $0x0
  pushl $254
c01034ed:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c01034f2:	e9 0c 00 00 00       	jmp    c0103503 <__alltraps>

c01034f7 <vector255>:
.globl vector255
vector255:
  pushl $0
c01034f7:	6a 00                	push   $0x0
  pushl $255
c01034f9:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01034fe:	e9 00 00 00 00       	jmp    c0103503 <__alltraps>

c0103503 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0103503:	1e                   	push   %ds
    pushl %es
c0103504:	06                   	push   %es
    pushl %fs
c0103505:	0f a0                	push   %fs
    pushl %gs
c0103507:	0f a8                	push   %gs
    pushal
c0103509:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c010350a:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010350f:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0103511:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0103513:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0103514:	e8 ee f4 ff ff       	call   c0102a07 <trap>

    # pop the pushed stack pointer
    popl %esp
c0103519:	5c                   	pop    %esp

c010351a <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c010351a:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c010351b:	0f a9                	pop    %gs
    popl %fs
c010351d:	0f a1                	pop    %fs
    popl %es
c010351f:	07                   	pop    %es
    popl %ds
c0103520:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0103521:	83 c4 08             	add    $0x8,%esp
    iret
c0103524:	cf                   	iret   

c0103525 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0103525:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0103529:	eb ef                	jmp    c010351a <__trapret>

c010352b <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c010352b:	55                   	push   %ebp
c010352c:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c010352e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103531:	8b 40 18             	mov    0x18(%eax),%eax
}
c0103534:	5d                   	pop    %ebp
c0103535:	c3                   	ret    

c0103536 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0103536:	55                   	push   %ebp
c0103537:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0103539:	8b 45 08             	mov    0x8(%ebp),%eax
c010353c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010353f:	89 50 18             	mov    %edx,0x18(%eax)
}
c0103542:	5d                   	pop    %ebp
c0103543:	c3                   	ret    

c0103544 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0103544:	55                   	push   %ebp
c0103545:	89 e5                	mov    %esp,%ebp
c0103547:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010354a:	8b 45 08             	mov    0x8(%ebp),%eax
c010354d:	c1 e8 0c             	shr    $0xc,%eax
c0103550:	89 c2                	mov    %eax,%edx
c0103552:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0103557:	39 c2                	cmp    %eax,%edx
c0103559:	72 1c                	jb     c0103577 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010355b:	c7 44 24 08 f0 df 10 	movl   $0xc010dff0,0x8(%esp)
c0103562:	c0 
c0103563:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010356a:	00 
c010356b:	c7 04 24 0f e0 10 c0 	movl   $0xc010e00f,(%esp)
c0103572:	e8 8e ce ff ff       	call   c0100405 <__panic>
    }
    return &pages[PPN(pa)];
c0103577:	a1 b8 71 1c c0       	mov    0xc01c71b8,%eax
c010357c:	8b 55 08             	mov    0x8(%ebp),%edx
c010357f:	c1 ea 0c             	shr    $0xc,%edx
c0103582:	c1 e2 05             	shl    $0x5,%edx
c0103585:	01 d0                	add    %edx,%eax
}
c0103587:	c9                   	leave  
c0103588:	c3                   	ret    

c0103589 <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0103589:	55                   	push   %ebp
c010358a:	89 e5                	mov    %esp,%ebp
c010358c:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c010358f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103592:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103597:	89 04 24             	mov    %eax,(%esp)
c010359a:	e8 a5 ff ff ff       	call   c0103544 <pa2page>
}
c010359f:	c9                   	leave  
c01035a0:	c3                   	ret    

c01035a1 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c01035a1:	55                   	push   %ebp
c01035a2:	89 e5                	mov    %esp,%ebp
c01035a4:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c01035a7:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c01035ae:	e8 17 1d 00 00       	call   c01052ca <kmalloc>
c01035b3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c01035b6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01035ba:	0f 84 81 00 00 00    	je     c0103641 <mm_create+0xa0>
        list_init(&(mm->mmap_list));
c01035c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01035c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01035c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01035cc:	89 50 04             	mov    %edx,0x4(%eax)
c01035cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01035d2:	8b 50 04             	mov    0x4(%eax),%edx
c01035d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01035d8:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c01035da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035dd:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c01035e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035e7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c01035ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035f1:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c01035f8:	a1 6c 4f 1c c0       	mov    0xc01c4f6c,%eax
c01035fd:	85 c0                	test   %eax,%eax
c01035ff:	74 0d                	je     c010360e <mm_create+0x6d>
c0103601:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103604:	89 04 24             	mov    %eax,(%esp)
c0103607:	e8 40 1f 00 00       	call   c010554c <swap_init_mm>
c010360c:	eb 0a                	jmp    c0103618 <mm_create+0x77>
        else mm->sm_priv = NULL;
c010360e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103611:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0103618:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010361f:	00 
c0103620:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103623:	89 04 24             	mov    %eax,(%esp)
c0103626:	e8 0b ff ff ff       	call   c0103536 <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c010362b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010362e:	83 c0 1c             	add    $0x1c,%eax
c0103631:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103638:	00 
c0103639:	89 04 24             	mov    %eax,(%esp)
c010363c:	e8 c4 64 00 00       	call   c0109b05 <sem_init>
    }    
    return mm;
c0103641:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103644:	c9                   	leave  
c0103645:	c3                   	ret    

c0103646 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0103646:	55                   	push   %ebp
c0103647:	89 e5                	mov    %esp,%ebp
c0103649:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c010364c:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0103653:	e8 72 1c 00 00       	call   c01052ca <kmalloc>
c0103658:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c010365b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010365f:	74 1b                	je     c010367c <vma_create+0x36>
        vma->vm_start = vm_start;
c0103661:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103664:	8b 55 08             	mov    0x8(%ebp),%edx
c0103667:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c010366a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010366d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103670:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0103673:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103676:	8b 55 10             	mov    0x10(%ebp),%edx
c0103679:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c010367c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010367f:	c9                   	leave  
c0103680:	c3                   	ret    

c0103681 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0103681:	55                   	push   %ebp
c0103682:	89 e5                	mov    %esp,%ebp
c0103684:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0103687:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c010368e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103692:	0f 84 95 00 00 00    	je     c010372d <find_vma+0xac>
        vma = mm->mmap_cache;
c0103698:	8b 45 08             	mov    0x8(%ebp),%eax
c010369b:	8b 40 08             	mov    0x8(%eax),%eax
c010369e:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c01036a1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01036a5:	74 16                	je     c01036bd <find_vma+0x3c>
c01036a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036aa:	8b 40 04             	mov    0x4(%eax),%eax
c01036ad:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01036b0:	77 0b                	ja     c01036bd <find_vma+0x3c>
c01036b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036b5:	8b 40 08             	mov    0x8(%eax),%eax
c01036b8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01036bb:	77 61                	ja     c010371e <find_vma+0x9d>
                bool found = 0;
c01036bd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c01036c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01036c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01036ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01036cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c01036d0:	eb 28                	jmp    c01036fa <find_vma+0x79>
                    vma = le2vma(le, list_link);
c01036d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036d5:	83 e8 10             	sub    $0x10,%eax
c01036d8:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c01036db:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036de:	8b 40 04             	mov    0x4(%eax),%eax
c01036e1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01036e4:	77 14                	ja     c01036fa <find_vma+0x79>
c01036e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036e9:	8b 40 08             	mov    0x8(%eax),%eax
c01036ec:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01036ef:	76 09                	jbe    c01036fa <find_vma+0x79>
                        found = 1;
c01036f1:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c01036f8:	eb 17                	jmp    c0103711 <find_vma+0x90>
c01036fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103700:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103703:	8b 40 04             	mov    0x4(%eax),%eax
                while ((le = list_next(le)) != list) {
c0103706:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103709:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010370c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010370f:	75 c1                	jne    c01036d2 <find_vma+0x51>
                    }
                }
                if (!found) {
c0103711:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0103715:	75 07                	jne    c010371e <find_vma+0x9d>
                    vma = NULL;
c0103717:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c010371e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0103722:	74 09                	je     c010372d <find_vma+0xac>
            mm->mmap_cache = vma;
c0103724:	8b 45 08             	mov    0x8(%ebp),%eax
c0103727:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010372a:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c010372d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0103730:	c9                   	leave  
c0103731:	c3                   	ret    

c0103732 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0103732:	55                   	push   %ebp
c0103733:	89 e5                	mov    %esp,%ebp
c0103735:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c0103738:	8b 45 08             	mov    0x8(%ebp),%eax
c010373b:	8b 50 04             	mov    0x4(%eax),%edx
c010373e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103741:	8b 40 08             	mov    0x8(%eax),%eax
c0103744:	39 c2                	cmp    %eax,%edx
c0103746:	72 24                	jb     c010376c <check_vma_overlap+0x3a>
c0103748:	c7 44 24 0c 1d e0 10 	movl   $0xc010e01d,0xc(%esp)
c010374f:	c0 
c0103750:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c0103757:	c0 
c0103758:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010375f:	00 
c0103760:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c0103767:	e8 99 cc ff ff       	call   c0100405 <__panic>
    assert(prev->vm_end <= next->vm_start);
c010376c:	8b 45 08             	mov    0x8(%ebp),%eax
c010376f:	8b 50 08             	mov    0x8(%eax),%edx
c0103772:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103775:	8b 40 04             	mov    0x4(%eax),%eax
c0103778:	39 c2                	cmp    %eax,%edx
c010377a:	76 24                	jbe    c01037a0 <check_vma_overlap+0x6e>
c010377c:	c7 44 24 0c 60 e0 10 	movl   $0xc010e060,0xc(%esp)
c0103783:	c0 
c0103784:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c010378b:	c0 
c010378c:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0103793:	00 
c0103794:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c010379b:	e8 65 cc ff ff       	call   c0100405 <__panic>
    assert(next->vm_start < next->vm_end);
c01037a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01037a3:	8b 50 04             	mov    0x4(%eax),%edx
c01037a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01037a9:	8b 40 08             	mov    0x8(%eax),%eax
c01037ac:	39 c2                	cmp    %eax,%edx
c01037ae:	72 24                	jb     c01037d4 <check_vma_overlap+0xa2>
c01037b0:	c7 44 24 0c 7f e0 10 	movl   $0xc010e07f,0xc(%esp)
c01037b7:	c0 
c01037b8:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c01037bf:	c0 
c01037c0:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c01037c7:	00 
c01037c8:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c01037cf:	e8 31 cc ff ff       	call   c0100405 <__panic>
}
c01037d4:	c9                   	leave  
c01037d5:	c3                   	ret    

c01037d6 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c01037d6:	55                   	push   %ebp
c01037d7:	89 e5                	mov    %esp,%ebp
c01037d9:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c01037dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01037df:	8b 50 04             	mov    0x4(%eax),%edx
c01037e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01037e5:	8b 40 08             	mov    0x8(%eax),%eax
c01037e8:	39 c2                	cmp    %eax,%edx
c01037ea:	72 24                	jb     c0103810 <insert_vma_struct+0x3a>
c01037ec:	c7 44 24 0c 9d e0 10 	movl   $0xc010e09d,0xc(%esp)
c01037f3:	c0 
c01037f4:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c01037fb:	c0 
c01037fc:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0103803:	00 
c0103804:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c010380b:	e8 f5 cb ff ff       	call   c0100405 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c0103810:	8b 45 08             	mov    0x8(%ebp),%eax
c0103813:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0103816:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103819:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c010381c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010381f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0103822:	eb 21                	jmp    c0103845 <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0103824:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103827:	83 e8 10             	sub    $0x10,%eax
c010382a:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c010382d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103830:	8b 50 04             	mov    0x4(%eax),%edx
c0103833:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103836:	8b 40 04             	mov    0x4(%eax),%eax
c0103839:	39 c2                	cmp    %eax,%edx
c010383b:	76 02                	jbe    c010383f <insert_vma_struct+0x69>
                break;
c010383d:	eb 1d                	jmp    c010385c <insert_vma_struct+0x86>
            }
            le_prev = le;
c010383f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103842:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103845:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103848:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010384b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010384e:	8b 40 04             	mov    0x4(%eax),%eax
        while ((le = list_next(le)) != list) {
c0103851:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103854:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103857:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010385a:	75 c8                	jne    c0103824 <insert_vma_struct+0x4e>
c010385c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010385f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103862:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103865:	8b 40 04             	mov    0x4(%eax),%eax
        }

    le_next = list_next(le_prev);
c0103868:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c010386b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010386e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103871:	74 15                	je     c0103888 <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c0103873:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103876:	8d 50 f0             	lea    -0x10(%eax),%edx
c0103879:	8b 45 0c             	mov    0xc(%ebp),%eax
c010387c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103880:	89 14 24             	mov    %edx,(%esp)
c0103883:	e8 aa fe ff ff       	call   c0103732 <check_vma_overlap>
    }
    if (le_next != list) {
c0103888:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010388b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010388e:	74 15                	je     c01038a5 <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c0103890:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103893:	83 e8 10             	sub    $0x10,%eax
c0103896:	89 44 24 04          	mov    %eax,0x4(%esp)
c010389a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010389d:	89 04 24             	mov    %eax,(%esp)
c01038a0:	e8 8d fe ff ff       	call   c0103732 <check_vma_overlap>
    }

    vma->vm_mm = mm;
c01038a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01038a8:	8b 55 08             	mov    0x8(%ebp),%edx
c01038ab:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c01038ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c01038b0:	8d 50 10             	lea    0x10(%eax),%edx
c01038b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038b6:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01038b9:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    __list_add(elm, listelm, listelm->next);
c01038bc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01038bf:	8b 40 04             	mov    0x4(%eax),%eax
c01038c2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01038c5:	89 55 d0             	mov    %edx,-0x30(%ebp)
c01038c8:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01038cb:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01038ce:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01038d1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01038d4:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01038d7:	89 10                	mov    %edx,(%eax)
c01038d9:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01038dc:	8b 10                	mov    (%eax),%edx
c01038de:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01038e1:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01038e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01038e7:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01038ea:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01038ed:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01038f0:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01038f3:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c01038f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01038f8:	8b 40 10             	mov    0x10(%eax),%eax
c01038fb:	8d 50 01             	lea    0x1(%eax),%edx
c01038fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0103901:	89 50 10             	mov    %edx,0x10(%eax)
}
c0103904:	c9                   	leave  
c0103905:	c3                   	ret    

c0103906 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c0103906:	55                   	push   %ebp
c0103907:	89 e5                	mov    %esp,%ebp
c0103909:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c010390c:	8b 45 08             	mov    0x8(%ebp),%eax
c010390f:	89 04 24             	mov    %eax,(%esp)
c0103912:	e8 14 fc ff ff       	call   c010352b <mm_count>
c0103917:	85 c0                	test   %eax,%eax
c0103919:	74 24                	je     c010393f <mm_destroy+0x39>
c010391b:	c7 44 24 0c b9 e0 10 	movl   $0xc010e0b9,0xc(%esp)
c0103922:	c0 
c0103923:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c010392a:	c0 
c010392b:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0103932:	00 
c0103933:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c010393a:	e8 c6 ca ff ff       	call   c0100405 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c010393f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103942:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0103945:	eb 36                	jmp    c010397d <mm_destroy+0x77>
c0103947:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010394a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    __list_del(listelm->prev, listelm->next);
c010394d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103950:	8b 40 04             	mov    0x4(%eax),%eax
c0103953:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0103956:	8b 12                	mov    (%edx),%edx
c0103958:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010395b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010395e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103961:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103964:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103967:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010396a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010396d:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c010396f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103972:	83 e8 10             	sub    $0x10,%eax
c0103975:	89 04 24             	mov    %eax,(%esp)
c0103978:	e8 68 19 00 00       	call   c01052e5 <kfree>
c010397d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103980:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return listelm->next;
c0103983:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103986:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(list)) != list) {
c0103989:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010398c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010398f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103992:	75 b3                	jne    c0103947 <mm_destroy+0x41>
    }
    kfree(mm); //kfree mm
c0103994:	8b 45 08             	mov    0x8(%ebp),%eax
c0103997:	89 04 24             	mov    %eax,(%esp)
c010399a:	e8 46 19 00 00       	call   c01052e5 <kfree>
    mm=NULL;
c010399f:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c01039a6:	c9                   	leave  
c01039a7:	c3                   	ret    

c01039a8 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c01039a8:	55                   	push   %ebp
c01039a9:	89 e5                	mov    %esp,%ebp
c01039ab:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c01039ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c01039b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01039b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039b7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01039bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01039bf:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c01039c6:	8b 45 10             	mov    0x10(%ebp),%eax
c01039c9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01039cc:	01 c2                	add    %eax,%edx
c01039ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01039d1:	01 d0                	add    %edx,%eax
c01039d3:	83 e8 01             	sub    $0x1,%eax
c01039d6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01039d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01039dc:	ba 00 00 00 00       	mov    $0x0,%edx
c01039e1:	f7 75 e8             	divl   -0x18(%ebp)
c01039e4:	89 d0                	mov    %edx,%eax
c01039e6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01039e9:	29 c2                	sub    %eax,%edx
c01039eb:	89 d0                	mov    %edx,%eax
c01039ed:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c01039f0:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c01039f7:	76 11                	jbe    c0103a0a <mm_map+0x62>
c01039f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01039fc:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01039ff:	73 09                	jae    c0103a0a <mm_map+0x62>
c0103a01:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0103a08:	76 0a                	jbe    c0103a14 <mm_map+0x6c>
        return -E_INVAL;
c0103a0a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0103a0f:	e9 ae 00 00 00       	jmp    c0103ac2 <mm_map+0x11a>
    }

    assert(mm != NULL);
c0103a14:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103a18:	75 24                	jne    c0103a3e <mm_map+0x96>
c0103a1a:	c7 44 24 0c cb e0 10 	movl   $0xc010e0cb,0xc(%esp)
c0103a21:	c0 
c0103a22:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c0103a29:	c0 
c0103a2a:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c0103a31:	00 
c0103a32:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c0103a39:	e8 c7 c9 ff ff       	call   c0100405 <__panic>

    int ret = -E_INVAL;
c0103a3e:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0103a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103a48:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a4f:	89 04 24             	mov    %eax,(%esp)
c0103a52:	e8 2a fc ff ff       	call   c0103681 <find_vma>
c0103a57:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103a5a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103a5e:	74 0d                	je     c0103a6d <mm_map+0xc5>
c0103a60:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103a63:	8b 40 04             	mov    0x4(%eax),%eax
c0103a66:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103a69:	73 02                	jae    c0103a6d <mm_map+0xc5>
        goto out;
c0103a6b:	eb 52                	jmp    c0103abf <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c0103a6d:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0103a74:	8b 45 14             	mov    0x14(%ebp),%eax
c0103a77:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103a7b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103a7e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a82:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103a85:	89 04 24             	mov    %eax,(%esp)
c0103a88:	e8 b9 fb ff ff       	call   c0103646 <vma_create>
c0103a8d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103a90:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103a94:	75 02                	jne    c0103a98 <mm_map+0xf0>
        goto out;
c0103a96:	eb 27                	jmp    c0103abf <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c0103a98:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103a9b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103aa2:	89 04 24             	mov    %eax,(%esp)
c0103aa5:	e8 2c fd ff ff       	call   c01037d6 <insert_vma_struct>
    if (vma_store != NULL) {
c0103aaa:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0103aae:	74 08                	je     c0103ab8 <mm_map+0x110>
        *vma_store = vma;
c0103ab0:	8b 45 18             	mov    0x18(%ebp),%eax
c0103ab3:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103ab6:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0103ab8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c0103abf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103ac2:	c9                   	leave  
c0103ac3:	c3                   	ret    

c0103ac4 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0103ac4:	55                   	push   %ebp
c0103ac5:	89 e5                	mov    %esp,%ebp
c0103ac7:	56                   	push   %esi
c0103ac8:	53                   	push   %ebx
c0103ac9:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c0103acc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103ad0:	74 06                	je     c0103ad8 <dup_mmap+0x14>
c0103ad2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103ad6:	75 24                	jne    c0103afc <dup_mmap+0x38>
c0103ad8:	c7 44 24 0c d6 e0 10 	movl   $0xc010e0d6,0xc(%esp)
c0103adf:	c0 
c0103ae0:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c0103ae7:	c0 
c0103ae8:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c0103aef:	00 
c0103af0:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c0103af7:	e8 09 c9 ff ff       	call   c0100405 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c0103afc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103aff:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b02:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b05:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c0103b08:	e9 92 00 00 00       	jmp    c0103b9f <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c0103b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b10:	83 e8 10             	sub    $0x10,%eax
c0103b13:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0103b16:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b19:	8b 48 0c             	mov    0xc(%eax),%ecx
c0103b1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b1f:	8b 50 08             	mov    0x8(%eax),%edx
c0103b22:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b25:	8b 40 04             	mov    0x4(%eax),%eax
c0103b28:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0103b2c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103b30:	89 04 24             	mov    %eax,(%esp)
c0103b33:	e8 0e fb ff ff       	call   c0103646 <vma_create>
c0103b38:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0103b3b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103b3f:	75 07                	jne    c0103b48 <dup_mmap+0x84>
            return -E_NO_MEM;
c0103b41:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0103b46:	eb 76                	jmp    c0103bbe <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c0103b48:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103b4b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103b4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b52:	89 04 24             	mov    %eax,(%esp)
c0103b55:	e8 7c fc ff ff       	call   c01037d6 <insert_vma_struct>

        bool share = 0;
c0103b5a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0103b61:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b64:	8b 58 08             	mov    0x8(%eax),%ebx
c0103b67:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b6a:	8b 48 04             	mov    0x4(%eax),%ecx
c0103b6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103b70:	8b 50 0c             	mov    0xc(%eax),%edx
c0103b73:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b76:	8b 40 0c             	mov    0xc(%eax),%eax
c0103b79:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c0103b7c:	89 74 24 10          	mov    %esi,0x10(%esp)
c0103b80:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0103b84:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0103b88:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103b8c:	89 04 24             	mov    %eax,(%esp)
c0103b8f:	e8 f2 43 00 00       	call   c0107f86 <copy_range>
c0103b94:	85 c0                	test   %eax,%eax
c0103b96:	74 07                	je     c0103b9f <dup_mmap+0xdb>
            return -E_NO_MEM;
c0103b98:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0103b9d:	eb 1f                	jmp    c0103bbe <dup_mmap+0xfa>
c0103b9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ba2:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return listelm->prev;
c0103ba5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103ba8:	8b 00                	mov    (%eax),%eax
    while ((le = list_prev(le)) != list) {
c0103baa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103bad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bb0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103bb3:	0f 85 54 ff ff ff    	jne    c0103b0d <dup_mmap+0x49>
        }
    }
    return 0;
c0103bb9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103bbe:	83 c4 40             	add    $0x40,%esp
c0103bc1:	5b                   	pop    %ebx
c0103bc2:	5e                   	pop    %esi
c0103bc3:	5d                   	pop    %ebp
c0103bc4:	c3                   	ret    

c0103bc5 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0103bc5:	55                   	push   %ebp
c0103bc6:	89 e5                	mov    %esp,%ebp
c0103bc8:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c0103bcb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103bcf:	74 0f                	je     c0103be0 <exit_mmap+0x1b>
c0103bd1:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bd4:	89 04 24             	mov    %eax,(%esp)
c0103bd7:	e8 4f f9 ff ff       	call   c010352b <mm_count>
c0103bdc:	85 c0                	test   %eax,%eax
c0103bde:	74 24                	je     c0103c04 <exit_mmap+0x3f>
c0103be0:	c7 44 24 0c f4 e0 10 	movl   $0xc010e0f4,0xc(%esp)
c0103be7:	c0 
c0103be8:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c0103bef:	c0 
c0103bf0:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0103bf7:	00 
c0103bf8:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c0103bff:	e8 01 c8 ff ff       	call   c0100405 <__panic>
    pde_t *pgdir = mm->pgdir;
c0103c04:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c07:	8b 40 0c             	mov    0xc(%eax),%eax
c0103c0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c0103c0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c10:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103c13:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c16:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0103c19:	eb 28                	jmp    c0103c43 <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c0103c1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c1e:	83 e8 10             	sub    $0x10,%eax
c0103c21:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0103c24:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103c27:	8b 50 08             	mov    0x8(%eax),%edx
c0103c2a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103c2d:	8b 40 04             	mov    0x4(%eax),%eax
c0103c30:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103c34:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103c38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c3b:	89 04 24             	mov    %eax,(%esp)
c0103c3e:	e8 48 41 00 00       	call   c0107d8b <unmap_range>
c0103c43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c46:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return listelm->next;
c0103c49:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c4c:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != list) {
c0103c4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103c52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c55:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103c58:	75 c1                	jne    c0103c1b <exit_mmap+0x56>
    }
    while ((le = list_next(le)) != list) {
c0103c5a:	eb 28                	jmp    c0103c84 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c0103c5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c5f:	83 e8 10             	sub    $0x10,%eax
c0103c62:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0103c65:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103c68:	8b 50 08             	mov    0x8(%eax),%edx
c0103c6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103c6e:	8b 40 04             	mov    0x4(%eax),%eax
c0103c71:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103c75:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103c79:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c7c:	89 04 24             	mov    %eax,(%esp)
c0103c7f:	e8 fb 41 00 00       	call   c0107e7f <exit_range>
c0103c84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c87:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103c8a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103c8d:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != list) {
c0103c90:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103c93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c96:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103c99:	75 c1                	jne    c0103c5c <exit_mmap+0x97>
    }
}
c0103c9b:	c9                   	leave  
c0103c9c:	c3                   	ret    

c0103c9d <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0103c9d:	55                   	push   %ebp
c0103c9e:	89 e5                	mov    %esp,%ebp
c0103ca0:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0103ca3:	8b 45 10             	mov    0x10(%ebp),%eax
c0103ca6:	8b 55 18             	mov    0x18(%ebp),%edx
c0103ca9:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0103cad:	8b 55 14             	mov    0x14(%ebp),%edx
c0103cb0:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103cb4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103cb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0103cbb:	89 04 24             	mov    %eax,(%esp)
c0103cbe:	e8 a6 09 00 00       	call   c0104669 <user_mem_check>
c0103cc3:	85 c0                	test   %eax,%eax
c0103cc5:	75 07                	jne    c0103cce <copy_from_user+0x31>
        return 0;
c0103cc7:	b8 00 00 00 00       	mov    $0x0,%eax
c0103ccc:	eb 1e                	jmp    c0103cec <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c0103cce:	8b 45 14             	mov    0x14(%ebp),%eax
c0103cd1:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103cd5:	8b 45 10             	mov    0x10(%ebp),%eax
c0103cd8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103cdc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103cdf:	89 04 24             	mov    %eax,(%esp)
c0103ce2:	e8 4e 91 00 00       	call   c010ce35 <memcpy>
    return 1;
c0103ce7:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103cec:	c9                   	leave  
c0103ced:	c3                   	ret    

c0103cee <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0103cee:	55                   	push   %ebp
c0103cef:	89 e5                	mov    %esp,%ebp
c0103cf1:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0103cf4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103cf7:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0103cfe:	00 
c0103cff:	8b 55 14             	mov    0x14(%ebp),%edx
c0103d02:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103d06:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103d0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d0d:	89 04 24             	mov    %eax,(%esp)
c0103d10:	e8 54 09 00 00       	call   c0104669 <user_mem_check>
c0103d15:	85 c0                	test   %eax,%eax
c0103d17:	75 07                	jne    c0103d20 <copy_to_user+0x32>
        return 0;
c0103d19:	b8 00 00 00 00       	mov    $0x0,%eax
c0103d1e:	eb 1e                	jmp    c0103d3e <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c0103d20:	8b 45 14             	mov    0x14(%ebp),%eax
c0103d23:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103d27:	8b 45 10             	mov    0x10(%ebp),%eax
c0103d2a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103d31:	89 04 24             	mov    %eax,(%esp)
c0103d34:	e8 fc 90 00 00       	call   c010ce35 <memcpy>
    return 1;
c0103d39:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103d3e:	c9                   	leave  
c0103d3f:	c3                   	ret    

c0103d40 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0103d40:	55                   	push   %ebp
c0103d41:	89 e5                	mov    %esp,%ebp
c0103d43:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0103d46:	e8 02 00 00 00       	call   c0103d4d <check_vmm>
}
c0103d4b:	c9                   	leave  
c0103d4c:	c3                   	ret    

c0103d4d <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0103d4d:	55                   	push   %ebp
c0103d4e:	89 e5                	mov    %esp,%ebp
c0103d50:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0103d53:	e8 f4 37 00 00       	call   c010754c <nr_free_pages>
c0103d58:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0103d5b:	e8 13 00 00 00       	call   c0103d73 <check_vma_struct>
    check_pgfault();
c0103d60:	e8 a7 04 00 00       	call   c010420c <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0103d65:	c7 04 24 14 e1 10 c0 	movl   $0xc010e114,(%esp)
c0103d6c:	e8 3d c5 ff ff       	call   c01002ae <cprintf>
}
c0103d71:	c9                   	leave  
c0103d72:	c3                   	ret    

c0103d73 <check_vma_struct>:

static void
check_vma_struct(void) {
c0103d73:	55                   	push   %ebp
c0103d74:	89 e5                	mov    %esp,%ebp
c0103d76:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0103d79:	e8 ce 37 00 00       	call   c010754c <nr_free_pages>
c0103d7e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0103d81:	e8 1b f8 ff ff       	call   c01035a1 <mm_create>
c0103d86:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0103d89:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103d8d:	75 24                	jne    c0103db3 <check_vma_struct+0x40>
c0103d8f:	c7 44 24 0c cb e0 10 	movl   $0xc010e0cb,0xc(%esp)
c0103d96:	c0 
c0103d97:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c0103d9e:	c0 
c0103d9f:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c0103da6:	00 
c0103da7:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c0103dae:	e8 52 c6 ff ff       	call   c0100405 <__panic>

    int step1 = 10, step2 = step1 * 10;
c0103db3:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0103dba:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103dbd:	89 d0                	mov    %edx,%eax
c0103dbf:	c1 e0 02             	shl    $0x2,%eax
c0103dc2:	01 d0                	add    %edx,%eax
c0103dc4:	01 c0                	add    %eax,%eax
c0103dc6:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0103dc9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103dcf:	eb 70                	jmp    c0103e41 <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0103dd1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103dd4:	89 d0                	mov    %edx,%eax
c0103dd6:	c1 e0 02             	shl    $0x2,%eax
c0103dd9:	01 d0                	add    %edx,%eax
c0103ddb:	83 c0 02             	add    $0x2,%eax
c0103dde:	89 c1                	mov    %eax,%ecx
c0103de0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103de3:	89 d0                	mov    %edx,%eax
c0103de5:	c1 e0 02             	shl    $0x2,%eax
c0103de8:	01 d0                	add    %edx,%eax
c0103dea:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0103df1:	00 
c0103df2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0103df6:	89 04 24             	mov    %eax,(%esp)
c0103df9:	e8 48 f8 ff ff       	call   c0103646 <vma_create>
c0103dfe:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0103e01:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103e05:	75 24                	jne    c0103e2b <check_vma_struct+0xb8>
c0103e07:	c7 44 24 0c 2c e1 10 	movl   $0xc010e12c,0xc(%esp)
c0103e0e:	c0 
c0103e0f:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c0103e16:	c0 
c0103e17:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c0103e1e:	00 
c0103e1f:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c0103e26:	e8 da c5 ff ff       	call   c0100405 <__panic>
        insert_vma_struct(mm, vma);
c0103e2b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103e2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103e32:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e35:	89 04 24             	mov    %eax,(%esp)
c0103e38:	e8 99 f9 ff ff       	call   c01037d6 <insert_vma_struct>
    for (i = step1; i >= 1; i --) {
c0103e3d:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0103e41:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103e45:	7f 8a                	jg     c0103dd1 <check_vma_struct+0x5e>
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0103e47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103e4a:	83 c0 01             	add    $0x1,%eax
c0103e4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103e50:	eb 70                	jmp    c0103ec2 <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0103e52:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e55:	89 d0                	mov    %edx,%eax
c0103e57:	c1 e0 02             	shl    $0x2,%eax
c0103e5a:	01 d0                	add    %edx,%eax
c0103e5c:	83 c0 02             	add    $0x2,%eax
c0103e5f:	89 c1                	mov    %eax,%ecx
c0103e61:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e64:	89 d0                	mov    %edx,%eax
c0103e66:	c1 e0 02             	shl    $0x2,%eax
c0103e69:	01 d0                	add    %edx,%eax
c0103e6b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0103e72:	00 
c0103e73:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0103e77:	89 04 24             	mov    %eax,(%esp)
c0103e7a:	e8 c7 f7 ff ff       	call   c0103646 <vma_create>
c0103e7f:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0103e82:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0103e86:	75 24                	jne    c0103eac <check_vma_struct+0x139>
c0103e88:	c7 44 24 0c 2c e1 10 	movl   $0xc010e12c,0xc(%esp)
c0103e8f:	c0 
c0103e90:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c0103e97:	c0 
c0103e98:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0103e9f:	00 
c0103ea0:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c0103ea7:	e8 59 c5 ff ff       	call   c0100405 <__panic>
        insert_vma_struct(mm, vma);
c0103eac:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103eaf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103eb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103eb6:	89 04 24             	mov    %eax,(%esp)
c0103eb9:	e8 18 f9 ff ff       	call   c01037d6 <insert_vma_struct>
    for (i = step1 + 1; i <= step2; i ++) {
c0103ebe:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103ec2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ec5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103ec8:	7e 88                	jle    c0103e52 <check_vma_struct+0xdf>
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0103eca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ecd:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0103ed0:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103ed3:	8b 40 04             	mov    0x4(%eax),%eax
c0103ed6:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0103ed9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0103ee0:	e9 97 00 00 00       	jmp    c0103f7c <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c0103ee5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ee8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103eeb:	75 24                	jne    c0103f11 <check_vma_struct+0x19e>
c0103eed:	c7 44 24 0c 38 e1 10 	movl   $0xc010e138,0xc(%esp)
c0103ef4:	c0 
c0103ef5:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c0103efc:	c0 
c0103efd:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c0103f04:	00 
c0103f05:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c0103f0c:	e8 f4 c4 ff ff       	call   c0100405 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0103f11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f14:	83 e8 10             	sub    $0x10,%eax
c0103f17:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0103f1a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103f1d:	8b 48 04             	mov    0x4(%eax),%ecx
c0103f20:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103f23:	89 d0                	mov    %edx,%eax
c0103f25:	c1 e0 02             	shl    $0x2,%eax
c0103f28:	01 d0                	add    %edx,%eax
c0103f2a:	39 c1                	cmp    %eax,%ecx
c0103f2c:	75 17                	jne    c0103f45 <check_vma_struct+0x1d2>
c0103f2e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103f31:	8b 48 08             	mov    0x8(%eax),%ecx
c0103f34:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103f37:	89 d0                	mov    %edx,%eax
c0103f39:	c1 e0 02             	shl    $0x2,%eax
c0103f3c:	01 d0                	add    %edx,%eax
c0103f3e:	83 c0 02             	add    $0x2,%eax
c0103f41:	39 c1                	cmp    %eax,%ecx
c0103f43:	74 24                	je     c0103f69 <check_vma_struct+0x1f6>
c0103f45:	c7 44 24 0c 50 e1 10 	movl   $0xc010e150,0xc(%esp)
c0103f4c:	c0 
c0103f4d:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c0103f54:	c0 
c0103f55:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0103f5c:	00 
c0103f5d:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c0103f64:	e8 9c c4 ff ff       	call   c0100405 <__panic>
c0103f69:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f6c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0103f6f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103f72:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0103f75:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 1; i <= step2; i ++) {
c0103f78:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103f7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f7f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103f82:	0f 8e 5d ff ff ff    	jle    c0103ee5 <check_vma_struct+0x172>
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0103f88:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0103f8f:	e9 cd 01 00 00       	jmp    c0104161 <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c0103f94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f97:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103f9b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103f9e:	89 04 24             	mov    %eax,(%esp)
c0103fa1:	e8 db f6 ff ff       	call   c0103681 <find_vma>
c0103fa6:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c0103fa9:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0103fad:	75 24                	jne    c0103fd3 <check_vma_struct+0x260>
c0103faf:	c7 44 24 0c 85 e1 10 	movl   $0xc010e185,0xc(%esp)
c0103fb6:	c0 
c0103fb7:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c0103fbe:	c0 
c0103fbf:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c0103fc6:	00 
c0103fc7:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c0103fce:	e8 32 c4 ff ff       	call   c0100405 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0103fd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103fd6:	83 c0 01             	add    $0x1,%eax
c0103fd9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103fdd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103fe0:	89 04 24             	mov    %eax,(%esp)
c0103fe3:	e8 99 f6 ff ff       	call   c0103681 <find_vma>
c0103fe8:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c0103feb:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0103fef:	75 24                	jne    c0104015 <check_vma_struct+0x2a2>
c0103ff1:	c7 44 24 0c 92 e1 10 	movl   $0xc010e192,0xc(%esp)
c0103ff8:	c0 
c0103ff9:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c0104000:	c0 
c0104001:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c0104008:	00 
c0104009:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c0104010:	e8 f0 c3 ff ff       	call   c0100405 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0104015:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104018:	83 c0 02             	add    $0x2,%eax
c010401b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010401f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104022:	89 04 24             	mov    %eax,(%esp)
c0104025:	e8 57 f6 ff ff       	call   c0103681 <find_vma>
c010402a:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c010402d:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0104031:	74 24                	je     c0104057 <check_vma_struct+0x2e4>
c0104033:	c7 44 24 0c 9f e1 10 	movl   $0xc010e19f,0xc(%esp)
c010403a:	c0 
c010403b:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c0104042:	c0 
c0104043:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c010404a:	00 
c010404b:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c0104052:	e8 ae c3 ff ff       	call   c0100405 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0104057:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010405a:	83 c0 03             	add    $0x3,%eax
c010405d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104061:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104064:	89 04 24             	mov    %eax,(%esp)
c0104067:	e8 15 f6 ff ff       	call   c0103681 <find_vma>
c010406c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c010406f:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0104073:	74 24                	je     c0104099 <check_vma_struct+0x326>
c0104075:	c7 44 24 0c ac e1 10 	movl   $0xc010e1ac,0xc(%esp)
c010407c:	c0 
c010407d:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c0104084:	c0 
c0104085:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c010408c:	00 
c010408d:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c0104094:	e8 6c c3 ff ff       	call   c0100405 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0104099:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010409c:	83 c0 04             	add    $0x4,%eax
c010409f:	89 44 24 04          	mov    %eax,0x4(%esp)
c01040a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01040a6:	89 04 24             	mov    %eax,(%esp)
c01040a9:	e8 d3 f5 ff ff       	call   c0103681 <find_vma>
c01040ae:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c01040b1:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c01040b5:	74 24                	je     c01040db <check_vma_struct+0x368>
c01040b7:	c7 44 24 0c b9 e1 10 	movl   $0xc010e1b9,0xc(%esp)
c01040be:	c0 
c01040bf:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c01040c6:	c0 
c01040c7:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c01040ce:	00 
c01040cf:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c01040d6:	e8 2a c3 ff ff       	call   c0100405 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c01040db:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01040de:	8b 50 04             	mov    0x4(%eax),%edx
c01040e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01040e4:	39 c2                	cmp    %eax,%edx
c01040e6:	75 10                	jne    c01040f8 <check_vma_struct+0x385>
c01040e8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01040eb:	8b 50 08             	mov    0x8(%eax),%edx
c01040ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01040f1:	83 c0 02             	add    $0x2,%eax
c01040f4:	39 c2                	cmp    %eax,%edx
c01040f6:	74 24                	je     c010411c <check_vma_struct+0x3a9>
c01040f8:	c7 44 24 0c c8 e1 10 	movl   $0xc010e1c8,0xc(%esp)
c01040ff:	c0 
c0104100:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c0104107:	c0 
c0104108:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c010410f:	00 
c0104110:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c0104117:	e8 e9 c2 ff ff       	call   c0100405 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c010411c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010411f:	8b 50 04             	mov    0x4(%eax),%edx
c0104122:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104125:	39 c2                	cmp    %eax,%edx
c0104127:	75 10                	jne    c0104139 <check_vma_struct+0x3c6>
c0104129:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010412c:	8b 50 08             	mov    0x8(%eax),%edx
c010412f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104132:	83 c0 02             	add    $0x2,%eax
c0104135:	39 c2                	cmp    %eax,%edx
c0104137:	74 24                	je     c010415d <check_vma_struct+0x3ea>
c0104139:	c7 44 24 0c f8 e1 10 	movl   $0xc010e1f8,0xc(%esp)
c0104140:	c0 
c0104141:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c0104148:	c0 
c0104149:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c0104150:	00 
c0104151:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c0104158:	e8 a8 c2 ff ff       	call   c0100405 <__panic>
    for (i = 5; i <= 5 * step2; i +=5) {
c010415d:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0104161:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104164:	89 d0                	mov    %edx,%eax
c0104166:	c1 e0 02             	shl    $0x2,%eax
c0104169:	01 d0                	add    %edx,%eax
c010416b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010416e:	0f 8d 20 fe ff ff    	jge    c0103f94 <check_vma_struct+0x221>
    }

    for (i =4; i>=0; i--) {
c0104174:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c010417b:	eb 70                	jmp    c01041ed <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c010417d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104180:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104184:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104187:	89 04 24             	mov    %eax,(%esp)
c010418a:	e8 f2 f4 ff ff       	call   c0103681 <find_vma>
c010418f:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0104192:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0104196:	74 27                	je     c01041bf <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0104198:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010419b:	8b 50 08             	mov    0x8(%eax),%edx
c010419e:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01041a1:	8b 40 04             	mov    0x4(%eax),%eax
c01041a4:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01041a8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01041ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01041af:	89 44 24 04          	mov    %eax,0x4(%esp)
c01041b3:	c7 04 24 28 e2 10 c0 	movl   $0xc010e228,(%esp)
c01041ba:	e8 ef c0 ff ff       	call   c01002ae <cprintf>
        }
        assert(vma_below_5 == NULL);
c01041bf:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01041c3:	74 24                	je     c01041e9 <check_vma_struct+0x476>
c01041c5:	c7 44 24 0c 4d e2 10 	movl   $0xc010e24d,0xc(%esp)
c01041cc:	c0 
c01041cd:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c01041d4:	c0 
c01041d5:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c01041dc:	00 
c01041dd:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c01041e4:	e8 1c c2 ff ff       	call   c0100405 <__panic>
    for (i =4; i>=0; i--) {
c01041e9:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01041ed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01041f1:	79 8a                	jns    c010417d <check_vma_struct+0x40a>
    }

    mm_destroy(mm);
c01041f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01041f6:	89 04 24             	mov    %eax,(%esp)
c01041f9:	e8 08 f7 ff ff       	call   c0103906 <mm_destroy>

    cprintf("check_vma_struct() succeeded!\n");
c01041fe:	c7 04 24 64 e2 10 c0 	movl   $0xc010e264,(%esp)
c0104205:	e8 a4 c0 ff ff       	call   c01002ae <cprintf>
}
c010420a:	c9                   	leave  
c010420b:	c3                   	ret    

c010420c <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c010420c:	55                   	push   %ebp
c010420d:	89 e5                	mov    %esp,%ebp
c010420f:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0104212:	e8 35 33 00 00       	call   c010754c <nr_free_pages>
c0104217:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c010421a:	e8 82 f3 ff ff       	call   c01035a1 <mm_create>
c010421f:	a3 bc 70 1c c0       	mov    %eax,0xc01c70bc
    assert(check_mm_struct != NULL);
c0104224:	a1 bc 70 1c c0       	mov    0xc01c70bc,%eax
c0104229:	85 c0                	test   %eax,%eax
c010422b:	75 24                	jne    c0104251 <check_pgfault+0x45>
c010422d:	c7 44 24 0c 83 e2 10 	movl   $0xc010e283,0xc(%esp)
c0104234:	c0 
c0104235:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c010423c:	c0 
c010423d:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c0104244:	00 
c0104245:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c010424c:	e8 b4 c1 ff ff       	call   c0100405 <__panic>

    struct mm_struct *mm = check_mm_struct;
c0104251:	a1 bc 70 1c c0       	mov    0xc01c70bc,%eax
c0104256:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0104259:	8b 15 20 1a 13 c0    	mov    0xc0131a20,%edx
c010425f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104262:	89 50 0c             	mov    %edx,0xc(%eax)
c0104265:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104268:	8b 40 0c             	mov    0xc(%eax),%eax
c010426b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c010426e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104271:	8b 00                	mov    (%eax),%eax
c0104273:	85 c0                	test   %eax,%eax
c0104275:	74 24                	je     c010429b <check_pgfault+0x8f>
c0104277:	c7 44 24 0c 9b e2 10 	movl   $0xc010e29b,0xc(%esp)
c010427e:	c0 
c010427f:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c0104286:	c0 
c0104287:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c010428e:	00 
c010428f:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c0104296:	e8 6a c1 ff ff       	call   c0100405 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c010429b:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c01042a2:	00 
c01042a3:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c01042aa:	00 
c01042ab:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01042b2:	e8 8f f3 ff ff       	call   c0103646 <vma_create>
c01042b7:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c01042ba:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01042be:	75 24                	jne    c01042e4 <check_pgfault+0xd8>
c01042c0:	c7 44 24 0c 2c e1 10 	movl   $0xc010e12c,0xc(%esp)
c01042c7:	c0 
c01042c8:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c01042cf:	c0 
c01042d0:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
c01042d7:	00 
c01042d8:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c01042df:	e8 21 c1 ff ff       	call   c0100405 <__panic>

    insert_vma_struct(mm, vma);
c01042e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01042e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01042eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01042ee:	89 04 24             	mov    %eax,(%esp)
c01042f1:	e8 e0 f4 ff ff       	call   c01037d6 <insert_vma_struct>

    uintptr_t addr = 0x100;
c01042f6:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c01042fd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104300:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104304:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104307:	89 04 24             	mov    %eax,(%esp)
c010430a:	e8 72 f3 ff ff       	call   c0103681 <find_vma>
c010430f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104312:	74 24                	je     c0104338 <check_pgfault+0x12c>
c0104314:	c7 44 24 0c a9 e2 10 	movl   $0xc010e2a9,0xc(%esp)
c010431b:	c0 
c010431c:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c0104323:	c0 
c0104324:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c010432b:	00 
c010432c:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c0104333:	e8 cd c0 ff ff       	call   c0100405 <__panic>

    int i, sum = 0;
c0104338:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c010433f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104346:	eb 17                	jmp    c010435f <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c0104348:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010434b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010434e:	01 d0                	add    %edx,%eax
c0104350:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104353:	88 10                	mov    %dl,(%eax)
        sum += i;
c0104355:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104358:	01 45 f0             	add    %eax,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c010435b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010435f:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0104363:	7e e3                	jle    c0104348 <check_pgfault+0x13c>
    }
    for (i = 0; i < 100; i ++) {
c0104365:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010436c:	eb 15                	jmp    c0104383 <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c010436e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104371:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104374:	01 d0                	add    %edx,%eax
c0104376:	0f b6 00             	movzbl (%eax),%eax
c0104379:	0f be c0             	movsbl %al,%eax
c010437c:	29 45 f0             	sub    %eax,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c010437f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104383:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0104387:	7e e5                	jle    c010436e <check_pgfault+0x162>
    }
    assert(sum == 0);
c0104389:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010438d:	74 24                	je     c01043b3 <check_pgfault+0x1a7>
c010438f:	c7 44 24 0c c3 e2 10 	movl   $0xc010e2c3,0xc(%esp)
c0104396:	c0 
c0104397:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c010439e:	c0 
c010439f:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c01043a6:	00 
c01043a7:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c01043ae:	e8 52 c0 ff ff       	call   c0100405 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c01043b3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01043b6:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01043b9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01043bc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01043c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01043c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043c8:	89 04 24             	mov    %eax,(%esp)
c01043cb:	e8 d9 3d 00 00       	call   c01081a9 <page_remove>
    free_page(pde2page(pgdir[0]));
c01043d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043d3:	8b 00                	mov    (%eax),%eax
c01043d5:	89 04 24             	mov    %eax,(%esp)
c01043d8:	e8 ac f1 ff ff       	call   c0103589 <pde2page>
c01043dd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01043e4:	00 
c01043e5:	89 04 24             	mov    %eax,(%esp)
c01043e8:	e8 2d 31 00 00       	call   c010751a <free_pages>
    pgdir[0] = 0;
c01043ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c01043f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01043f9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0104400:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104403:	89 04 24             	mov    %eax,(%esp)
c0104406:	e8 fb f4 ff ff       	call   c0103906 <mm_destroy>
    check_mm_struct = NULL;
c010440b:	c7 05 bc 70 1c c0 00 	movl   $0x0,0xc01c70bc
c0104412:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0104415:	e8 32 31 00 00       	call   c010754c <nr_free_pages>
c010441a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010441d:	74 24                	je     c0104443 <check_pgfault+0x237>
c010441f:	c7 44 24 0c cc e2 10 	movl   $0xc010e2cc,0xc(%esp)
c0104426:	c0 
c0104427:	c7 44 24 08 3b e0 10 	movl   $0xc010e03b,0x8(%esp)
c010442e:	c0 
c010442f:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0104436:	00 
c0104437:	c7 04 24 50 e0 10 c0 	movl   $0xc010e050,(%esp)
c010443e:	e8 c2 bf ff ff       	call   c0100405 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0104443:	c7 04 24 f3 e2 10 c0 	movl   $0xc010e2f3,(%esp)
c010444a:	e8 5f be ff ff       	call   c01002ae <cprintf>
}
c010444f:	c9                   	leave  
c0104450:	c3                   	ret    

c0104451 <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0104451:	55                   	push   %ebp
c0104452:	89 e5                	mov    %esp,%ebp
c0104454:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0104457:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c010445e:	8b 45 10             	mov    0x10(%ebp),%eax
c0104461:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104465:	8b 45 08             	mov    0x8(%ebp),%eax
c0104468:	89 04 24             	mov    %eax,(%esp)
c010446b:	e8 11 f2 ff ff       	call   c0103681 <find_vma>
c0104470:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0104473:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104478:	83 c0 01             	add    $0x1,%eax
c010447b:	a3 64 4f 1c c0       	mov    %eax,0xc01c4f64
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0104480:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104484:	74 0b                	je     c0104491 <do_pgfault+0x40>
c0104486:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104489:	8b 40 04             	mov    0x4(%eax),%eax
c010448c:	3b 45 10             	cmp    0x10(%ebp),%eax
c010448f:	76 18                	jbe    c01044a9 <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0104491:	8b 45 10             	mov    0x10(%ebp),%eax
c0104494:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104498:	c7 04 24 10 e3 10 c0 	movl   $0xc010e310,(%esp)
c010449f:	e8 0a be ff ff       	call   c01002ae <cprintf>
        goto failed;
c01044a4:	e9 bb 01 00 00       	jmp    c0104664 <do_pgfault+0x213>
    }
    //check the error_code
    switch (error_code & 3) {
c01044a9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01044ac:	83 e0 03             	and    $0x3,%eax
c01044af:	85 c0                	test   %eax,%eax
c01044b1:	74 36                	je     c01044e9 <do_pgfault+0x98>
c01044b3:	83 f8 01             	cmp    $0x1,%eax
c01044b6:	74 20                	je     c01044d8 <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c01044b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01044bb:	8b 40 0c             	mov    0xc(%eax),%eax
c01044be:	83 e0 02             	and    $0x2,%eax
c01044c1:	85 c0                	test   %eax,%eax
c01044c3:	75 11                	jne    c01044d6 <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c01044c5:	c7 04 24 40 e3 10 c0 	movl   $0xc010e340,(%esp)
c01044cc:	e8 dd bd ff ff       	call   c01002ae <cprintf>
            goto failed;
c01044d1:	e9 8e 01 00 00       	jmp    c0104664 <do_pgfault+0x213>
        }
        break;
c01044d6:	eb 2f                	jmp    c0104507 <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c01044d8:	c7 04 24 a0 e3 10 c0 	movl   $0xc010e3a0,(%esp)
c01044df:	e8 ca bd ff ff       	call   c01002ae <cprintf>
        goto failed;
c01044e4:	e9 7b 01 00 00       	jmp    c0104664 <do_pgfault+0x213>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c01044e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01044ec:	8b 40 0c             	mov    0xc(%eax),%eax
c01044ef:	83 e0 05             	and    $0x5,%eax
c01044f2:	85 c0                	test   %eax,%eax
c01044f4:	75 11                	jne    c0104507 <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c01044f6:	c7 04 24 d8 e3 10 c0 	movl   $0xc010e3d8,(%esp)
c01044fd:	e8 ac bd ff ff       	call   c01002ae <cprintf>
            goto failed;
c0104502:	e9 5d 01 00 00       	jmp    c0104664 <do_pgfault+0x213>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0104507:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c010450e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104511:	8b 40 0c             	mov    0xc(%eax),%eax
c0104514:	83 e0 02             	and    $0x2,%eax
c0104517:	85 c0                	test   %eax,%eax
c0104519:	74 04                	je     c010451f <do_pgfault+0xce>
        perm |= PTE_W;
c010451b:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c010451f:	8b 45 10             	mov    0x10(%ebp),%eax
c0104522:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104525:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104528:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010452d:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0104530:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0104537:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    *   mm->pgdir : the PDT of these vma
    *
    */
//try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
	//检查页表中是否有相应的应用程序需要的表项，有就获取指向这个表项的指针
	if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
c010453e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104541:	8b 40 0c             	mov    0xc(%eax),%eax
c0104544:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010454b:	00 
c010454c:	8b 55 10             	mov    0x10(%ebp),%edx
c010454f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104553:	89 04 24             	mov    %eax,(%esp)
c0104556:	e8 38 36 00 00       	call   c0107b93 <get_pte>
c010455b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010455e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104562:	75 11                	jne    c0104575 <do_pgfault+0x124>
        cprintf("get_pte in do_pgfault failed\n");
c0104564:	c7 04 24 3b e4 10 c0 	movl   $0xc010e43b,(%esp)
c010456b:	e8 3e bd ff ff       	call   c01002ae <cprintf>
        goto failed;
c0104570:	e9 ef 00 00 00       	jmp    c0104664 <do_pgfault+0x213>
    }
	//然后检查这个表项是否为空(是否被映射)，如果为空，pgdir_alloc_page分配一个新的物理页
    if (*ptep == 0) {  
c0104575:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104578:	8b 00                	mov    (%eax),%eax
c010457a:	85 c0                	test   %eax,%eax
c010457c:	75 35                	jne    c01045b3 <do_pgfault+0x162>
        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
c010457e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104581:	8b 40 0c             	mov    0xc(%eax),%eax
c0104584:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104587:	89 54 24 08          	mov    %edx,0x8(%esp)
c010458b:	8b 55 10             	mov    0x10(%ebp),%edx
c010458e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104592:	89 04 24             	mov    %eax,(%esp)
c0104595:	e8 69 3d 00 00       	call   c0108303 <pgdir_alloc_page>
c010459a:	85 c0                	test   %eax,%eax
c010459c:	0f 85 bb 00 00 00    	jne    c010465d <do_pgfault+0x20c>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c01045a2:	c7 04 24 5c e4 10 c0 	movl   $0xc010e45c,(%esp)
c01045a9:	e8 00 bd ff ff       	call   c01002ae <cprintf>
            goto failed;
c01045ae:	e9 b1 00 00 00       	jmp    c0104664 <do_pgfault+0x213>
        }
    }
 //如果这个页表项非空，那么说明这一页已经映射过了但是被保存在磁盘中，需要将这一页内存交换出来
// if this pte is a swap entry, then load data from disk to a page with phy addr and call page_insert to map the phy addr with logical addr
    else {   
        if(swap_init_ok) {
c01045b3:	a1 6c 4f 1c c0       	mov    0xc01c4f6c,%eax
c01045b8:	85 c0                	test   %eax,%eax
c01045ba:	0f 84 86 00 00 00    	je     c0104646 <do_pgfault+0x1f5>
            //如果可以交换
            struct Page *page=NULL; 
c01045c0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            //根据mm结构和addr地址，尝试将硬盘中的内容换入至page中
            //load the content of right disk page into the memory which page managed.
            if ((ret = swap_in(mm, addr, &page)) != 0) {
c01045c7:	8d 45 e0             	lea    -0x20(%ebp),%eax
c01045ca:	89 44 24 08          	mov    %eax,0x8(%esp)
c01045ce:	8b 45 10             	mov    0x10(%ebp),%eax
c01045d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01045d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01045d8:	89 04 24             	mov    %eax,(%esp)
c01045db:	e8 65 11 00 00       	call   c0105745 <swap_in>
c01045e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01045e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01045e7:	74 0e                	je     c01045f7 <do_pgfault+0x1a6>
                cprintf("swap_in in do_pgfault failed\n");
c01045e9:	c7 04 24 83 e4 10 c0 	movl   $0xc010e483,(%esp)
c01045f0:	e8 b9 bc ff ff       	call   c01002ae <cprintf>
c01045f5:	eb 6d                	jmp    c0104664 <do_pgfault+0x213>
                goto failed;
            }    
            page_insert(mm->pgdir, page, addr, perm); 
c01045f7:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01045fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01045fd:	8b 40 0c             	mov    0xc(%eax),%eax
c0104600:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0104603:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0104607:	8b 4d 10             	mov    0x10(%ebp),%ecx
c010460a:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010460e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104612:	89 04 24             	mov    %eax,(%esp)
c0104615:	e8 d3 3b 00 00       	call   c01081ed <page_insert>
            //建立虚拟地址和物理地址之间的对应关系 According to the mm, addr AND page, setup the map of phy addr <---> logical addr
            swap_map_swappable(mm, addr, page, 1); 
c010461a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010461d:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0104624:	00 
c0104625:	89 44 24 08          	mov    %eax,0x8(%esp)
c0104629:	8b 45 10             	mov    0x10(%ebp),%eax
c010462c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104630:	8b 45 08             	mov    0x8(%ebp),%eax
c0104633:	89 04 24             	mov    %eax,(%esp)
c0104636:	e8 41 0f 00 00       	call   c010557c <swap_map_swappable>
            //将此页面设置为可交换的 make the page swappable.  
            page->pra_vaddr = addr;
c010463b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010463e:	8b 55 10             	mov    0x10(%ebp),%edx
c0104641:	89 50 1c             	mov    %edx,0x1c(%eax)
c0104644:	eb 17                	jmp    c010465d <do_pgfault+0x20c>
        }
        else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0104646:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104649:	8b 00                	mov    (%eax),%eax
c010464b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010464f:	c7 04 24 a4 e4 10 c0 	movl   $0xc010e4a4,(%esp)
c0104656:	e8 53 bc ff ff       	call   c01002ae <cprintf>
            goto failed;
c010465b:	eb 07                	jmp    c0104664 <do_pgfault+0x213>
        }
   }
   ret = 0;
c010465d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0104664:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104667:	c9                   	leave  
c0104668:	c3                   	ret    

c0104669 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0104669:	55                   	push   %ebp
c010466a:	89 e5                	mov    %esp,%ebp
c010466c:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010466f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104673:	0f 84 e0 00 00 00    	je     c0104759 <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c0104679:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0104680:	76 1c                	jbe    c010469e <user_mem_check+0x35>
c0104682:	8b 45 10             	mov    0x10(%ebp),%eax
c0104685:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104688:	01 d0                	add    %edx,%eax
c010468a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010468d:	76 0f                	jbe    c010469e <user_mem_check+0x35>
c010468f:	8b 45 10             	mov    0x10(%ebp),%eax
c0104692:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104695:	01 d0                	add    %edx,%eax
c0104697:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c010469c:	76 0a                	jbe    c01046a8 <user_mem_check+0x3f>
            return 0;
c010469e:	b8 00 00 00 00       	mov    $0x0,%eax
c01046a3:	e9 e2 00 00 00       	jmp    c010478a <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c01046a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01046ab:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01046ae:	8b 45 10             	mov    0x10(%ebp),%eax
c01046b1:	8b 55 0c             	mov    0xc(%ebp),%edx
c01046b4:	01 d0                	add    %edx,%eax
c01046b6:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c01046b9:	e9 88 00 00 00       	jmp    c0104746 <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c01046be:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01046c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01046c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01046c8:	89 04 24             	mov    %eax,(%esp)
c01046cb:	e8 b1 ef ff ff       	call   c0103681 <find_vma>
c01046d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01046d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01046d7:	74 0b                	je     c01046e4 <user_mem_check+0x7b>
c01046d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01046dc:	8b 40 04             	mov    0x4(%eax),%eax
c01046df:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01046e2:	76 0a                	jbe    c01046ee <user_mem_check+0x85>
                return 0;
c01046e4:	b8 00 00 00 00       	mov    $0x0,%eax
c01046e9:	e9 9c 00 00 00       	jmp    c010478a <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c01046ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01046f1:	8b 50 0c             	mov    0xc(%eax),%edx
c01046f4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01046f8:	74 07                	je     c0104701 <user_mem_check+0x98>
c01046fa:	b8 02 00 00 00       	mov    $0x2,%eax
c01046ff:	eb 05                	jmp    c0104706 <user_mem_check+0x9d>
c0104701:	b8 01 00 00 00       	mov    $0x1,%eax
c0104706:	21 d0                	and    %edx,%eax
c0104708:	85 c0                	test   %eax,%eax
c010470a:	75 07                	jne    c0104713 <user_mem_check+0xaa>
                return 0;
c010470c:	b8 00 00 00 00       	mov    $0x0,%eax
c0104711:	eb 77                	jmp    c010478a <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0104713:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104717:	74 24                	je     c010473d <user_mem_check+0xd4>
c0104719:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010471c:	8b 40 0c             	mov    0xc(%eax),%eax
c010471f:	83 e0 08             	and    $0x8,%eax
c0104722:	85 c0                	test   %eax,%eax
c0104724:	74 17                	je     c010473d <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0104726:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104729:	8b 40 04             	mov    0x4(%eax),%eax
c010472c:	05 00 10 00 00       	add    $0x1000,%eax
c0104731:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0104734:	76 07                	jbe    c010473d <user_mem_check+0xd4>
                    return 0;
c0104736:	b8 00 00 00 00       	mov    $0x0,%eax
c010473b:	eb 4d                	jmp    c010478a <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c010473d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104740:	8b 40 08             	mov    0x8(%eax),%eax
c0104743:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < end) {
c0104746:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104749:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010474c:	0f 82 6c ff ff ff    	jb     c01046be <user_mem_check+0x55>
        }
        return 1;
c0104752:	b8 01 00 00 00       	mov    $0x1,%eax
c0104757:	eb 31                	jmp    c010478a <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c0104759:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0104760:	76 23                	jbe    c0104785 <user_mem_check+0x11c>
c0104762:	8b 45 10             	mov    0x10(%ebp),%eax
c0104765:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104768:	01 d0                	add    %edx,%eax
c010476a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010476d:	76 16                	jbe    c0104785 <user_mem_check+0x11c>
c010476f:	8b 45 10             	mov    0x10(%ebp),%eax
c0104772:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104775:	01 d0                	add    %edx,%eax
c0104777:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c010477c:	77 07                	ja     c0104785 <user_mem_check+0x11c>
c010477e:	b8 01 00 00 00       	mov    $0x1,%eax
c0104783:	eb 05                	jmp    c010478a <user_mem_check+0x121>
c0104785:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010478a:	c9                   	leave  
c010478b:	c3                   	ret    

c010478c <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c010478c:	55                   	push   %ebp
c010478d:	89 e5                	mov    %esp,%ebp
c010478f:	83 ec 10             	sub    $0x10,%esp
c0104792:	c7 45 fc c0 70 1c c0 	movl   $0xc01c70c0,-0x4(%ebp)
    elm->prev = elm->next = elm;
c0104799:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010479c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010479f:	89 50 04             	mov    %edx,0x4(%eax)
c01047a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01047a5:	8b 50 04             	mov    0x4(%eax),%edx
c01047a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01047ab:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c01047ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01047b0:	c7 40 14 c0 70 1c c0 	movl   $0xc01c70c0,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c01047b7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01047bc:	c9                   	leave  
c01047bd:	c3                   	ret    

c01047be <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c01047be:	55                   	push   %ebp
c01047bf:	89 e5                	mov    %esp,%ebp
c01047c1:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01047c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01047c7:	8b 40 14             	mov    0x14(%eax),%eax
c01047ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c01047cd:	8b 45 10             	mov    0x10(%ebp),%eax
c01047d0:	83 c0 14             	add    $0x14,%eax
c01047d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c01047d6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01047da:	74 06                	je     c01047e2 <_fifo_map_swappable+0x24>
c01047dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01047e0:	75 24                	jne    c0104806 <_fifo_map_swappable+0x48>
c01047e2:	c7 44 24 0c cc e4 10 	movl   $0xc010e4cc,0xc(%esp)
c01047e9:	c0 
c01047ea:	c7 44 24 08 ea e4 10 	movl   $0xc010e4ea,0x8(%esp)
c01047f1:	c0 
c01047f2:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c01047f9:	00 
c01047fa:	c7 04 24 ff e4 10 c0 	movl   $0xc010e4ff,(%esp)
c0104801:	e8 ff bb ff ff       	call   c0100405 <__panic>
c0104806:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104809:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010480c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010480f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104812:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104815:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104818:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010481b:	89 45 e0             	mov    %eax,-0x20(%ebp)
    __list_add(elm, listelm, listelm->next);
c010481e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104821:	8b 40 04             	mov    0x4(%eax),%eax
c0104824:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104827:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010482a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010482d:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0104830:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    prev->next = next->prev = elm;
c0104833:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104836:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104839:	89 10                	mov    %edx,(%eax)
c010483b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010483e:	8b 10                	mov    (%eax),%edx
c0104840:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104843:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0104846:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104849:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010484c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010484f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104852:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0104855:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);
    return 0;
c0104857:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010485c:	c9                   	leave  
c010485d:	c3                   	ret    

c010485e <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c010485e:	55                   	push   %ebp
c010485f:	89 e5                	mov    %esp,%ebp
c0104861:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0104864:	8b 45 08             	mov    0x8(%ebp),%eax
c0104867:	8b 40 14             	mov    0x14(%eax),%eax
c010486a:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c010486d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104871:	75 24                	jne    c0104897 <_fifo_swap_out_victim+0x39>
c0104873:	c7 44 24 0c 13 e5 10 	movl   $0xc010e513,0xc(%esp)
c010487a:	c0 
c010487b:	c7 44 24 08 ea e4 10 	movl   $0xc010e4ea,0x8(%esp)
c0104882:	c0 
c0104883:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c010488a:	00 
c010488b:	c7 04 24 ff e4 10 c0 	movl   $0xc010e4ff,(%esp)
c0104892:	e8 6e bb ff ff       	call   c0100405 <__panic>
     assert(in_tick==0);
c0104897:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010489b:	74 24                	je     c01048c1 <_fifo_swap_out_victim+0x63>
c010489d:	c7 44 24 0c 20 e5 10 	movl   $0xc010e520,0xc(%esp)
c01048a4:	c0 
c01048a5:	c7 44 24 08 ea e4 10 	movl   $0xc010e4ea,0x8(%esp)
c01048ac:	c0 
c01048ad:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c01048b4:	00 
c01048b5:	c7 04 24 ff e4 10 c0 	movl   $0xc010e4ff,(%esp)
c01048bc:	e8 44 bb ff ff       	call   c0100405 <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  assign the value of *ptr_page to the addr of this page
     //需要被换出的页
     list_entry_t *le = head->prev;
c01048c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048c4:	8b 00                	mov    (%eax),%eax
c01048c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c01048c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048cc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01048cf:	75 24                	jne    c01048f5 <_fifo_swap_out_victim+0x97>
c01048d1:	c7 44 24 0c 2b e5 10 	movl   $0xc010e52b,0xc(%esp)
c01048d8:	c0 
c01048d9:	c7 44 24 08 ea e4 10 	movl   $0xc010e4ea,0x8(%esp)
c01048e0:	c0 
c01048e1:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c01048e8:	00 
c01048e9:	c7 04 24 ff e4 10 c0 	movl   $0xc010e4ff,(%esp)
c01048f0:	e8 10 bb ff ff       	call   c0100405 <__panic>
     //获得对应page的指针p
     struct Page *p = le2page(le, pra_page_link);
c01048f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048f8:	83 e8 14             	sub    $0x14,%eax
c01048fb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01048fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104901:	89 45 e8             	mov    %eax,-0x18(%ebp)
    __list_del(listelm->prev, listelm->next);
c0104904:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104907:	8b 40 04             	mov    0x4(%eax),%eax
c010490a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010490d:	8b 12                	mov    (%edx),%edx
c010490f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0104912:	89 45 e0             	mov    %eax,-0x20(%ebp)
    prev->next = next;
c0104915:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104918:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010491b:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010491e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104921:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0104924:	89 10                	mov    %edx,(%eax)
     //将最老的页面从队列中删除
     list_del(le);
     assert(p !=NULL);
c0104926:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010492a:	75 24                	jne    c0104950 <_fifo_swap_out_victim+0xf2>
c010492c:	c7 44 24 0c 34 e5 10 	movl   $0xc010e534,0xc(%esp)
c0104933:	c0 
c0104934:	c7 44 24 08 ea e4 10 	movl   $0xc010e4ea,0x8(%esp)
c010493b:	c0 
c010493c:	c7 44 24 04 4e 00 00 	movl   $0x4e,0x4(%esp)
c0104943:	00 
c0104944:	c7 04 24 ff e4 10 c0 	movl   $0xc010e4ff,(%esp)
c010494b:	e8 b5 ba ff ff       	call   c0100405 <__panic>
     //将这一页的地址存储在ptr_page中
     *ptr_page = p;
c0104950:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104953:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104956:	89 10                	mov    %edx,(%eax)
     return 0;
c0104958:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010495d:	c9                   	leave  
c010495e:	c3                   	ret    

c010495f <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c010495f:	55                   	push   %ebp
c0104960:	89 e5                	mov    %esp,%ebp
c0104962:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0104965:	c7 04 24 40 e5 10 c0 	movl   $0xc010e540,(%esp)
c010496c:	e8 3d b9 ff ff       	call   c01002ae <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0104971:	b8 00 30 00 00       	mov    $0x3000,%eax
c0104976:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0104979:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c010497e:	83 f8 04             	cmp    $0x4,%eax
c0104981:	74 24                	je     c01049a7 <_fifo_check_swap+0x48>
c0104983:	c7 44 24 0c 66 e5 10 	movl   $0xc010e566,0xc(%esp)
c010498a:	c0 
c010498b:	c7 44 24 08 ea e4 10 	movl   $0xc010e4ea,0x8(%esp)
c0104992:	c0 
c0104993:	c7 44 24 04 58 00 00 	movl   $0x58,0x4(%esp)
c010499a:	00 
c010499b:	c7 04 24 ff e4 10 c0 	movl   $0xc010e4ff,(%esp)
c01049a2:	e8 5e ba ff ff       	call   c0100405 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c01049a7:	c7 04 24 78 e5 10 c0 	movl   $0xc010e578,(%esp)
c01049ae:	e8 fb b8 ff ff       	call   c01002ae <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c01049b3:	b8 00 10 00 00       	mov    $0x1000,%eax
c01049b8:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c01049bb:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c01049c0:	83 f8 04             	cmp    $0x4,%eax
c01049c3:	74 24                	je     c01049e9 <_fifo_check_swap+0x8a>
c01049c5:	c7 44 24 0c 66 e5 10 	movl   $0xc010e566,0xc(%esp)
c01049cc:	c0 
c01049cd:	c7 44 24 08 ea e4 10 	movl   $0xc010e4ea,0x8(%esp)
c01049d4:	c0 
c01049d5:	c7 44 24 04 5b 00 00 	movl   $0x5b,0x4(%esp)
c01049dc:	00 
c01049dd:	c7 04 24 ff e4 10 c0 	movl   $0xc010e4ff,(%esp)
c01049e4:	e8 1c ba ff ff       	call   c0100405 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c01049e9:	c7 04 24 a0 e5 10 c0 	movl   $0xc010e5a0,(%esp)
c01049f0:	e8 b9 b8 ff ff       	call   c01002ae <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c01049f5:	b8 00 40 00 00       	mov    $0x4000,%eax
c01049fa:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c01049fd:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104a02:	83 f8 04             	cmp    $0x4,%eax
c0104a05:	74 24                	je     c0104a2b <_fifo_check_swap+0xcc>
c0104a07:	c7 44 24 0c 66 e5 10 	movl   $0xc010e566,0xc(%esp)
c0104a0e:	c0 
c0104a0f:	c7 44 24 08 ea e4 10 	movl   $0xc010e4ea,0x8(%esp)
c0104a16:	c0 
c0104a17:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104a1e:	00 
c0104a1f:	c7 04 24 ff e4 10 c0 	movl   $0xc010e4ff,(%esp)
c0104a26:	e8 da b9 ff ff       	call   c0100405 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0104a2b:	c7 04 24 c8 e5 10 c0 	movl   $0xc010e5c8,(%esp)
c0104a32:	e8 77 b8 ff ff       	call   c01002ae <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0104a37:	b8 00 20 00 00       	mov    $0x2000,%eax
c0104a3c:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0104a3f:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104a44:	83 f8 04             	cmp    $0x4,%eax
c0104a47:	74 24                	je     c0104a6d <_fifo_check_swap+0x10e>
c0104a49:	c7 44 24 0c 66 e5 10 	movl   $0xc010e566,0xc(%esp)
c0104a50:	c0 
c0104a51:	c7 44 24 08 ea e4 10 	movl   $0xc010e4ea,0x8(%esp)
c0104a58:	c0 
c0104a59:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c0104a60:	00 
c0104a61:	c7 04 24 ff e4 10 c0 	movl   $0xc010e4ff,(%esp)
c0104a68:	e8 98 b9 ff ff       	call   c0100405 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0104a6d:	c7 04 24 f0 e5 10 c0 	movl   $0xc010e5f0,(%esp)
c0104a74:	e8 35 b8 ff ff       	call   c01002ae <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0104a79:	b8 00 50 00 00       	mov    $0x5000,%eax
c0104a7e:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0104a81:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104a86:	83 f8 05             	cmp    $0x5,%eax
c0104a89:	74 24                	je     c0104aaf <_fifo_check_swap+0x150>
c0104a8b:	c7 44 24 0c 16 e6 10 	movl   $0xc010e616,0xc(%esp)
c0104a92:	c0 
c0104a93:	c7 44 24 08 ea e4 10 	movl   $0xc010e4ea,0x8(%esp)
c0104a9a:	c0 
c0104a9b:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0104aa2:	00 
c0104aa3:	c7 04 24 ff e4 10 c0 	movl   $0xc010e4ff,(%esp)
c0104aaa:	e8 56 b9 ff ff       	call   c0100405 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0104aaf:	c7 04 24 c8 e5 10 c0 	movl   $0xc010e5c8,(%esp)
c0104ab6:	e8 f3 b7 ff ff       	call   c01002ae <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0104abb:	b8 00 20 00 00       	mov    $0x2000,%eax
c0104ac0:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0104ac3:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104ac8:	83 f8 05             	cmp    $0x5,%eax
c0104acb:	74 24                	je     c0104af1 <_fifo_check_swap+0x192>
c0104acd:	c7 44 24 0c 16 e6 10 	movl   $0xc010e616,0xc(%esp)
c0104ad4:	c0 
c0104ad5:	c7 44 24 08 ea e4 10 	movl   $0xc010e4ea,0x8(%esp)
c0104adc:	c0 
c0104add:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0104ae4:	00 
c0104ae5:	c7 04 24 ff e4 10 c0 	movl   $0xc010e4ff,(%esp)
c0104aec:	e8 14 b9 ff ff       	call   c0100405 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0104af1:	c7 04 24 78 e5 10 c0 	movl   $0xc010e578,(%esp)
c0104af8:	e8 b1 b7 ff ff       	call   c01002ae <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0104afd:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104b02:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0104b05:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104b0a:	83 f8 06             	cmp    $0x6,%eax
c0104b0d:	74 24                	je     c0104b33 <_fifo_check_swap+0x1d4>
c0104b0f:	c7 44 24 0c 25 e6 10 	movl   $0xc010e625,0xc(%esp)
c0104b16:	c0 
c0104b17:	c7 44 24 08 ea e4 10 	movl   $0xc010e4ea,0x8(%esp)
c0104b1e:	c0 
c0104b1f:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0104b26:	00 
c0104b27:	c7 04 24 ff e4 10 c0 	movl   $0xc010e4ff,(%esp)
c0104b2e:	e8 d2 b8 ff ff       	call   c0100405 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0104b33:	c7 04 24 c8 e5 10 c0 	movl   $0xc010e5c8,(%esp)
c0104b3a:	e8 6f b7 ff ff       	call   c01002ae <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0104b3f:	b8 00 20 00 00       	mov    $0x2000,%eax
c0104b44:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0104b47:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104b4c:	83 f8 07             	cmp    $0x7,%eax
c0104b4f:	74 24                	je     c0104b75 <_fifo_check_swap+0x216>
c0104b51:	c7 44 24 0c 34 e6 10 	movl   $0xc010e634,0xc(%esp)
c0104b58:	c0 
c0104b59:	c7 44 24 08 ea e4 10 	movl   $0xc010e4ea,0x8(%esp)
c0104b60:	c0 
c0104b61:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0104b68:	00 
c0104b69:	c7 04 24 ff e4 10 c0 	movl   $0xc010e4ff,(%esp)
c0104b70:	e8 90 b8 ff ff       	call   c0100405 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0104b75:	c7 04 24 40 e5 10 c0 	movl   $0xc010e540,(%esp)
c0104b7c:	e8 2d b7 ff ff       	call   c01002ae <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0104b81:	b8 00 30 00 00       	mov    $0x3000,%eax
c0104b86:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0104b89:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104b8e:	83 f8 08             	cmp    $0x8,%eax
c0104b91:	74 24                	je     c0104bb7 <_fifo_check_swap+0x258>
c0104b93:	c7 44 24 0c 43 e6 10 	movl   $0xc010e643,0xc(%esp)
c0104b9a:	c0 
c0104b9b:	c7 44 24 08 ea e4 10 	movl   $0xc010e4ea,0x8(%esp)
c0104ba2:	c0 
c0104ba3:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0104baa:	00 
c0104bab:	c7 04 24 ff e4 10 c0 	movl   $0xc010e4ff,(%esp)
c0104bb2:	e8 4e b8 ff ff       	call   c0100405 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0104bb7:	c7 04 24 a0 e5 10 c0 	movl   $0xc010e5a0,(%esp)
c0104bbe:	e8 eb b6 ff ff       	call   c01002ae <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0104bc3:	b8 00 40 00 00       	mov    $0x4000,%eax
c0104bc8:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0104bcb:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104bd0:	83 f8 09             	cmp    $0x9,%eax
c0104bd3:	74 24                	je     c0104bf9 <_fifo_check_swap+0x29a>
c0104bd5:	c7 44 24 0c 52 e6 10 	movl   $0xc010e652,0xc(%esp)
c0104bdc:	c0 
c0104bdd:	c7 44 24 08 ea e4 10 	movl   $0xc010e4ea,0x8(%esp)
c0104be4:	c0 
c0104be5:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c0104bec:	00 
c0104bed:	c7 04 24 ff e4 10 c0 	movl   $0xc010e4ff,(%esp)
c0104bf4:	e8 0c b8 ff ff       	call   c0100405 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0104bf9:	c7 04 24 f0 e5 10 c0 	movl   $0xc010e5f0,(%esp)
c0104c00:	e8 a9 b6 ff ff       	call   c01002ae <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0104c05:	b8 00 50 00 00       	mov    $0x5000,%eax
c0104c0a:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0104c0d:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104c12:	83 f8 0a             	cmp    $0xa,%eax
c0104c15:	74 24                	je     c0104c3b <_fifo_check_swap+0x2dc>
c0104c17:	c7 44 24 0c 61 e6 10 	movl   $0xc010e661,0xc(%esp)
c0104c1e:	c0 
c0104c1f:	c7 44 24 08 ea e4 10 	movl   $0xc010e4ea,0x8(%esp)
c0104c26:	c0 
c0104c27:	c7 44 24 04 76 00 00 	movl   $0x76,0x4(%esp)
c0104c2e:	00 
c0104c2f:	c7 04 24 ff e4 10 c0 	movl   $0xc010e4ff,(%esp)
c0104c36:	e8 ca b7 ff ff       	call   c0100405 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0104c3b:	c7 04 24 78 e5 10 c0 	movl   $0xc010e578,(%esp)
c0104c42:	e8 67 b6 ff ff       	call   c01002ae <cprintf>
    assert(*(unsigned char *)0x1000 == 0x0a);
c0104c47:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104c4c:	0f b6 00             	movzbl (%eax),%eax
c0104c4f:	3c 0a                	cmp    $0xa,%al
c0104c51:	74 24                	je     c0104c77 <_fifo_check_swap+0x318>
c0104c53:	c7 44 24 0c 74 e6 10 	movl   $0xc010e674,0xc(%esp)
c0104c5a:	c0 
c0104c5b:	c7 44 24 08 ea e4 10 	movl   $0xc010e4ea,0x8(%esp)
c0104c62:	c0 
c0104c63:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c0104c6a:	00 
c0104c6b:	c7 04 24 ff e4 10 c0 	movl   $0xc010e4ff,(%esp)
c0104c72:	e8 8e b7 ff ff       	call   c0100405 <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c0104c77:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104c7c:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c0104c7f:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104c84:	83 f8 0b             	cmp    $0xb,%eax
c0104c87:	74 24                	je     c0104cad <_fifo_check_swap+0x34e>
c0104c89:	c7 44 24 0c 95 e6 10 	movl   $0xc010e695,0xc(%esp)
c0104c90:	c0 
c0104c91:	c7 44 24 08 ea e4 10 	movl   $0xc010e4ea,0x8(%esp)
c0104c98:	c0 
c0104c99:	c7 44 24 04 7a 00 00 	movl   $0x7a,0x4(%esp)
c0104ca0:	00 
c0104ca1:	c7 04 24 ff e4 10 c0 	movl   $0xc010e4ff,(%esp)
c0104ca8:	e8 58 b7 ff ff       	call   c0100405 <__panic>
    return 0;
c0104cad:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104cb2:	c9                   	leave  
c0104cb3:	c3                   	ret    

c0104cb4 <_fifo_init>:


static int
_fifo_init(void)
{
c0104cb4:	55                   	push   %ebp
c0104cb5:	89 e5                	mov    %esp,%ebp
    return 0;
c0104cb7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104cbc:	5d                   	pop    %ebp
c0104cbd:	c3                   	ret    

c0104cbe <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0104cbe:	55                   	push   %ebp
c0104cbf:	89 e5                	mov    %esp,%ebp
    return 0;
c0104cc1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104cc6:	5d                   	pop    %ebp
c0104cc7:	c3                   	ret    

c0104cc8 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0104cc8:	55                   	push   %ebp
c0104cc9:	89 e5                	mov    %esp,%ebp
c0104ccb:	b8 00 00 00 00       	mov    $0x0,%eax
c0104cd0:	5d                   	pop    %ebp
c0104cd1:	c3                   	ret    

c0104cd2 <__intr_save>:
__intr_save(void) {
c0104cd2:	55                   	push   %ebp
c0104cd3:	89 e5                	mov    %esp,%ebp
c0104cd5:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104cd8:	9c                   	pushf  
c0104cd9:	58                   	pop    %eax
c0104cda:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104cdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104ce0:	25 00 02 00 00       	and    $0x200,%eax
c0104ce5:	85 c0                	test   %eax,%eax
c0104ce7:	74 0c                	je     c0104cf5 <__intr_save+0x23>
        intr_disable();
c0104ce9:	e8 2c d5 ff ff       	call   c010221a <intr_disable>
        return 1;
c0104cee:	b8 01 00 00 00       	mov    $0x1,%eax
c0104cf3:	eb 05                	jmp    c0104cfa <__intr_save+0x28>
    return 0;
c0104cf5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104cfa:	c9                   	leave  
c0104cfb:	c3                   	ret    

c0104cfc <__intr_restore>:
__intr_restore(bool flag) {
c0104cfc:	55                   	push   %ebp
c0104cfd:	89 e5                	mov    %esp,%ebp
c0104cff:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104d02:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104d06:	74 05                	je     c0104d0d <__intr_restore+0x11>
        intr_enable();
c0104d08:	e8 07 d5 ff ff       	call   c0102214 <intr_enable>
}
c0104d0d:	c9                   	leave  
c0104d0e:	c3                   	ret    

c0104d0f <page2ppn>:
page2ppn(struct Page *page) {
c0104d0f:	55                   	push   %ebp
c0104d10:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104d12:	8b 55 08             	mov    0x8(%ebp),%edx
c0104d15:	a1 b8 71 1c c0       	mov    0xc01c71b8,%eax
c0104d1a:	29 c2                	sub    %eax,%edx
c0104d1c:	89 d0                	mov    %edx,%eax
c0104d1e:	c1 f8 05             	sar    $0x5,%eax
}
c0104d21:	5d                   	pop    %ebp
c0104d22:	c3                   	ret    

c0104d23 <page2pa>:
page2pa(struct Page *page) {
c0104d23:	55                   	push   %ebp
c0104d24:	89 e5                	mov    %esp,%ebp
c0104d26:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104d29:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d2c:	89 04 24             	mov    %eax,(%esp)
c0104d2f:	e8 db ff ff ff       	call   c0104d0f <page2ppn>
c0104d34:	c1 e0 0c             	shl    $0xc,%eax
}
c0104d37:	c9                   	leave  
c0104d38:	c3                   	ret    

c0104d39 <pa2page>:
pa2page(uintptr_t pa) {
c0104d39:	55                   	push   %ebp
c0104d3a:	89 e5                	mov    %esp,%ebp
c0104d3c:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104d3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d42:	c1 e8 0c             	shr    $0xc,%eax
c0104d45:	89 c2                	mov    %eax,%edx
c0104d47:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0104d4c:	39 c2                	cmp    %eax,%edx
c0104d4e:	72 1c                	jb     c0104d6c <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104d50:	c7 44 24 08 b8 e6 10 	movl   $0xc010e6b8,0x8(%esp)
c0104d57:	c0 
c0104d58:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104d5f:	00 
c0104d60:	c7 04 24 d7 e6 10 c0 	movl   $0xc010e6d7,(%esp)
c0104d67:	e8 99 b6 ff ff       	call   c0100405 <__panic>
    return &pages[PPN(pa)];
c0104d6c:	a1 b8 71 1c c0       	mov    0xc01c71b8,%eax
c0104d71:	8b 55 08             	mov    0x8(%ebp),%edx
c0104d74:	c1 ea 0c             	shr    $0xc,%edx
c0104d77:	c1 e2 05             	shl    $0x5,%edx
c0104d7a:	01 d0                	add    %edx,%eax
}
c0104d7c:	c9                   	leave  
c0104d7d:	c3                   	ret    

c0104d7e <page2kva>:
page2kva(struct Page *page) {
c0104d7e:	55                   	push   %ebp
c0104d7f:	89 e5                	mov    %esp,%ebp
c0104d81:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104d84:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d87:	89 04 24             	mov    %eax,(%esp)
c0104d8a:	e8 94 ff ff ff       	call   c0104d23 <page2pa>
c0104d8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d95:	c1 e8 0c             	shr    $0xc,%eax
c0104d98:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104d9b:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0104da0:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104da3:	72 23                	jb     c0104dc8 <page2kva+0x4a>
c0104da5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104da8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104dac:	c7 44 24 08 e8 e6 10 	movl   $0xc010e6e8,0x8(%esp)
c0104db3:	c0 
c0104db4:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104dbb:	00 
c0104dbc:	c7 04 24 d7 e6 10 c0 	movl   $0xc010e6d7,(%esp)
c0104dc3:	e8 3d b6 ff ff       	call   c0100405 <__panic>
c0104dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dcb:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104dd0:	c9                   	leave  
c0104dd1:	c3                   	ret    

c0104dd2 <kva2page>:
kva2page(void *kva) {
c0104dd2:	55                   	push   %ebp
c0104dd3:	89 e5                	mov    %esp,%ebp
c0104dd5:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c0104dd8:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ddb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104dde:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0104de5:	77 23                	ja     c0104e0a <kva2page+0x38>
c0104de7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dea:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104dee:	c7 44 24 08 0c e7 10 	movl   $0xc010e70c,0x8(%esp)
c0104df5:	c0 
c0104df6:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0104dfd:	00 
c0104dfe:	c7 04 24 d7 e6 10 c0 	movl   $0xc010e6d7,(%esp)
c0104e05:	e8 fb b5 ff ff       	call   c0100405 <__panic>
c0104e0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e0d:	05 00 00 00 40       	add    $0x40000000,%eax
c0104e12:	89 04 24             	mov    %eax,(%esp)
c0104e15:	e8 1f ff ff ff       	call   c0104d39 <pa2page>
}
c0104e1a:	c9                   	leave  
c0104e1b:	c3                   	ret    

c0104e1c <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0104e1c:	55                   	push   %ebp
c0104e1d:	89 e5                	mov    %esp,%ebp
c0104e1f:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c0104e22:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104e25:	ba 01 00 00 00       	mov    $0x1,%edx
c0104e2a:	89 c1                	mov    %eax,%ecx
c0104e2c:	d3 e2                	shl    %cl,%edx
c0104e2e:	89 d0                	mov    %edx,%eax
c0104e30:	89 04 24             	mov    %eax,(%esp)
c0104e33:	e8 77 26 00 00       	call   c01074af <alloc_pages>
c0104e38:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0104e3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104e3f:	75 07                	jne    c0104e48 <__slob_get_free_pages+0x2c>
    return NULL;
c0104e41:	b8 00 00 00 00       	mov    $0x0,%eax
c0104e46:	eb 0b                	jmp    c0104e53 <__slob_get_free_pages+0x37>
  return page2kva(page);
c0104e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e4b:	89 04 24             	mov    %eax,(%esp)
c0104e4e:	e8 2b ff ff ff       	call   c0104d7e <page2kva>
}
c0104e53:	c9                   	leave  
c0104e54:	c3                   	ret    

c0104e55 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104e55:	55                   	push   %ebp
c0104e56:	89 e5                	mov    %esp,%ebp
c0104e58:	53                   	push   %ebx
c0104e59:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c0104e5c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104e5f:	ba 01 00 00 00       	mov    $0x1,%edx
c0104e64:	89 c1                	mov    %eax,%ecx
c0104e66:	d3 e2                	shl    %cl,%edx
c0104e68:	89 d0                	mov    %edx,%eax
c0104e6a:	89 c3                	mov    %eax,%ebx
c0104e6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e6f:	89 04 24             	mov    %eax,(%esp)
c0104e72:	e8 5b ff ff ff       	call   c0104dd2 <kva2page>
c0104e77:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0104e7b:	89 04 24             	mov    %eax,(%esp)
c0104e7e:	e8 97 26 00 00       	call   c010751a <free_pages>
}
c0104e83:	83 c4 14             	add    $0x14,%esp
c0104e86:	5b                   	pop    %ebx
c0104e87:	5d                   	pop    %ebp
c0104e88:	c3                   	ret    

c0104e89 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104e89:	55                   	push   %ebp
c0104e8a:	89 e5                	mov    %esp,%ebp
c0104e8c:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0104e8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e92:	83 c0 08             	add    $0x8,%eax
c0104e95:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0104e9a:	76 24                	jbe    c0104ec0 <slob_alloc+0x37>
c0104e9c:	c7 44 24 0c 30 e7 10 	movl   $0xc010e730,0xc(%esp)
c0104ea3:	c0 
c0104ea4:	c7 44 24 08 4f e7 10 	movl   $0xc010e74f,0x8(%esp)
c0104eab:	c0 
c0104eac:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0104eb3:	00 
c0104eb4:	c7 04 24 64 e7 10 c0 	movl   $0xc010e764,(%esp)
c0104ebb:	e8 45 b5 ff ff       	call   c0100405 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0104ec0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0104ec7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0104ece:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ed1:	83 c0 07             	add    $0x7,%eax
c0104ed4:	c1 e8 03             	shr    $0x3,%eax
c0104ed7:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c0104eda:	e8 f3 fd ff ff       	call   c0104cd2 <__intr_save>
c0104edf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0104ee2:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104ee7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104eea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104eed:	8b 40 04             	mov    0x4(%eax),%eax
c0104ef0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0104ef3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0104ef7:	74 25                	je     c0104f1e <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0104ef9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104efc:	8b 45 10             	mov    0x10(%ebp),%eax
c0104eff:	01 d0                	add    %edx,%eax
c0104f01:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104f04:	8b 45 10             	mov    0x10(%ebp),%eax
c0104f07:	f7 d8                	neg    %eax
c0104f09:	21 d0                	and    %edx,%eax
c0104f0b:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0104f0e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104f11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f14:	29 c2                	sub    %eax,%edx
c0104f16:	89 d0                	mov    %edx,%eax
c0104f18:	c1 f8 03             	sar    $0x3,%eax
c0104f1b:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0104f1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f21:	8b 00                	mov    (%eax),%eax
c0104f23:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104f26:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104f29:	01 ca                	add    %ecx,%edx
c0104f2b:	39 d0                	cmp    %edx,%eax
c0104f2d:	0f 8c aa 00 00 00    	jl     c0104fdd <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c0104f33:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104f37:	74 38                	je     c0104f71 <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c0104f39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f3c:	8b 00                	mov    (%eax),%eax
c0104f3e:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0104f41:	89 c2                	mov    %eax,%edx
c0104f43:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104f46:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104f48:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f4b:	8b 50 04             	mov    0x4(%eax),%edx
c0104f4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104f51:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104f54:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f57:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104f5a:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104f5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f60:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104f63:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104f65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f68:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104f6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104f6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104f71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f74:	8b 00                	mov    (%eax),%eax
c0104f76:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104f79:	75 0e                	jne    c0104f89 <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c0104f7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f7e:	8b 50 04             	mov    0x4(%eax),%edx
c0104f81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f84:	89 50 04             	mov    %edx,0x4(%eax)
c0104f87:	eb 3c                	jmp    c0104fc5 <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c0104f89:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104f8c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104f93:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f96:	01 c2                	add    %eax,%edx
c0104f98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f9b:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0104f9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fa1:	8b 40 04             	mov    0x4(%eax),%eax
c0104fa4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104fa7:	8b 12                	mov    (%edx),%edx
c0104fa9:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0104fac:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0104fae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fb1:	8b 40 04             	mov    0x4(%eax),%eax
c0104fb4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104fb7:	8b 52 04             	mov    0x4(%edx),%edx
c0104fba:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0104fbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fc0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104fc3:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0104fc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fc8:	a3 08 1a 13 c0       	mov    %eax,0xc0131a08
			spin_unlock_irqrestore(&slob_lock, flags);
c0104fcd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104fd0:	89 04 24             	mov    %eax,(%esp)
c0104fd3:	e8 24 fd ff ff       	call   c0104cfc <__intr_restore>
			return cur;
c0104fd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fdb:	eb 7f                	jmp    c010505c <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c0104fdd:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104fe2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104fe5:	75 61                	jne    c0105048 <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c0104fe7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104fea:	89 04 24             	mov    %eax,(%esp)
c0104fed:	e8 0a fd ff ff       	call   c0104cfc <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0104ff2:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104ff9:	75 07                	jne    c0105002 <slob_alloc+0x179>
				return 0;
c0104ffb:	b8 00 00 00 00       	mov    $0x0,%eax
c0105000:	eb 5a                	jmp    c010505c <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0105002:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105009:	00 
c010500a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010500d:	89 04 24             	mov    %eax,(%esp)
c0105010:	e8 07 fe ff ff       	call   c0104e1c <__slob_get_free_pages>
c0105015:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0105018:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010501c:	75 07                	jne    c0105025 <slob_alloc+0x19c>
				return 0;
c010501e:	b8 00 00 00 00       	mov    $0x0,%eax
c0105023:	eb 37                	jmp    c010505c <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c0105025:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010502c:	00 
c010502d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105030:	89 04 24             	mov    %eax,(%esp)
c0105033:	e8 26 00 00 00       	call   c010505e <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0105038:	e8 95 fc ff ff       	call   c0104cd2 <__intr_save>
c010503d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0105040:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0105045:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0105048:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010504b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010504e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105051:	8b 40 04             	mov    0x4(%eax),%eax
c0105054:	89 45 f0             	mov    %eax,-0x10(%ebp)
		}
	}
c0105057:	e9 97 fe ff ff       	jmp    c0104ef3 <slob_alloc+0x6a>
}
c010505c:	c9                   	leave  
c010505d:	c3                   	ret    

c010505e <slob_free>:

static void slob_free(void *block, int size)
{
c010505e:	55                   	push   %ebp
c010505f:	89 e5                	mov    %esp,%ebp
c0105061:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0105064:	8b 45 08             	mov    0x8(%ebp),%eax
c0105067:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c010506a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010506e:	75 05                	jne    c0105075 <slob_free+0x17>
		return;
c0105070:	e9 ff 00 00 00       	jmp    c0105174 <slob_free+0x116>

	if (size)
c0105075:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105079:	74 10                	je     c010508b <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c010507b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010507e:	83 c0 07             	add    $0x7,%eax
c0105081:	c1 e8 03             	shr    $0x3,%eax
c0105084:	89 c2                	mov    %eax,%edx
c0105086:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105089:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c010508b:	e8 42 fc ff ff       	call   c0104cd2 <__intr_save>
c0105090:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0105093:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0105098:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010509b:	eb 27                	jmp    c01050c4 <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c010509d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050a0:	8b 40 04             	mov    0x4(%eax),%eax
c01050a3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01050a6:	77 13                	ja     c01050bb <slob_free+0x5d>
c01050a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050ab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01050ae:	77 27                	ja     c01050d7 <slob_free+0x79>
c01050b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050b3:	8b 40 04             	mov    0x4(%eax),%eax
c01050b6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01050b9:	77 1c                	ja     c01050d7 <slob_free+0x79>
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c01050bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050be:	8b 40 04             	mov    0x4(%eax),%eax
c01050c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01050c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050c7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01050ca:	76 d1                	jbe    c010509d <slob_free+0x3f>
c01050cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050cf:	8b 40 04             	mov    0x4(%eax),%eax
c01050d2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01050d5:	76 c6                	jbe    c010509d <slob_free+0x3f>
			break;

	if (b + b->units == cur->next) {
c01050d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050da:	8b 00                	mov    (%eax),%eax
c01050dc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01050e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050e6:	01 c2                	add    %eax,%edx
c01050e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050eb:	8b 40 04             	mov    0x4(%eax),%eax
c01050ee:	39 c2                	cmp    %eax,%edx
c01050f0:	75 25                	jne    c0105117 <slob_free+0xb9>
		b->units += cur->next->units;
c01050f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050f5:	8b 10                	mov    (%eax),%edx
c01050f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050fa:	8b 40 04             	mov    0x4(%eax),%eax
c01050fd:	8b 00                	mov    (%eax),%eax
c01050ff:	01 c2                	add    %eax,%edx
c0105101:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105104:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0105106:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105109:	8b 40 04             	mov    0x4(%eax),%eax
c010510c:	8b 50 04             	mov    0x4(%eax),%edx
c010510f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105112:	89 50 04             	mov    %edx,0x4(%eax)
c0105115:	eb 0c                	jmp    c0105123 <slob_free+0xc5>
	} else
		b->next = cur->next;
c0105117:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010511a:	8b 50 04             	mov    0x4(%eax),%edx
c010511d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105120:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0105123:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105126:	8b 00                	mov    (%eax),%eax
c0105128:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010512f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105132:	01 d0                	add    %edx,%eax
c0105134:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0105137:	75 1f                	jne    c0105158 <slob_free+0xfa>
		cur->units += b->units;
c0105139:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010513c:	8b 10                	mov    (%eax),%edx
c010513e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105141:	8b 00                	mov    (%eax),%eax
c0105143:	01 c2                	add    %eax,%edx
c0105145:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105148:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c010514a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010514d:	8b 50 04             	mov    0x4(%eax),%edx
c0105150:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105153:	89 50 04             	mov    %edx,0x4(%eax)
c0105156:	eb 09                	jmp    c0105161 <slob_free+0x103>
	} else
		cur->next = b;
c0105158:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010515b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010515e:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0105161:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105164:	a3 08 1a 13 c0       	mov    %eax,0xc0131a08

	spin_unlock_irqrestore(&slob_lock, flags);
c0105169:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010516c:	89 04 24             	mov    %eax,(%esp)
c010516f:	e8 88 fb ff ff       	call   c0104cfc <__intr_restore>
}
c0105174:	c9                   	leave  
c0105175:	c3                   	ret    

c0105176 <slob_init>:



void
slob_init(void) {
c0105176:	55                   	push   %ebp
c0105177:	89 e5                	mov    %esp,%ebp
c0105179:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c010517c:	c7 04 24 76 e7 10 c0 	movl   $0xc010e776,(%esp)
c0105183:	e8 26 b1 ff ff       	call   c01002ae <cprintf>
}
c0105188:	c9                   	leave  
c0105189:	c3                   	ret    

c010518a <kmalloc_init>:

inline void 
kmalloc_init(void) {
c010518a:	55                   	push   %ebp
c010518b:	89 e5                	mov    %esp,%ebp
c010518d:	83 ec 18             	sub    $0x18,%esp
    slob_init();
c0105190:	e8 e1 ff ff ff       	call   c0105176 <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0105195:	c7 04 24 8a e7 10 c0 	movl   $0xc010e78a,(%esp)
c010519c:	e8 0d b1 ff ff       	call   c01002ae <cprintf>
}
c01051a1:	c9                   	leave  
c01051a2:	c3                   	ret    

c01051a3 <slob_allocated>:

size_t
slob_allocated(void) {
c01051a3:	55                   	push   %ebp
c01051a4:	89 e5                	mov    %esp,%ebp
  return 0;
c01051a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01051ab:	5d                   	pop    %ebp
c01051ac:	c3                   	ret    

c01051ad <kallocated>:

size_t
kallocated(void) {
c01051ad:	55                   	push   %ebp
c01051ae:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c01051b0:	e8 ee ff ff ff       	call   c01051a3 <slob_allocated>
}
c01051b5:	5d                   	pop    %ebp
c01051b6:	c3                   	ret    

c01051b7 <find_order>:

static int find_order(int size)
{
c01051b7:	55                   	push   %ebp
c01051b8:	89 e5                	mov    %esp,%ebp
c01051ba:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c01051bd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c01051c4:	eb 07                	jmp    c01051cd <find_order+0x16>
		order++;
c01051c6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c01051ca:	d1 7d 08             	sarl   0x8(%ebp)
c01051cd:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c01051d4:	7f f0                	jg     c01051c6 <find_order+0xf>
	return order;
c01051d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01051d9:	c9                   	leave  
c01051da:	c3                   	ret    

c01051db <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c01051db:	55                   	push   %ebp
c01051dc:	89 e5                	mov    %esp,%ebp
c01051de:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c01051e1:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c01051e8:	77 38                	ja     c0105222 <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c01051ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01051ed:	8d 50 08             	lea    0x8(%eax),%edx
c01051f0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01051f7:	00 
c01051f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01051fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01051ff:	89 14 24             	mov    %edx,(%esp)
c0105202:	e8 82 fc ff ff       	call   c0104e89 <slob_alloc>
c0105207:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c010520a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010520e:	74 08                	je     c0105218 <__kmalloc+0x3d>
c0105210:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105213:	83 c0 08             	add    $0x8,%eax
c0105216:	eb 05                	jmp    c010521d <__kmalloc+0x42>
c0105218:	b8 00 00 00 00       	mov    $0x0,%eax
c010521d:	e9 a6 00 00 00       	jmp    c01052c8 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0105222:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105229:	00 
c010522a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010522d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105231:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0105238:	e8 4c fc ff ff       	call   c0104e89 <slob_alloc>
c010523d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0105240:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105244:	75 07                	jne    c010524d <__kmalloc+0x72>
		return 0;
c0105246:	b8 00 00 00 00       	mov    $0x0,%eax
c010524b:	eb 7b                	jmp    c01052c8 <__kmalloc+0xed>

	bb->order = find_order(size);
c010524d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105250:	89 04 24             	mov    %eax,(%esp)
c0105253:	e8 5f ff ff ff       	call   c01051b7 <find_order>
c0105258:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010525b:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c010525d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105260:	8b 00                	mov    (%eax),%eax
c0105262:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105266:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105269:	89 04 24             	mov    %eax,(%esp)
c010526c:	e8 ab fb ff ff       	call   c0104e1c <__slob_get_free_pages>
c0105271:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105274:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0105277:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010527a:	8b 40 04             	mov    0x4(%eax),%eax
c010527d:	85 c0                	test   %eax,%eax
c010527f:	74 2f                	je     c01052b0 <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0105281:	e8 4c fa ff ff       	call   c0104cd2 <__intr_save>
c0105286:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0105289:	8b 15 68 4f 1c c0    	mov    0xc01c4f68,%edx
c010528f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105292:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0105295:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105298:	a3 68 4f 1c c0       	mov    %eax,0xc01c4f68
		spin_unlock_irqrestore(&block_lock, flags);
c010529d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01052a0:	89 04 24             	mov    %eax,(%esp)
c01052a3:	e8 54 fa ff ff       	call   c0104cfc <__intr_restore>
		return bb->pages;
c01052a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01052ab:	8b 40 04             	mov    0x4(%eax),%eax
c01052ae:	eb 18                	jmp    c01052c8 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c01052b0:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c01052b7:	00 
c01052b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01052bb:	89 04 24             	mov    %eax,(%esp)
c01052be:	e8 9b fd ff ff       	call   c010505e <slob_free>
	return 0;
c01052c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01052c8:	c9                   	leave  
c01052c9:	c3                   	ret    

c01052ca <kmalloc>:

void *
kmalloc(size_t size)
{
c01052ca:	55                   	push   %ebp
c01052cb:	89 e5                	mov    %esp,%ebp
c01052cd:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c01052d0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01052d7:	00 
c01052d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01052db:	89 04 24             	mov    %eax,(%esp)
c01052de:	e8 f8 fe ff ff       	call   c01051db <__kmalloc>
}
c01052e3:	c9                   	leave  
c01052e4:	c3                   	ret    

c01052e5 <kfree>:


void kfree(void *block)
{
c01052e5:	55                   	push   %ebp
c01052e6:	89 e5                	mov    %esp,%ebp
c01052e8:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c01052eb:	c7 45 f0 68 4f 1c c0 	movl   $0xc01c4f68,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c01052f2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01052f6:	75 05                	jne    c01052fd <kfree+0x18>
		return;
c01052f8:	e9 a2 00 00 00       	jmp    c010539f <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c01052fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0105300:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105305:	85 c0                	test   %eax,%eax
c0105307:	75 7f                	jne    c0105388 <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0105309:	e8 c4 f9 ff ff       	call   c0104cd2 <__intr_save>
c010530e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0105311:	a1 68 4f 1c c0       	mov    0xc01c4f68,%eax
c0105316:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105319:	eb 5c                	jmp    c0105377 <kfree+0x92>
			if (bb->pages == block) {
c010531b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010531e:	8b 40 04             	mov    0x4(%eax),%eax
c0105321:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105324:	75 3f                	jne    c0105365 <kfree+0x80>
				*last = bb->next;
c0105326:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105329:	8b 50 08             	mov    0x8(%eax),%edx
c010532c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010532f:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0105331:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105334:	89 04 24             	mov    %eax,(%esp)
c0105337:	e8 c0 f9 ff ff       	call   c0104cfc <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c010533c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010533f:	8b 10                	mov    (%eax),%edx
c0105341:	8b 45 08             	mov    0x8(%ebp),%eax
c0105344:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105348:	89 04 24             	mov    %eax,(%esp)
c010534b:	e8 05 fb ff ff       	call   c0104e55 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0105350:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0105357:	00 
c0105358:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010535b:	89 04 24             	mov    %eax,(%esp)
c010535e:	e8 fb fc ff ff       	call   c010505e <slob_free>
				return;
c0105363:	eb 3a                	jmp    c010539f <kfree+0xba>
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0105365:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105368:	83 c0 08             	add    $0x8,%eax
c010536b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010536e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105371:	8b 40 08             	mov    0x8(%eax),%eax
c0105374:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105377:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010537b:	75 9e                	jne    c010531b <kfree+0x36>
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c010537d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105380:	89 04 24             	mov    %eax,(%esp)
c0105383:	e8 74 f9 ff ff       	call   c0104cfc <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0105388:	8b 45 08             	mov    0x8(%ebp),%eax
c010538b:	83 e8 08             	sub    $0x8,%eax
c010538e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105395:	00 
c0105396:	89 04 24             	mov    %eax,(%esp)
c0105399:	e8 c0 fc ff ff       	call   c010505e <slob_free>
	return;
c010539e:	90                   	nop
}
c010539f:	c9                   	leave  
c01053a0:	c3                   	ret    

c01053a1 <ksize>:


unsigned int ksize(const void *block)
{
c01053a1:	55                   	push   %ebp
c01053a2:	89 e5                	mov    %esp,%ebp
c01053a4:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c01053a7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01053ab:	75 07                	jne    c01053b4 <ksize+0x13>
		return 0;
c01053ad:	b8 00 00 00 00       	mov    $0x0,%eax
c01053b2:	eb 6b                	jmp    c010541f <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c01053b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01053b7:	25 ff 0f 00 00       	and    $0xfff,%eax
c01053bc:	85 c0                	test   %eax,%eax
c01053be:	75 54                	jne    c0105414 <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c01053c0:	e8 0d f9 ff ff       	call   c0104cd2 <__intr_save>
c01053c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c01053c8:	a1 68 4f 1c c0       	mov    0xc01c4f68,%eax
c01053cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01053d0:	eb 31                	jmp    c0105403 <ksize+0x62>
			if (bb->pages == block) {
c01053d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01053d5:	8b 40 04             	mov    0x4(%eax),%eax
c01053d8:	3b 45 08             	cmp    0x8(%ebp),%eax
c01053db:	75 1d                	jne    c01053fa <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c01053dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01053e0:	89 04 24             	mov    %eax,(%esp)
c01053e3:	e8 14 f9 ff ff       	call   c0104cfc <__intr_restore>
				return PAGE_SIZE << bb->order;
c01053e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01053eb:	8b 00                	mov    (%eax),%eax
c01053ed:	ba 00 10 00 00       	mov    $0x1000,%edx
c01053f2:	89 c1                	mov    %eax,%ecx
c01053f4:	d3 e2                	shl    %cl,%edx
c01053f6:	89 d0                	mov    %edx,%eax
c01053f8:	eb 25                	jmp    c010541f <ksize+0x7e>
		for (bb = bigblocks; bb; bb = bb->next)
c01053fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01053fd:	8b 40 08             	mov    0x8(%eax),%eax
c0105400:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105403:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105407:	75 c9                	jne    c01053d2 <ksize+0x31>
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0105409:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010540c:	89 04 24             	mov    %eax,(%esp)
c010540f:	e8 e8 f8 ff ff       	call   c0104cfc <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0105414:	8b 45 08             	mov    0x8(%ebp),%eax
c0105417:	83 e8 08             	sub    $0x8,%eax
c010541a:	8b 00                	mov    (%eax),%eax
c010541c:	c1 e0 03             	shl    $0x3,%eax
}
c010541f:	c9                   	leave  
c0105420:	c3                   	ret    

c0105421 <pa2page>:
pa2page(uintptr_t pa) {
c0105421:	55                   	push   %ebp
c0105422:	89 e5                	mov    %esp,%ebp
c0105424:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0105427:	8b 45 08             	mov    0x8(%ebp),%eax
c010542a:	c1 e8 0c             	shr    $0xc,%eax
c010542d:	89 c2                	mov    %eax,%edx
c010542f:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0105434:	39 c2                	cmp    %eax,%edx
c0105436:	72 1c                	jb     c0105454 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0105438:	c7 44 24 08 a8 e7 10 	movl   $0xc010e7a8,0x8(%esp)
c010543f:	c0 
c0105440:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0105447:	00 
c0105448:	c7 04 24 c7 e7 10 c0 	movl   $0xc010e7c7,(%esp)
c010544f:	e8 b1 af ff ff       	call   c0100405 <__panic>
    return &pages[PPN(pa)];
c0105454:	a1 b8 71 1c c0       	mov    0xc01c71b8,%eax
c0105459:	8b 55 08             	mov    0x8(%ebp),%edx
c010545c:	c1 ea 0c             	shr    $0xc,%edx
c010545f:	c1 e2 05             	shl    $0x5,%edx
c0105462:	01 d0                	add    %edx,%eax
}
c0105464:	c9                   	leave  
c0105465:	c3                   	ret    

c0105466 <pte2page>:
pte2page(pte_t pte) {
c0105466:	55                   	push   %ebp
c0105467:	89 e5                	mov    %esp,%ebp
c0105469:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c010546c:	8b 45 08             	mov    0x8(%ebp),%eax
c010546f:	83 e0 01             	and    $0x1,%eax
c0105472:	85 c0                	test   %eax,%eax
c0105474:	75 1c                	jne    c0105492 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0105476:	c7 44 24 08 d8 e7 10 	movl   $0xc010e7d8,0x8(%esp)
c010547d:	c0 
c010547e:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0105485:	00 
c0105486:	c7 04 24 c7 e7 10 c0 	movl   $0xc010e7c7,(%esp)
c010548d:	e8 73 af ff ff       	call   c0100405 <__panic>
    return pa2page(PTE_ADDR(pte));
c0105492:	8b 45 08             	mov    0x8(%ebp),%eax
c0105495:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010549a:	89 04 24             	mov    %eax,(%esp)
c010549d:	e8 7f ff ff ff       	call   c0105421 <pa2page>
}
c01054a2:	c9                   	leave  
c01054a3:	c3                   	ret    

c01054a4 <pde2page>:
pde2page(pde_t pde) {
c01054a4:	55                   	push   %ebp
c01054a5:	89 e5                	mov    %esp,%ebp
c01054a7:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c01054aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01054ad:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01054b2:	89 04 24             	mov    %eax,(%esp)
c01054b5:	e8 67 ff ff ff       	call   c0105421 <pa2page>
}
c01054ba:	c9                   	leave  
c01054bb:	c3                   	ret    

c01054bc <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c01054bc:	55                   	push   %ebp
c01054bd:	89 e5                	mov    %esp,%ebp
c01054bf:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c01054c2:	e8 51 4b 00 00       	call   c010a018 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c01054c7:	a1 7c 71 1c c0       	mov    0xc01c717c,%eax
c01054cc:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c01054d1:	76 0c                	jbe    c01054df <swap_init+0x23>
c01054d3:	a1 7c 71 1c c0       	mov    0xc01c717c,%eax
c01054d8:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c01054dd:	76 25                	jbe    c0105504 <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c01054df:	a1 7c 71 1c c0       	mov    0xc01c717c,%eax
c01054e4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01054e8:	c7 44 24 08 f9 e7 10 	movl   $0xc010e7f9,0x8(%esp)
c01054ef:	c0 
c01054f0:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c01054f7:	00 
c01054f8:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c01054ff:	e8 01 af ff ff       	call   c0100405 <__panic>
     }
     

     sm = &swap_manager_fifo;
c0105504:	c7 05 74 4f 1c c0 e0 	movl   $0xc01319e0,0xc01c4f74
c010550b:	19 13 c0 
     int r = sm->init();
c010550e:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c0105513:	8b 40 04             	mov    0x4(%eax),%eax
c0105516:	ff d0                	call   *%eax
c0105518:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c010551b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010551f:	75 26                	jne    c0105547 <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0105521:	c7 05 6c 4f 1c c0 01 	movl   $0x1,0xc01c4f6c
c0105528:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c010552b:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c0105530:	8b 00                	mov    (%eax),%eax
c0105532:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105536:	c7 04 24 23 e8 10 c0 	movl   $0xc010e823,(%esp)
c010553d:	e8 6c ad ff ff       	call   c01002ae <cprintf>
          check_swap();
c0105542:	e8 a4 04 00 00       	call   c01059eb <check_swap>
     }

     return r;
c0105547:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010554a:	c9                   	leave  
c010554b:	c3                   	ret    

c010554c <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c010554c:	55                   	push   %ebp
c010554d:	89 e5                	mov    %esp,%ebp
c010554f:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0105552:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c0105557:	8b 40 08             	mov    0x8(%eax),%eax
c010555a:	8b 55 08             	mov    0x8(%ebp),%edx
c010555d:	89 14 24             	mov    %edx,(%esp)
c0105560:	ff d0                	call   *%eax
}
c0105562:	c9                   	leave  
c0105563:	c3                   	ret    

c0105564 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0105564:	55                   	push   %ebp
c0105565:	89 e5                	mov    %esp,%ebp
c0105567:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c010556a:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c010556f:	8b 40 0c             	mov    0xc(%eax),%eax
c0105572:	8b 55 08             	mov    0x8(%ebp),%edx
c0105575:	89 14 24             	mov    %edx,(%esp)
c0105578:	ff d0                	call   *%eax
}
c010557a:	c9                   	leave  
c010557b:	c3                   	ret    

c010557c <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c010557c:	55                   	push   %ebp
c010557d:	89 e5                	mov    %esp,%ebp
c010557f:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0105582:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c0105587:	8b 40 10             	mov    0x10(%eax),%eax
c010558a:	8b 55 14             	mov    0x14(%ebp),%edx
c010558d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0105591:	8b 55 10             	mov    0x10(%ebp),%edx
c0105594:	89 54 24 08          	mov    %edx,0x8(%esp)
c0105598:	8b 55 0c             	mov    0xc(%ebp),%edx
c010559b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010559f:	8b 55 08             	mov    0x8(%ebp),%edx
c01055a2:	89 14 24             	mov    %edx,(%esp)
c01055a5:	ff d0                	call   *%eax
}
c01055a7:	c9                   	leave  
c01055a8:	c3                   	ret    

c01055a9 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c01055a9:	55                   	push   %ebp
c01055aa:	89 e5                	mov    %esp,%ebp
c01055ac:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c01055af:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c01055b4:	8b 40 14             	mov    0x14(%eax),%eax
c01055b7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01055ba:	89 54 24 04          	mov    %edx,0x4(%esp)
c01055be:	8b 55 08             	mov    0x8(%ebp),%edx
c01055c1:	89 14 24             	mov    %edx,(%esp)
c01055c4:	ff d0                	call   *%eax
}
c01055c6:	c9                   	leave  
c01055c7:	c3                   	ret    

c01055c8 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c01055c8:	55                   	push   %ebp
c01055c9:	89 e5                	mov    %esp,%ebp
c01055cb:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c01055ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01055d5:	e9 5a 01 00 00       	jmp    c0105734 <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c01055da:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c01055df:	8b 40 18             	mov    0x18(%eax),%eax
c01055e2:	8b 55 10             	mov    0x10(%ebp),%edx
c01055e5:	89 54 24 08          	mov    %edx,0x8(%esp)
c01055e9:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c01055ec:	89 54 24 04          	mov    %edx,0x4(%esp)
c01055f0:	8b 55 08             	mov    0x8(%ebp),%edx
c01055f3:	89 14 24             	mov    %edx,(%esp)
c01055f6:	ff d0                	call   *%eax
c01055f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c01055fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01055ff:	74 18                	je     c0105619 <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0105601:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105604:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105608:	c7 04 24 38 e8 10 c0 	movl   $0xc010e838,(%esp)
c010560f:	e8 9a ac ff ff       	call   c01002ae <cprintf>
c0105614:	e9 27 01 00 00       	jmp    c0105740 <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0105619:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010561c:	8b 40 1c             	mov    0x1c(%eax),%eax
c010561f:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0105622:	8b 45 08             	mov    0x8(%ebp),%eax
c0105625:	8b 40 0c             	mov    0xc(%eax),%eax
c0105628:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010562f:	00 
c0105630:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105633:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105637:	89 04 24             	mov    %eax,(%esp)
c010563a:	e8 54 25 00 00       	call   c0107b93 <get_pte>
c010563f:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0105642:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105645:	8b 00                	mov    (%eax),%eax
c0105647:	83 e0 01             	and    $0x1,%eax
c010564a:	85 c0                	test   %eax,%eax
c010564c:	75 24                	jne    c0105672 <swap_out+0xaa>
c010564e:	c7 44 24 0c 65 e8 10 	movl   $0xc010e865,0xc(%esp)
c0105655:	c0 
c0105656:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c010565d:	c0 
c010565e:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0105665:	00 
c0105666:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c010566d:	e8 93 ad ff ff       	call   c0100405 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0105672:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105675:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105678:	8b 52 1c             	mov    0x1c(%edx),%edx
c010567b:	c1 ea 0c             	shr    $0xc,%edx
c010567e:	83 c2 01             	add    $0x1,%edx
c0105681:	c1 e2 08             	shl    $0x8,%edx
c0105684:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105688:	89 14 24             	mov    %edx,(%esp)
c010568b:	e8 42 4a 00 00       	call   c010a0d2 <swapfs_write>
c0105690:	85 c0                	test   %eax,%eax
c0105692:	74 34                	je     c01056c8 <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c0105694:	c7 04 24 8f e8 10 c0 	movl   $0xc010e88f,(%esp)
c010569b:	e8 0e ac ff ff       	call   c01002ae <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c01056a0:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c01056a5:	8b 40 10             	mov    0x10(%eax),%eax
c01056a8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01056ab:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01056b2:	00 
c01056b3:	89 54 24 08          	mov    %edx,0x8(%esp)
c01056b7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01056ba:	89 54 24 04          	mov    %edx,0x4(%esp)
c01056be:	8b 55 08             	mov    0x8(%ebp),%edx
c01056c1:	89 14 24             	mov    %edx,(%esp)
c01056c4:	ff d0                	call   *%eax
c01056c6:	eb 68                	jmp    c0105730 <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c01056c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056cb:	8b 40 1c             	mov    0x1c(%eax),%eax
c01056ce:	c1 e8 0c             	shr    $0xc,%eax
c01056d1:	83 c0 01             	add    $0x1,%eax
c01056d4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01056d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01056db:	89 44 24 08          	mov    %eax,0x8(%esp)
c01056df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056e2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01056e6:	c7 04 24 a8 e8 10 c0 	movl   $0xc010e8a8,(%esp)
c01056ed:	e8 bc ab ff ff       	call   c01002ae <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c01056f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056f5:	8b 40 1c             	mov    0x1c(%eax),%eax
c01056f8:	c1 e8 0c             	shr    $0xc,%eax
c01056fb:	83 c0 01             	add    $0x1,%eax
c01056fe:	c1 e0 08             	shl    $0x8,%eax
c0105701:	89 c2                	mov    %eax,%edx
c0105703:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105706:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0105708:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010570b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105712:	00 
c0105713:	89 04 24             	mov    %eax,(%esp)
c0105716:	e8 ff 1d 00 00       	call   c010751a <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c010571b:	8b 45 08             	mov    0x8(%ebp),%eax
c010571e:	8b 40 0c             	mov    0xc(%eax),%eax
c0105721:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105724:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105728:	89 04 24             	mov    %eax,(%esp)
c010572b:	e8 76 2b 00 00       	call   c01082a6 <tlb_invalidate>
     for (i = 0; i != n; ++ i)
c0105730:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0105734:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105737:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010573a:	0f 85 9a fe ff ff    	jne    c01055da <swap_out+0x12>
     }
     return i;
c0105740:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105743:	c9                   	leave  
c0105744:	c3                   	ret    

c0105745 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0105745:	55                   	push   %ebp
c0105746:	89 e5                	mov    %esp,%ebp
c0105748:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c010574b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105752:	e8 58 1d 00 00       	call   c01074af <alloc_pages>
c0105757:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c010575a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010575e:	75 24                	jne    c0105784 <swap_in+0x3f>
c0105760:	c7 44 24 0c e8 e8 10 	movl   $0xc010e8e8,0xc(%esp)
c0105767:	c0 
c0105768:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c010576f:	c0 
c0105770:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0105777:	00 
c0105778:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c010577f:	e8 81 ac ff ff       	call   c0100405 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0105784:	8b 45 08             	mov    0x8(%ebp),%eax
c0105787:	8b 40 0c             	mov    0xc(%eax),%eax
c010578a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105791:	00 
c0105792:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105795:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105799:	89 04 24             	mov    %eax,(%esp)
c010579c:	e8 f2 23 00 00       	call   c0107b93 <get_pte>
c01057a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c01057a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057a7:	8b 00                	mov    (%eax),%eax
c01057a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01057ac:	89 54 24 04          	mov    %edx,0x4(%esp)
c01057b0:	89 04 24             	mov    %eax,(%esp)
c01057b3:	e8 a8 48 00 00       	call   c010a060 <swapfs_read>
c01057b8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01057bb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01057bf:	74 2a                	je     c01057eb <swap_in+0xa6>
     {
        assert(r!=0);
c01057c1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01057c5:	75 24                	jne    c01057eb <swap_in+0xa6>
c01057c7:	c7 44 24 0c f5 e8 10 	movl   $0xc010e8f5,0xc(%esp)
c01057ce:	c0 
c01057cf:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c01057d6:	c0 
c01057d7:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c01057de:	00 
c01057df:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c01057e6:	e8 1a ac ff ff       	call   c0100405 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c01057eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057ee:	8b 00                	mov    (%eax),%eax
c01057f0:	c1 e8 08             	shr    $0x8,%eax
c01057f3:	89 c2                	mov    %eax,%edx
c01057f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01057f8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01057fc:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105800:	c7 04 24 fc e8 10 c0 	movl   $0xc010e8fc,(%esp)
c0105807:	e8 a2 aa ff ff       	call   c01002ae <cprintf>
     *ptr_result=result;
c010580c:	8b 45 10             	mov    0x10(%ebp),%eax
c010580f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105812:	89 10                	mov    %edx,(%eax)
     return 0;
c0105814:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105819:	c9                   	leave  
c010581a:	c3                   	ret    

c010581b <check_content_set>:



static inline void
check_content_set(void)
{
c010581b:	55                   	push   %ebp
c010581c:	89 e5                	mov    %esp,%ebp
c010581e:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c0105821:	b8 00 10 00 00       	mov    $0x1000,%eax
c0105826:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0105829:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c010582e:	83 f8 01             	cmp    $0x1,%eax
c0105831:	74 24                	je     c0105857 <check_content_set+0x3c>
c0105833:	c7 44 24 0c 3a e9 10 	movl   $0xc010e93a,0xc(%esp)
c010583a:	c0 
c010583b:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105842:	c0 
c0105843:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c010584a:	00 
c010584b:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105852:	e8 ae ab ff ff       	call   c0100405 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c0105857:	b8 10 10 00 00       	mov    $0x1010,%eax
c010585c:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010585f:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0105864:	83 f8 01             	cmp    $0x1,%eax
c0105867:	74 24                	je     c010588d <check_content_set+0x72>
c0105869:	c7 44 24 0c 3a e9 10 	movl   $0xc010e93a,0xc(%esp)
c0105870:	c0 
c0105871:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105878:	c0 
c0105879:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0105880:	00 
c0105881:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105888:	e8 78 ab ff ff       	call   c0100405 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c010588d:	b8 00 20 00 00       	mov    $0x2000,%eax
c0105892:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0105895:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c010589a:	83 f8 02             	cmp    $0x2,%eax
c010589d:	74 24                	je     c01058c3 <check_content_set+0xa8>
c010589f:	c7 44 24 0c 49 e9 10 	movl   $0xc010e949,0xc(%esp)
c01058a6:	c0 
c01058a7:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c01058ae:	c0 
c01058af:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c01058b6:	00 
c01058b7:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c01058be:	e8 42 ab ff ff       	call   c0100405 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c01058c3:	b8 10 20 00 00       	mov    $0x2010,%eax
c01058c8:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01058cb:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c01058d0:	83 f8 02             	cmp    $0x2,%eax
c01058d3:	74 24                	je     c01058f9 <check_content_set+0xde>
c01058d5:	c7 44 24 0c 49 e9 10 	movl   $0xc010e949,0xc(%esp)
c01058dc:	c0 
c01058dd:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c01058e4:	c0 
c01058e5:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c01058ec:	00 
c01058ed:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c01058f4:	e8 0c ab ff ff       	call   c0100405 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c01058f9:	b8 00 30 00 00       	mov    $0x3000,%eax
c01058fe:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0105901:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0105906:	83 f8 03             	cmp    $0x3,%eax
c0105909:	74 24                	je     c010592f <check_content_set+0x114>
c010590b:	c7 44 24 0c 58 e9 10 	movl   $0xc010e958,0xc(%esp)
c0105912:	c0 
c0105913:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c010591a:	c0 
c010591b:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c0105922:	00 
c0105923:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c010592a:	e8 d6 aa ff ff       	call   c0100405 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c010592f:	b8 10 30 00 00       	mov    $0x3010,%eax
c0105934:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0105937:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c010593c:	83 f8 03             	cmp    $0x3,%eax
c010593f:	74 24                	je     c0105965 <check_content_set+0x14a>
c0105941:	c7 44 24 0c 58 e9 10 	movl   $0xc010e958,0xc(%esp)
c0105948:	c0 
c0105949:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105950:	c0 
c0105951:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c0105958:	00 
c0105959:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105960:	e8 a0 aa ff ff       	call   c0100405 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c0105965:	b8 00 40 00 00       	mov    $0x4000,%eax
c010596a:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c010596d:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0105972:	83 f8 04             	cmp    $0x4,%eax
c0105975:	74 24                	je     c010599b <check_content_set+0x180>
c0105977:	c7 44 24 0c 67 e9 10 	movl   $0xc010e967,0xc(%esp)
c010597e:	c0 
c010597f:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105986:	c0 
c0105987:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c010598e:	00 
c010598f:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105996:	e8 6a aa ff ff       	call   c0100405 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c010599b:	b8 10 40 00 00       	mov    $0x4010,%eax
c01059a0:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01059a3:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c01059a8:	83 f8 04             	cmp    $0x4,%eax
c01059ab:	74 24                	je     c01059d1 <check_content_set+0x1b6>
c01059ad:	c7 44 24 0c 67 e9 10 	movl   $0xc010e967,0xc(%esp)
c01059b4:	c0 
c01059b5:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c01059bc:	c0 
c01059bd:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c01059c4:	00 
c01059c5:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c01059cc:	e8 34 aa ff ff       	call   c0100405 <__panic>
}
c01059d1:	c9                   	leave  
c01059d2:	c3                   	ret    

c01059d3 <check_content_access>:

static inline int
check_content_access(void)
{
c01059d3:	55                   	push   %ebp
c01059d4:	89 e5                	mov    %esp,%ebp
c01059d6:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c01059d9:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c01059de:	8b 40 1c             	mov    0x1c(%eax),%eax
c01059e1:	ff d0                	call   *%eax
c01059e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c01059e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01059e9:	c9                   	leave  
c01059ea:	c3                   	ret    

c01059eb <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c01059eb:	55                   	push   %ebp
c01059ec:	89 e5                	mov    %esp,%ebp
c01059ee:	53                   	push   %ebx
c01059ef:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c01059f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01059f9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0105a00:	c7 45 e8 a4 71 1c c0 	movl   $0xc01c71a4,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0105a07:	eb 6b                	jmp    c0105a74 <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c0105a09:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105a0c:	83 e8 0c             	sub    $0xc,%eax
c0105a0f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c0105a12:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105a15:	83 c0 04             	add    $0x4,%eax
c0105a18:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c0105a1f:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105a22:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105a25:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0105a28:	0f a3 10             	bt     %edx,(%eax)
c0105a2b:	19 c0                	sbb    %eax,%eax
c0105a2d:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c0105a30:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105a34:	0f 95 c0             	setne  %al
c0105a37:	0f b6 c0             	movzbl %al,%eax
c0105a3a:	85 c0                	test   %eax,%eax
c0105a3c:	75 24                	jne    c0105a62 <check_swap+0x77>
c0105a3e:	c7 44 24 0c 76 e9 10 	movl   $0xc010e976,0xc(%esp)
c0105a45:	c0 
c0105a46:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105a4d:	c0 
c0105a4e:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c0105a55:	00 
c0105a56:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105a5d:	e8 a3 a9 ff ff       	call   c0100405 <__panic>
        count ++, total += p->property;
c0105a62:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0105a66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105a69:	8b 50 08             	mov    0x8(%eax),%edx
c0105a6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105a6f:	01 d0                	add    %edx,%eax
c0105a71:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105a74:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105a77:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return listelm->next;
c0105a7a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105a7d:	8b 40 04             	mov    0x4(%eax),%eax
     while ((le = list_next(le)) != &free_list) {
c0105a80:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105a83:	81 7d e8 a4 71 1c c0 	cmpl   $0xc01c71a4,-0x18(%ebp)
c0105a8a:	0f 85 79 ff ff ff    	jne    c0105a09 <check_swap+0x1e>
     }
     assert(total == nr_free_pages());
c0105a90:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0105a93:	e8 b4 1a 00 00       	call   c010754c <nr_free_pages>
c0105a98:	39 c3                	cmp    %eax,%ebx
c0105a9a:	74 24                	je     c0105ac0 <check_swap+0xd5>
c0105a9c:	c7 44 24 0c 86 e9 10 	movl   $0xc010e986,0xc(%esp)
c0105aa3:	c0 
c0105aa4:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105aab:	c0 
c0105aac:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c0105ab3:	00 
c0105ab4:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105abb:	e8 45 a9 ff ff       	call   c0100405 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0105ac0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ac3:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105ac7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105aca:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ace:	c7 04 24 a0 e9 10 c0 	movl   $0xc010e9a0,(%esp)
c0105ad5:	e8 d4 a7 ff ff       	call   c01002ae <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0105ada:	e8 c2 da ff ff       	call   c01035a1 <mm_create>
c0105adf:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c0105ae2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105ae6:	75 24                	jne    c0105b0c <check_swap+0x121>
c0105ae8:	c7 44 24 0c c6 e9 10 	movl   $0xc010e9c6,0xc(%esp)
c0105aef:	c0 
c0105af0:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105af7:	c0 
c0105af8:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c0105aff:	00 
c0105b00:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105b07:	e8 f9 a8 ff ff       	call   c0100405 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0105b0c:	a1 bc 70 1c c0       	mov    0xc01c70bc,%eax
c0105b11:	85 c0                	test   %eax,%eax
c0105b13:	74 24                	je     c0105b39 <check_swap+0x14e>
c0105b15:	c7 44 24 0c d1 e9 10 	movl   $0xc010e9d1,0xc(%esp)
c0105b1c:	c0 
c0105b1d:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105b24:	c0 
c0105b25:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0105b2c:	00 
c0105b2d:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105b34:	e8 cc a8 ff ff       	call   c0100405 <__panic>

     check_mm_struct = mm;
c0105b39:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105b3c:	a3 bc 70 1c c0       	mov    %eax,0xc01c70bc

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c0105b41:	8b 15 20 1a 13 c0    	mov    0xc0131a20,%edx
c0105b47:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105b4a:	89 50 0c             	mov    %edx,0xc(%eax)
c0105b4d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105b50:	8b 40 0c             	mov    0xc(%eax),%eax
c0105b53:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c0105b56:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105b59:	8b 00                	mov    (%eax),%eax
c0105b5b:	85 c0                	test   %eax,%eax
c0105b5d:	74 24                	je     c0105b83 <check_swap+0x198>
c0105b5f:	c7 44 24 0c e9 e9 10 	movl   $0xc010e9e9,0xc(%esp)
c0105b66:	c0 
c0105b67:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105b6e:	c0 
c0105b6f:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c0105b76:	00 
c0105b77:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105b7e:	e8 82 a8 ff ff       	call   c0100405 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0105b83:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c0105b8a:	00 
c0105b8b:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c0105b92:	00 
c0105b93:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0105b9a:	e8 a7 da ff ff       	call   c0103646 <vma_create>
c0105b9f:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c0105ba2:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0105ba6:	75 24                	jne    c0105bcc <check_swap+0x1e1>
c0105ba8:	c7 44 24 0c f7 e9 10 	movl   $0xc010e9f7,0xc(%esp)
c0105baf:	c0 
c0105bb0:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105bb7:	c0 
c0105bb8:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0105bbf:	00 
c0105bc0:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105bc7:	e8 39 a8 ff ff       	call   c0100405 <__panic>

     insert_vma_struct(mm, vma);
c0105bcc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105bcf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105bd3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105bd6:	89 04 24             	mov    %eax,(%esp)
c0105bd9:	e8 f8 db ff ff       	call   c01037d6 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0105bde:	c7 04 24 04 ea 10 c0 	movl   $0xc010ea04,(%esp)
c0105be5:	e8 c4 a6 ff ff       	call   c01002ae <cprintf>
     pte_t *temp_ptep=NULL;
c0105bea:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c0105bf1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105bf4:	8b 40 0c             	mov    0xc(%eax),%eax
c0105bf7:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105bfe:	00 
c0105bff:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0105c06:	00 
c0105c07:	89 04 24             	mov    %eax,(%esp)
c0105c0a:	e8 84 1f 00 00       	call   c0107b93 <get_pte>
c0105c0f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c0105c12:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0105c16:	75 24                	jne    c0105c3c <check_swap+0x251>
c0105c18:	c7 44 24 0c 38 ea 10 	movl   $0xc010ea38,0xc(%esp)
c0105c1f:	c0 
c0105c20:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105c27:	c0 
c0105c28:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0105c2f:	00 
c0105c30:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105c37:	e8 c9 a7 ff ff       	call   c0100405 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0105c3c:	c7 04 24 4c ea 10 c0 	movl   $0xc010ea4c,(%esp)
c0105c43:	e8 66 a6 ff ff       	call   c01002ae <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105c48:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105c4f:	e9 a3 00 00 00       	jmp    c0105cf7 <check_swap+0x30c>
          check_rp[i] = alloc_page();
c0105c54:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105c5b:	e8 4f 18 00 00       	call   c01074af <alloc_pages>
c0105c60:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105c63:	89 04 95 e0 70 1c c0 	mov    %eax,-0x3fe38f20(,%edx,4)
          assert(check_rp[i] != NULL );
c0105c6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c6d:	8b 04 85 e0 70 1c c0 	mov    -0x3fe38f20(,%eax,4),%eax
c0105c74:	85 c0                	test   %eax,%eax
c0105c76:	75 24                	jne    c0105c9c <check_swap+0x2b1>
c0105c78:	c7 44 24 0c 70 ea 10 	movl   $0xc010ea70,0xc(%esp)
c0105c7f:	c0 
c0105c80:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105c87:	c0 
c0105c88:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c0105c8f:	00 
c0105c90:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105c97:	e8 69 a7 ff ff       	call   c0100405 <__panic>
          assert(!PageProperty(check_rp[i]));
c0105c9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c9f:	8b 04 85 e0 70 1c c0 	mov    -0x3fe38f20(,%eax,4),%eax
c0105ca6:	83 c0 04             	add    $0x4,%eax
c0105ca9:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c0105cb0:	89 45 b0             	mov    %eax,-0x50(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105cb3:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105cb6:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105cb9:	0f a3 10             	bt     %edx,(%eax)
c0105cbc:	19 c0                	sbb    %eax,%eax
c0105cbe:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c0105cc1:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c0105cc5:	0f 95 c0             	setne  %al
c0105cc8:	0f b6 c0             	movzbl %al,%eax
c0105ccb:	85 c0                	test   %eax,%eax
c0105ccd:	74 24                	je     c0105cf3 <check_swap+0x308>
c0105ccf:	c7 44 24 0c 84 ea 10 	movl   $0xc010ea84,0xc(%esp)
c0105cd6:	c0 
c0105cd7:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105cde:	c0 
c0105cdf:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c0105ce6:	00 
c0105ce7:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105cee:	e8 12 a7 ff ff       	call   c0100405 <__panic>
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105cf3:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105cf7:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105cfb:	0f 8e 53 ff ff ff    	jle    c0105c54 <check_swap+0x269>
     }
     list_entry_t free_list_store = free_list;
c0105d01:	a1 a4 71 1c c0       	mov    0xc01c71a4,%eax
c0105d06:	8b 15 a8 71 1c c0    	mov    0xc01c71a8,%edx
c0105d0c:	89 45 98             	mov    %eax,-0x68(%ebp)
c0105d0f:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0105d12:	c7 45 a8 a4 71 1c c0 	movl   $0xc01c71a4,-0x58(%ebp)
    elm->prev = elm->next = elm;
c0105d19:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0105d1c:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0105d1f:	89 50 04             	mov    %edx,0x4(%eax)
c0105d22:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0105d25:	8b 50 04             	mov    0x4(%eax),%edx
c0105d28:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0105d2b:	89 10                	mov    %edx,(%eax)
c0105d2d:	c7 45 a4 a4 71 1c c0 	movl   $0xc01c71a4,-0x5c(%ebp)
    return list->next == list;
c0105d34:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105d37:	8b 40 04             	mov    0x4(%eax),%eax
c0105d3a:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c0105d3d:	0f 94 c0             	sete   %al
c0105d40:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0105d43:	85 c0                	test   %eax,%eax
c0105d45:	75 24                	jne    c0105d6b <check_swap+0x380>
c0105d47:	c7 44 24 0c 9f ea 10 	movl   $0xc010ea9f,0xc(%esp)
c0105d4e:	c0 
c0105d4f:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105d56:	c0 
c0105d57:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0105d5e:	00 
c0105d5f:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105d66:	e8 9a a6 ff ff       	call   c0100405 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0105d6b:	a1 ac 71 1c c0       	mov    0xc01c71ac,%eax
c0105d70:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c0105d73:	c7 05 ac 71 1c c0 00 	movl   $0x0,0xc01c71ac
c0105d7a:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105d7d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105d84:	eb 1e                	jmp    c0105da4 <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c0105d86:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d89:	8b 04 85 e0 70 1c c0 	mov    -0x3fe38f20(,%eax,4),%eax
c0105d90:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105d97:	00 
c0105d98:	89 04 24             	mov    %eax,(%esp)
c0105d9b:	e8 7a 17 00 00       	call   c010751a <free_pages>
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105da0:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105da4:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105da8:	7e dc                	jle    c0105d86 <check_swap+0x39b>
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0105daa:	a1 ac 71 1c c0       	mov    0xc01c71ac,%eax
c0105daf:	83 f8 04             	cmp    $0x4,%eax
c0105db2:	74 24                	je     c0105dd8 <check_swap+0x3ed>
c0105db4:	c7 44 24 0c b8 ea 10 	movl   $0xc010eab8,0xc(%esp)
c0105dbb:	c0 
c0105dbc:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105dc3:	c0 
c0105dc4:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0105dcb:	00 
c0105dcc:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105dd3:	e8 2d a6 ff ff       	call   c0100405 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0105dd8:	c7 04 24 dc ea 10 c0 	movl   $0xc010eadc,(%esp)
c0105ddf:	e8 ca a4 ff ff       	call   c01002ae <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c0105de4:	c7 05 64 4f 1c c0 00 	movl   $0x0,0xc01c4f64
c0105deb:	00 00 00 
     
     check_content_set();
c0105dee:	e8 28 fa ff ff       	call   c010581b <check_content_set>
     assert( nr_free == 0);         
c0105df3:	a1 ac 71 1c c0       	mov    0xc01c71ac,%eax
c0105df8:	85 c0                	test   %eax,%eax
c0105dfa:	74 24                	je     c0105e20 <check_swap+0x435>
c0105dfc:	c7 44 24 0c 03 eb 10 	movl   $0xc010eb03,0xc(%esp)
c0105e03:	c0 
c0105e04:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105e0b:	c0 
c0105e0c:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0105e13:	00 
c0105e14:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105e1b:	e8 e5 a5 ff ff       	call   c0100405 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0105e20:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105e27:	eb 26                	jmp    c0105e4f <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0105e29:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105e2c:	c7 04 85 00 71 1c c0 	movl   $0xffffffff,-0x3fe38f00(,%eax,4)
c0105e33:	ff ff ff ff 
c0105e37:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105e3a:	8b 14 85 00 71 1c c0 	mov    -0x3fe38f00(,%eax,4),%edx
c0105e41:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105e44:	89 14 85 40 71 1c c0 	mov    %edx,-0x3fe38ec0(,%eax,4)
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0105e4b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105e4f:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0105e53:	7e d4                	jle    c0105e29 <check_swap+0x43e>
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105e55:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105e5c:	e9 eb 00 00 00       	jmp    c0105f4c <check_swap+0x561>
         check_ptep[i]=0;
c0105e61:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105e64:	c7 04 85 94 71 1c c0 	movl   $0x0,-0x3fe38e6c(,%eax,4)
c0105e6b:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0105e6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105e72:	83 c0 01             	add    $0x1,%eax
c0105e75:	c1 e0 0c             	shl    $0xc,%eax
c0105e78:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105e7f:	00 
c0105e80:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e84:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105e87:	89 04 24             	mov    %eax,(%esp)
c0105e8a:	e8 04 1d 00 00       	call   c0107b93 <get_pte>
c0105e8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105e92:	89 04 95 94 71 1c c0 	mov    %eax,-0x3fe38e6c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0105e99:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105e9c:	8b 04 85 94 71 1c c0 	mov    -0x3fe38e6c(,%eax,4),%eax
c0105ea3:	85 c0                	test   %eax,%eax
c0105ea5:	75 24                	jne    c0105ecb <check_swap+0x4e0>
c0105ea7:	c7 44 24 0c 10 eb 10 	movl   $0xc010eb10,0xc(%esp)
c0105eae:	c0 
c0105eaf:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105eb6:	c0 
c0105eb7:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0105ebe:	00 
c0105ebf:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105ec6:	e8 3a a5 ff ff       	call   c0100405 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0105ecb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105ece:	8b 04 85 94 71 1c c0 	mov    -0x3fe38e6c(,%eax,4),%eax
c0105ed5:	8b 00                	mov    (%eax),%eax
c0105ed7:	89 04 24             	mov    %eax,(%esp)
c0105eda:	e8 87 f5 ff ff       	call   c0105466 <pte2page>
c0105edf:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105ee2:	8b 14 95 e0 70 1c c0 	mov    -0x3fe38f20(,%edx,4),%edx
c0105ee9:	39 d0                	cmp    %edx,%eax
c0105eeb:	74 24                	je     c0105f11 <check_swap+0x526>
c0105eed:	c7 44 24 0c 28 eb 10 	movl   $0xc010eb28,0xc(%esp)
c0105ef4:	c0 
c0105ef5:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105efc:	c0 
c0105efd:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c0105f04:	00 
c0105f05:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105f0c:	e8 f4 a4 ff ff       	call   c0100405 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0105f11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105f14:	8b 04 85 94 71 1c c0 	mov    -0x3fe38e6c(,%eax,4),%eax
c0105f1b:	8b 00                	mov    (%eax),%eax
c0105f1d:	83 e0 01             	and    $0x1,%eax
c0105f20:	85 c0                	test   %eax,%eax
c0105f22:	75 24                	jne    c0105f48 <check_swap+0x55d>
c0105f24:	c7 44 24 0c 50 eb 10 	movl   $0xc010eb50,0xc(%esp)
c0105f2b:	c0 
c0105f2c:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105f33:	c0 
c0105f34:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0105f3b:	00 
c0105f3c:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105f43:	e8 bd a4 ff ff       	call   c0100405 <__panic>
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105f48:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105f4c:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105f50:	0f 8e 0b ff ff ff    	jle    c0105e61 <check_swap+0x476>
     }
     cprintf("set up init env for check_swap over!\n");
c0105f56:	c7 04 24 6c eb 10 c0 	movl   $0xc010eb6c,(%esp)
c0105f5d:	e8 4c a3 ff ff       	call   c01002ae <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0105f62:	e8 6c fa ff ff       	call   c01059d3 <check_content_access>
c0105f67:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c0105f6a:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0105f6e:	74 24                	je     c0105f94 <check_swap+0x5a9>
c0105f70:	c7 44 24 0c 92 eb 10 	movl   $0xc010eb92,0xc(%esp)
c0105f77:	c0 
c0105f78:	c7 44 24 08 7a e8 10 	movl   $0xc010e87a,0x8(%esp)
c0105f7f:	c0 
c0105f80:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0105f87:	00 
c0105f88:	c7 04 24 14 e8 10 c0 	movl   $0xc010e814,(%esp)
c0105f8f:	e8 71 a4 ff ff       	call   c0100405 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105f94:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105f9b:	eb 1e                	jmp    c0105fbb <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c0105f9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105fa0:	8b 04 85 e0 70 1c c0 	mov    -0x3fe38f20(,%eax,4),%eax
c0105fa7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105fae:	00 
c0105faf:	89 04 24             	mov    %eax,(%esp)
c0105fb2:	e8 63 15 00 00       	call   c010751a <free_pages>
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105fb7:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105fbb:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105fbf:	7e dc                	jle    c0105f9d <check_swap+0x5b2>
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c0105fc1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105fc4:	8b 00                	mov    (%eax),%eax
c0105fc6:	89 04 24             	mov    %eax,(%esp)
c0105fc9:	e8 d6 f4 ff ff       	call   c01054a4 <pde2page>
c0105fce:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105fd5:	00 
c0105fd6:	89 04 24             	mov    %eax,(%esp)
c0105fd9:	e8 3c 15 00 00       	call   c010751a <free_pages>
     pgdir[0] = 0;
c0105fde:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105fe1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0105fe7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105fea:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0105ff1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105ff4:	89 04 24             	mov    %eax,(%esp)
c0105ff7:	e8 0a d9 ff ff       	call   c0103906 <mm_destroy>
     check_mm_struct = NULL;
c0105ffc:	c7 05 bc 70 1c c0 00 	movl   $0x0,0xc01c70bc
c0106003:	00 00 00 
     
     nr_free = nr_free_store;
c0106006:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106009:	a3 ac 71 1c c0       	mov    %eax,0xc01c71ac
     free_list = free_list_store;
c010600e:	8b 45 98             	mov    -0x68(%ebp),%eax
c0106011:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0106014:	a3 a4 71 1c c0       	mov    %eax,0xc01c71a4
c0106019:	89 15 a8 71 1c c0    	mov    %edx,0xc01c71a8

     
     le = &free_list;
c010601f:	c7 45 e8 a4 71 1c c0 	movl   $0xc01c71a4,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0106026:	eb 1d                	jmp    c0106045 <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c0106028:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010602b:	83 e8 0c             	sub    $0xc,%eax
c010602e:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c0106031:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0106035:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106038:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010603b:	8b 40 08             	mov    0x8(%eax),%eax
c010603e:	29 c2                	sub    %eax,%edx
c0106040:	89 d0                	mov    %edx,%eax
c0106042:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106045:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106048:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return listelm->next;
c010604b:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010604e:	8b 40 04             	mov    0x4(%eax),%eax
     while ((le = list_next(le)) != &free_list) {
c0106051:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106054:	81 7d e8 a4 71 1c c0 	cmpl   $0xc01c71a4,-0x18(%ebp)
c010605b:	75 cb                	jne    c0106028 <check_swap+0x63d>
     }
     cprintf("count is %d, total is %d\n",count,total);
c010605d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106060:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106064:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106067:	89 44 24 04          	mov    %eax,0x4(%esp)
c010606b:	c7 04 24 99 eb 10 c0 	movl   $0xc010eb99,(%esp)
c0106072:	e8 37 a2 ff ff       	call   c01002ae <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0106077:	c7 04 24 b3 eb 10 c0 	movl   $0xc010ebb3,(%esp)
c010607e:	e8 2b a2 ff ff       	call   c01002ae <cprintf>
}
c0106083:	83 c4 74             	add    $0x74,%esp
c0106086:	5b                   	pop    %ebx
c0106087:	5d                   	pop    %ebp
c0106088:	c3                   	ret    

c0106089 <page2ppn>:
page2ppn(struct Page *page) {
c0106089:	55                   	push   %ebp
c010608a:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010608c:	8b 55 08             	mov    0x8(%ebp),%edx
c010608f:	a1 b8 71 1c c0       	mov    0xc01c71b8,%eax
c0106094:	29 c2                	sub    %eax,%edx
c0106096:	89 d0                	mov    %edx,%eax
c0106098:	c1 f8 05             	sar    $0x5,%eax
}
c010609b:	5d                   	pop    %ebp
c010609c:	c3                   	ret    

c010609d <page2pa>:
page2pa(struct Page *page) {
c010609d:	55                   	push   %ebp
c010609e:	89 e5                	mov    %esp,%ebp
c01060a0:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01060a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01060a6:	89 04 24             	mov    %eax,(%esp)
c01060a9:	e8 db ff ff ff       	call   c0106089 <page2ppn>
c01060ae:	c1 e0 0c             	shl    $0xc,%eax
}
c01060b1:	c9                   	leave  
c01060b2:	c3                   	ret    

c01060b3 <page_ref>:

static inline int
page_ref(struct Page *page) {
c01060b3:	55                   	push   %ebp
c01060b4:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01060b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01060b9:	8b 00                	mov    (%eax),%eax
}
c01060bb:	5d                   	pop    %ebp
c01060bc:	c3                   	ret    

c01060bd <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01060bd:	55                   	push   %ebp
c01060be:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01060c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01060c3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01060c6:	89 10                	mov    %edx,(%eax)
}
c01060c8:	5d                   	pop    %ebp
c01060c9:	c3                   	ret    

c01060ca <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c01060ca:	55                   	push   %ebp
c01060cb:	89 e5                	mov    %esp,%ebp
c01060cd:	83 ec 10             	sub    $0x10,%esp
c01060d0:	c7 45 fc a4 71 1c c0 	movl   $0xc01c71a4,-0x4(%ebp)
    elm->prev = elm->next = elm;
c01060d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01060da:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01060dd:	89 50 04             	mov    %edx,0x4(%eax)
c01060e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01060e3:	8b 50 04             	mov    0x4(%eax),%edx
c01060e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01060e9:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c01060eb:	c7 05 ac 71 1c c0 00 	movl   $0x0,0xc01c71ac
c01060f2:	00 00 00 
}
c01060f5:	c9                   	leave  
c01060f6:	c3                   	ret    

c01060f7 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c01060f7:	55                   	push   %ebp
c01060f8:	89 e5                	mov    %esp,%ebp
c01060fa:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c01060fd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0106101:	75 24                	jne    c0106127 <default_init_memmap+0x30>
c0106103:	c7 44 24 0c cc eb 10 	movl   $0xc010ebcc,0xc(%esp)
c010610a:	c0 
c010610b:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106112:	c0 
c0106113:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c010611a:	00 
c010611b:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106122:	e8 de a2 ff ff       	call   c0100405 <__panic>
    struct Page *p = base;
c0106127:	8b 45 08             	mov    0x8(%ebp),%eax
c010612a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c010612d:	e9 dc 00 00 00       	jmp    c010620e <default_init_memmap+0x117>
        //初始化n块物理页
        assert(PageReserved(p));
c0106132:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106135:	83 c0 04             	add    $0x4,%eax
c0106138:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010613f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106142:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106145:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106148:	0f a3 10             	bt     %edx,(%eax)
c010614b:	19 c0                	sbb    %eax,%eax
c010614d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c0106150:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106154:	0f 95 c0             	setne  %al
c0106157:	0f b6 c0             	movzbl %al,%eax
c010615a:	85 c0                	test   %eax,%eax
c010615c:	75 24                	jne    c0106182 <default_init_memmap+0x8b>
c010615e:	c7 44 24 0c fd eb 10 	movl   $0xc010ebfd,0xc(%esp)
c0106165:	c0 
c0106166:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c010616d:	c0 
c010616e:	c7 44 24 04 71 00 00 	movl   $0x71,0x4(%esp)
c0106175:	00 
c0106176:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c010617d:	e8 83 a2 ff ff       	call   c0100405 <__panic>
        p->flags = 0;
c0106182:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106185:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        SetPageProperty(p);
c010618c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010618f:	83 c0 04             	add    $0x4,%eax
c0106192:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0106199:	89 45 e0             	mov    %eax,-0x20(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010619c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010619f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01061a2:	0f ab 10             	bts    %edx,(%eax)
        p->property = 0;
c01061a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061a8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        set_page_ref(p, 0);
c01061af:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01061b6:	00 
c01061b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061ba:	89 04 24             	mov    %eax,(%esp)
c01061bd:	e8 fb fe ff ff       	call   c01060bd <set_page_ref>
        list_add_before(&free_list, &(p->page_link));
c01061c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061c5:	83 c0 0c             	add    $0xc,%eax
c01061c8:	c7 45 dc a4 71 1c c0 	movl   $0xc01c71a4,-0x24(%ebp)
c01061cf:	89 45 d8             	mov    %eax,-0x28(%ebp)
    __list_add(elm, listelm->prev, listelm);
c01061d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01061d5:	8b 00                	mov    (%eax),%eax
c01061d7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01061da:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01061dd:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01061e0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01061e3:	89 45 cc             	mov    %eax,-0x34(%ebp)
    prev->next = next->prev = elm;
c01061e6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01061e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01061ec:	89 10                	mov    %edx,(%eax)
c01061ee:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01061f1:	8b 10                	mov    (%eax),%edx
c01061f3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01061f6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01061f9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01061fc:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01061ff:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0106202:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106205:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0106208:	89 10                	mov    %edx,(%eax)
    for (; p != base + n; p ++) {
c010620a:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c010620e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106211:	c1 e0 05             	shl    $0x5,%eax
c0106214:	89 c2                	mov    %eax,%edx
c0106216:	8b 45 08             	mov    0x8(%ebp),%eax
c0106219:	01 d0                	add    %edx,%eax
c010621b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010621e:	0f 85 0e ff ff ff    	jne    c0106132 <default_init_memmap+0x3b>
    }
    nr_free += n;
c0106224:	8b 15 ac 71 1c c0    	mov    0xc01c71ac,%edx
c010622a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010622d:	01 d0                	add    %edx,%eax
c010622f:	a3 ac 71 1c c0       	mov    %eax,0xc01c71ac
    base->property = n;
c0106234:	8b 45 08             	mov    0x8(%ebp),%eax
c0106237:	8b 55 0c             	mov    0xc(%ebp),%edx
c010623a:	89 50 08             	mov    %edx,0x8(%eax)
}
c010623d:	c9                   	leave  
c010623e:	c3                   	ret    

c010623f <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c010623f:	55                   	push   %ebp
c0106240:	89 e5                	mov    %esp,%ebp
c0106242:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c0106245:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106249:	75 24                	jne    c010626f <default_alloc_pages+0x30>
c010624b:	c7 44 24 0c cc eb 10 	movl   $0xc010ebcc,0xc(%esp)
c0106252:	c0 
c0106253:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c010625a:	c0 
c010625b:	c7 44 24 04 7e 00 00 	movl   $0x7e,0x4(%esp)
c0106262:	00 
c0106263:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c010626a:	e8 96 a1 ff ff       	call   c0100405 <__panic>
    if (n > nr_free) {
c010626f:	a1 ac 71 1c c0       	mov    0xc01c71ac,%eax
c0106274:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106277:	73 0a                	jae    c0106283 <default_alloc_pages+0x44>
        return NULL;
c0106279:	b8 00 00 00 00       	mov    $0x0,%eax
c010627e:	e9 37 01 00 00       	jmp    c01063ba <default_alloc_pages+0x17b>
    }
    //如果所有空闲块的空闲页总数都没有n个,直接return null
    list_entry_t *le, *le_next;  //free_list指针和它的下一个
    le = &free_list;
c0106283:	c7 45 f4 a4 71 1c c0 	movl   $0xc01c71a4,-0xc(%ebp)
    //从头开始遍历保存空闲物理内存块的链表(按照物理地址的从小到大顺序)
    while((le=list_next(le)) != &free_list) {
c010628a:	e9 0a 01 00 00       	jmp    c0106399 <default_alloc_pages+0x15a>
    //通过宏le2page(memlayout.h)得指向Page的指针p
      struct Page *p = le2page(le, page_link);
c010628f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106292:	83 e8 0c             	sub    $0xc,%eax
c0106295:	89 45 ec             	mov    %eax,-0x14(%ebp)
      if(p->property >= n){
c0106298:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010629b:	8b 40 08             	mov    0x8(%eax),%eax
c010629e:	3b 45 08             	cmp    0x8(%ebp),%eax
c01062a1:	0f 82 f2 00 00 00    	jb     c0106399 <default_alloc_pages+0x15a>
        //p->property表示空闲块的大小，大于n则进下一步
        int i;
        //for初始化空闲块中每一个页
        for(i=0;i<n;i++){
c01062a7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01062ae:	eb 7c                	jmp    c010632c <default_alloc_pages+0xed>
c01062b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062b3:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return listelm->next;
c01062b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01062b9:	8b 40 04             	mov    0x4(%eax),%eax
          le_next = list_next(le);
c01062bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
          struct Page *p2 = le2page(le, page_link);
c01062bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062c2:	83 e8 0c             	sub    $0xc,%eax
c01062c5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          SetPageReserved(p2);//flags bit0 置1，表示已经被分配
c01062c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01062cb:	83 c0 04             	add    $0x4,%eax
c01062ce:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01062d5:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01062d8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01062db:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01062de:	0f ab 10             	bts    %edx,(%eax)
          ClearPageProperty(p2);//falgs bit1 置0，表示已被分配
c01062e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01062e4:	83 c0 04             	add    $0x4,%eax
c01062e7:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c01062ee:	89 45 d0             	mov    %eax,-0x30(%ebp)
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01062f1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01062f4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01062f7:	0f b3 10             	btr    %edx,(%eax)
c01062fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062fd:	89 45 cc             	mov    %eax,-0x34(%ebp)
    __list_del(listelm->prev, listelm->next);
c0106300:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0106303:	8b 40 04             	mov    0x4(%eax),%eax
c0106306:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0106309:	8b 12                	mov    (%edx),%edx
c010630b:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010630e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    prev->next = next;
c0106311:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106314:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0106317:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010631a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010631d:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0106320:	89 10                	mov    %edx,(%eax)
          list_del(le);//取消和free_list的link
          le = le_next;//指针后移
c0106322:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106325:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for(i=0;i<n;i++){
c0106328:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010632c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010632f:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106332:	0f 82 78 ff ff ff    	jb     c01062b0 <default_alloc_pages+0x71>
        }
        //如果选中的块大于n,需要修改剩下的块的head page的property
        if(p->property>n){
c0106338:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010633b:	8b 40 08             	mov    0x8(%eax),%eax
c010633e:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106341:	76 12                	jbe    c0106355 <default_alloc_pages+0x116>
          (le2page(le,page_link))->property = p->property - n;
c0106343:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106346:	8d 50 f4             	lea    -0xc(%eax),%edx
c0106349:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010634c:	8b 40 08             	mov    0x8(%eax),%eax
c010634f:	2b 45 08             	sub    0x8(%ebp),%eax
c0106352:	89 42 08             	mov    %eax,0x8(%edx)
        }
        ClearPageProperty(p);
c0106355:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106358:	83 c0 04             	add    $0x4,%eax
c010635b:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0106362:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0106365:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0106368:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010636b:	0f b3 10             	btr    %edx,(%eax)
        SetPageReserved(p);
c010636e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106371:	83 c0 04             	add    $0x4,%eax
c0106374:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
c010637b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010637e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106381:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0106384:	0f ab 10             	bts    %edx,(%eax)
        nr_free -= n;
c0106387:	a1 ac 71 1c c0       	mov    0xc01c71ac,%eax
c010638c:	2b 45 08             	sub    0x8(%ebp),%eax
c010638f:	a3 ac 71 1c c0       	mov    %eax,0xc01c71ac
        return p;
c0106394:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106397:	eb 21                	jmp    c01063ba <default_alloc_pages+0x17b>
c0106399:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010639c:	89 45 b0             	mov    %eax,-0x50(%ebp)
    return listelm->next;
c010639f:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01063a2:	8b 40 04             	mov    0x4(%eax),%eax
    while((le=list_next(le)) != &free_list) {
c01063a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01063a8:	81 7d f4 a4 71 1c c0 	cmpl   $0xc01c71a4,-0xc(%ebp)
c01063af:	0f 85 da fe ff ff    	jne    c010628f <default_alloc_pages+0x50>
      }
    }
    return NULL;//防止出错
c01063b5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01063ba:	c9                   	leave  
c01063bb:	c3                   	ret    

c01063bc <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c01063bc:	55                   	push   %ebp
c01063bd:	89 e5                	mov    %esp,%ebp
c01063bf:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c01063c2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01063c6:	75 24                	jne    c01063ec <default_free_pages+0x30>
c01063c8:	c7 44 24 0c cc eb 10 	movl   $0xc010ebcc,0xc(%esp)
c01063cf:	c0 
c01063d0:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c01063d7:	c0 
c01063d8:	c7 44 24 04 a4 00 00 	movl   $0xa4,0x4(%esp)
c01063df:	00 
c01063e0:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c01063e7:	e8 19 a0 ff ff       	call   c0100405 <__panic>
    //assert(PageReserved(base) && PageProperty(base));
    assert(PageReserved(base));
c01063ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01063ef:	83 c0 04             	add    $0x4,%eax
c01063f2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01063f9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01063fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01063ff:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106402:	0f a3 10             	bt     %edx,(%eax)
c0106405:	19 c0                	sbb    %eax,%eax
c0106407:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c010640a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010640e:	0f 95 c0             	setne  %al
c0106411:	0f b6 c0             	movzbl %al,%eax
c0106414:	85 c0                	test   %eax,%eax
c0106416:	75 24                	jne    c010643c <default_free_pages+0x80>
c0106418:	c7 44 24 0c 0d ec 10 	movl   $0xc010ec0d,0xc(%esp)
c010641f:	c0 
c0106420:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106427:	c0 
c0106428:	c7 44 24 04 a6 00 00 	movl   $0xa6,0x4(%esp)
c010642f:	00 
c0106430:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106437:	e8 c9 9f ff ff       	call   c0100405 <__panic>
    //检查需要释放的页块是否已经被分配,只要看bit 0 reserve就好了
    list_entry_t *le = &free_list;
c010643c:	c7 45 f4 a4 71 1c c0 	movl   $0xc01c71a4,-0xc(%ebp)
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c0106443:	eb 13                	jmp    c0106458 <default_free_pages+0x9c>
      p = le2page(le, page_link);
c0106445:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106448:	83 e8 0c             	sub    $0xc,%eax
c010644b:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if(p>base){break;}
c010644e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106451:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106454:	76 02                	jbe    c0106458 <default_free_pages+0x9c>
c0106456:	eb 18                	jmp    c0106470 <default_free_pages+0xb4>
c0106458:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010645b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010645e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106461:	8b 40 04             	mov    0x4(%eax),%eax
    while((le=list_next(le)) != &free_list) {
c0106464:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106467:	81 7d f4 a4 71 1c c0 	cmpl   $0xc01c71a4,-0xc(%ebp)
c010646e:	75 d5                	jne    c0106445 <default_free_pages+0x89>
    }
    //将每一空闲块的链表插入空闲链表中
    for(p=base;p<base+n;p++){
c0106470:	8b 45 08             	mov    0x8(%ebp),%eax
c0106473:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106476:	eb 4b                	jmp    c01064c3 <default_free_pages+0x107>
      list_add_before(le, &(p->page_link));
c0106478:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010647b:	8d 50 0c             	lea    0xc(%eax),%edx
c010647e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106481:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106484:	89 55 d8             	mov    %edx,-0x28(%ebp)
    __list_add(elm, listelm->prev, listelm);
c0106487:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010648a:	8b 00                	mov    (%eax),%eax
c010648c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010648f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0106492:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0106495:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106498:	89 45 cc             	mov    %eax,-0x34(%ebp)
    prev->next = next->prev = elm;
c010649b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010649e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01064a1:	89 10                	mov    %edx,(%eax)
c01064a3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01064a6:	8b 10                	mov    (%eax),%edx
c01064a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01064ab:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01064ae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01064b1:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01064b4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01064b7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01064ba:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01064bd:	89 10                	mov    %edx,(%eax)
    for(p=base;p<base+n;p++){
c01064bf:	83 45 f0 20          	addl   $0x20,-0x10(%ebp)
c01064c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01064c6:	c1 e0 05             	shl    $0x5,%eax
c01064c9:	89 c2                	mov    %eax,%edx
c01064cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01064ce:	01 d0                	add    %edx,%eax
c01064d0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01064d3:	77 a3                	ja     c0106478 <default_free_pages+0xbc>
    }
    //修改页的各个属性置0
    base->flags = 0;
c01064d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01064d8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    set_page_ref(base, 0);
c01064df:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01064e6:	00 
c01064e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01064ea:	89 04 24             	mov    %eax,(%esp)
c01064ed:	e8 cb fb ff ff       	call   c01060bd <set_page_ref>
    ClearPageProperty(base);
c01064f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01064f5:	83 c0 04             	add    $0x4,%eax
c01064f8:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c01064ff:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0106502:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106505:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0106508:	0f b3 10             	btr    %edx,(%eax)
    SetPageProperty(base);
c010650b:	8b 45 08             	mov    0x8(%ebp),%eax
c010650e:	83 c0 04             	add    $0x4,%eax
c0106511:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0106518:	89 45 bc             	mov    %eax,-0x44(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010651b:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010651e:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0106521:	0f ab 10             	bts    %edx,(%eax)
    base->property = n;//有n空闲页
c0106524:	8b 45 08             	mov    0x8(%ebp),%eax
c0106527:	8b 55 0c             	mov    0xc(%ebp),%edx
c010652a:	89 50 08             	mov    %edx,0x8(%eax)
    p = le2page(le,page_link) ;
c010652d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106530:	83 e8 0c             	sub    $0xc,%eax
c0106533:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //和高位方向的下一个内存块的地址连续，向高位合并
    if( base+n == p ){
c0106536:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106539:	c1 e0 05             	shl    $0x5,%eax
c010653c:	89 c2                	mov    %eax,%edx
c010653e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106541:	01 d0                	add    %edx,%eax
c0106543:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106546:	75 1e                	jne    c0106566 <default_free_pages+0x1aa>
      base->property += p->property;
c0106548:	8b 45 08             	mov    0x8(%ebp),%eax
c010654b:	8b 50 08             	mov    0x8(%eax),%edx
c010654e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106551:	8b 40 08             	mov    0x8(%eax),%eax
c0106554:	01 c2                	add    %eax,%edx
c0106556:	8b 45 08             	mov    0x8(%ebp),%eax
c0106559:	89 50 08             	mov    %edx,0x8(%eax)
      p->property = 0;
c010655c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010655f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }
    //如果是低位,向低地址合并
    //把le指针指向前一个内存块
    le = list_prev(&(base->page_link));  //previous
c0106566:	8b 45 08             	mov    0x8(%ebp),%eax
c0106569:	83 c0 0c             	add    $0xc,%eax
c010656c:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return listelm->prev;
c010656f:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0106572:	8b 00                	mov    (%eax),%eax
c0106574:	89 45 f4             	mov    %eax,-0xc(%ebp)
    p = le2page(le, page_link);
c0106577:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010657a:	83 e8 0c             	sub    $0xc,%eax
c010657d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(le!=&free_list && p==base-1){
c0106580:	81 7d f4 a4 71 1c c0 	cmpl   $0xc01c71a4,-0xc(%ebp)
c0106587:	74 57                	je     c01065e0 <default_free_pages+0x224>
c0106589:	8b 45 08             	mov    0x8(%ebp),%eax
c010658c:	83 e8 20             	sub    $0x20,%eax
c010658f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106592:	75 4c                	jne    c01065e0 <default_free_pages+0x224>
      while(le!=&free_list){
c0106594:	eb 41                	jmp    c01065d7 <default_free_pages+0x21b>
        if(p->property){
c0106596:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106599:	8b 40 08             	mov    0x8(%eax),%eax
c010659c:	85 c0                	test   %eax,%eax
c010659e:	74 20                	je     c01065c0 <default_free_pages+0x204>
          p->property += base->property;
c01065a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01065a3:	8b 50 08             	mov    0x8(%eax),%edx
c01065a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01065a9:	8b 40 08             	mov    0x8(%eax),%eax
c01065ac:	01 c2                	add    %eax,%edx
c01065ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01065b1:	89 50 08             	mov    %edx,0x8(%eax)
          base->property = 0;
c01065b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01065b7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
          break;
c01065be:	eb 20                	jmp    c01065e0 <default_free_pages+0x224>
c01065c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01065c3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c01065c6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01065c9:	8b 00                	mov    (%eax),%eax
        }
        le = list_prev(le);
c01065cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
        p = le2page(le,page_link);
c01065ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01065d1:	83 e8 0c             	sub    $0xc,%eax
c01065d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
      while(le!=&free_list){
c01065d7:	81 7d f4 a4 71 1c c0 	cmpl   $0xc01c71a4,-0xc(%ebp)
c01065de:	75 b6                	jne    c0106596 <default_free_pages+0x1da>
      }
    }
   //更新总空闲页数
    nr_free += n;
c01065e0:	8b 15 ac 71 1c c0    	mov    0xc01c71ac,%edx
c01065e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01065e9:	01 d0                	add    %edx,%eax
c01065eb:	a3 ac 71 1c c0       	mov    %eax,0xc01c71ac
    return ;
c01065f0:	90                   	nop
}
c01065f1:	c9                   	leave  
c01065f2:	c3                   	ret    

c01065f3 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c01065f3:	55                   	push   %ebp
c01065f4:	89 e5                	mov    %esp,%ebp
    return nr_free;
c01065f6:	a1 ac 71 1c c0       	mov    0xc01c71ac,%eax
}
c01065fb:	5d                   	pop    %ebp
c01065fc:	c3                   	ret    

c01065fd <basic_check>:

static void
basic_check(void) {
c01065fd:	55                   	push   %ebp
c01065fe:	89 e5                	mov    %esp,%ebp
c0106600:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0106603:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010660a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010660d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106610:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106613:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0106616:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010661d:	e8 8d 0e 00 00       	call   c01074af <alloc_pages>
c0106622:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106625:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106629:	75 24                	jne    c010664f <basic_check+0x52>
c010662b:	c7 44 24 0c 20 ec 10 	movl   $0xc010ec20,0xc(%esp)
c0106632:	c0 
c0106633:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c010663a:	c0 
c010663b:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c0106642:	00 
c0106643:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c010664a:	e8 b6 9d ff ff       	call   c0100405 <__panic>
    assert((p1 = alloc_page()) != NULL);
c010664f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106656:	e8 54 0e 00 00       	call   c01074af <alloc_pages>
c010665b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010665e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106662:	75 24                	jne    c0106688 <basic_check+0x8b>
c0106664:	c7 44 24 0c 3c ec 10 	movl   $0xc010ec3c,0xc(%esp)
c010666b:	c0 
c010666c:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106673:	c0 
c0106674:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c010667b:	00 
c010667c:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106683:	e8 7d 9d ff ff       	call   c0100405 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0106688:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010668f:	e8 1b 0e 00 00       	call   c01074af <alloc_pages>
c0106694:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106697:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010669b:	75 24                	jne    c01066c1 <basic_check+0xc4>
c010669d:	c7 44 24 0c 58 ec 10 	movl   $0xc010ec58,0xc(%esp)
c01066a4:	c0 
c01066a5:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c01066ac:	c0 
c01066ad:	c7 44 24 04 dd 00 00 	movl   $0xdd,0x4(%esp)
c01066b4:	00 
c01066b5:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c01066bc:	e8 44 9d ff ff       	call   c0100405 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c01066c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01066c4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01066c7:	74 10                	je     c01066d9 <basic_check+0xdc>
c01066c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01066cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01066cf:	74 08                	je     c01066d9 <basic_check+0xdc>
c01066d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01066d4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01066d7:	75 24                	jne    c01066fd <basic_check+0x100>
c01066d9:	c7 44 24 0c 74 ec 10 	movl   $0xc010ec74,0xc(%esp)
c01066e0:	c0 
c01066e1:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c01066e8:	c0 
c01066e9:	c7 44 24 04 df 00 00 	movl   $0xdf,0x4(%esp)
c01066f0:	00 
c01066f1:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c01066f8:	e8 08 9d ff ff       	call   c0100405 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c01066fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106700:	89 04 24             	mov    %eax,(%esp)
c0106703:	e8 ab f9 ff ff       	call   c01060b3 <page_ref>
c0106708:	85 c0                	test   %eax,%eax
c010670a:	75 1e                	jne    c010672a <basic_check+0x12d>
c010670c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010670f:	89 04 24             	mov    %eax,(%esp)
c0106712:	e8 9c f9 ff ff       	call   c01060b3 <page_ref>
c0106717:	85 c0                	test   %eax,%eax
c0106719:	75 0f                	jne    c010672a <basic_check+0x12d>
c010671b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010671e:	89 04 24             	mov    %eax,(%esp)
c0106721:	e8 8d f9 ff ff       	call   c01060b3 <page_ref>
c0106726:	85 c0                	test   %eax,%eax
c0106728:	74 24                	je     c010674e <basic_check+0x151>
c010672a:	c7 44 24 0c 98 ec 10 	movl   $0xc010ec98,0xc(%esp)
c0106731:	c0 
c0106732:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106739:	c0 
c010673a:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0106741:	00 
c0106742:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106749:	e8 b7 9c ff ff       	call   c0100405 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c010674e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106751:	89 04 24             	mov    %eax,(%esp)
c0106754:	e8 44 f9 ff ff       	call   c010609d <page2pa>
c0106759:	8b 15 80 4f 1c c0    	mov    0xc01c4f80,%edx
c010675f:	c1 e2 0c             	shl    $0xc,%edx
c0106762:	39 d0                	cmp    %edx,%eax
c0106764:	72 24                	jb     c010678a <basic_check+0x18d>
c0106766:	c7 44 24 0c d4 ec 10 	movl   $0xc010ecd4,0xc(%esp)
c010676d:	c0 
c010676e:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106775:	c0 
c0106776:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
c010677d:	00 
c010677e:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106785:	e8 7b 9c ff ff       	call   c0100405 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c010678a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010678d:	89 04 24             	mov    %eax,(%esp)
c0106790:	e8 08 f9 ff ff       	call   c010609d <page2pa>
c0106795:	8b 15 80 4f 1c c0    	mov    0xc01c4f80,%edx
c010679b:	c1 e2 0c             	shl    $0xc,%edx
c010679e:	39 d0                	cmp    %edx,%eax
c01067a0:	72 24                	jb     c01067c6 <basic_check+0x1c9>
c01067a2:	c7 44 24 0c f1 ec 10 	movl   $0xc010ecf1,0xc(%esp)
c01067a9:	c0 
c01067aa:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c01067b1:	c0 
c01067b2:	c7 44 24 04 e3 00 00 	movl   $0xe3,0x4(%esp)
c01067b9:	00 
c01067ba:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c01067c1:	e8 3f 9c ff ff       	call   c0100405 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c01067c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01067c9:	89 04 24             	mov    %eax,(%esp)
c01067cc:	e8 cc f8 ff ff       	call   c010609d <page2pa>
c01067d1:	8b 15 80 4f 1c c0    	mov    0xc01c4f80,%edx
c01067d7:	c1 e2 0c             	shl    $0xc,%edx
c01067da:	39 d0                	cmp    %edx,%eax
c01067dc:	72 24                	jb     c0106802 <basic_check+0x205>
c01067de:	c7 44 24 0c 0e ed 10 	movl   $0xc010ed0e,0xc(%esp)
c01067e5:	c0 
c01067e6:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c01067ed:	c0 
c01067ee:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c01067f5:	00 
c01067f6:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c01067fd:	e8 03 9c ff ff       	call   c0100405 <__panic>

    list_entry_t free_list_store = free_list;
c0106802:	a1 a4 71 1c c0       	mov    0xc01c71a4,%eax
c0106807:	8b 15 a8 71 1c c0    	mov    0xc01c71a8,%edx
c010680d:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0106810:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0106813:	c7 45 e0 a4 71 1c c0 	movl   $0xc01c71a4,-0x20(%ebp)
    elm->prev = elm->next = elm;
c010681a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010681d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106820:	89 50 04             	mov    %edx,0x4(%eax)
c0106823:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106826:	8b 50 04             	mov    0x4(%eax),%edx
c0106829:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010682c:	89 10                	mov    %edx,(%eax)
c010682e:	c7 45 dc a4 71 1c c0 	movl   $0xc01c71a4,-0x24(%ebp)
    return list->next == list;
c0106835:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106838:	8b 40 04             	mov    0x4(%eax),%eax
c010683b:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c010683e:	0f 94 c0             	sete   %al
c0106841:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0106844:	85 c0                	test   %eax,%eax
c0106846:	75 24                	jne    c010686c <basic_check+0x26f>
c0106848:	c7 44 24 0c 2b ed 10 	movl   $0xc010ed2b,0xc(%esp)
c010684f:	c0 
c0106850:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106857:	c0 
c0106858:	c7 44 24 04 e8 00 00 	movl   $0xe8,0x4(%esp)
c010685f:	00 
c0106860:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106867:	e8 99 9b ff ff       	call   c0100405 <__panic>

    unsigned int nr_free_store = nr_free;
c010686c:	a1 ac 71 1c c0       	mov    0xc01c71ac,%eax
c0106871:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0106874:	c7 05 ac 71 1c c0 00 	movl   $0x0,0xc01c71ac
c010687b:	00 00 00 

    assert(alloc_page() == NULL);
c010687e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106885:	e8 25 0c 00 00       	call   c01074af <alloc_pages>
c010688a:	85 c0                	test   %eax,%eax
c010688c:	74 24                	je     c01068b2 <basic_check+0x2b5>
c010688e:	c7 44 24 0c 42 ed 10 	movl   $0xc010ed42,0xc(%esp)
c0106895:	c0 
c0106896:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c010689d:	c0 
c010689e:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c01068a5:	00 
c01068a6:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c01068ad:	e8 53 9b ff ff       	call   c0100405 <__panic>

    free_page(p0);
c01068b2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01068b9:	00 
c01068ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01068bd:	89 04 24             	mov    %eax,(%esp)
c01068c0:	e8 55 0c 00 00       	call   c010751a <free_pages>
    free_page(p1);
c01068c5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01068cc:	00 
c01068cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068d0:	89 04 24             	mov    %eax,(%esp)
c01068d3:	e8 42 0c 00 00       	call   c010751a <free_pages>
    free_page(p2);
c01068d8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01068df:	00 
c01068e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01068e3:	89 04 24             	mov    %eax,(%esp)
c01068e6:	e8 2f 0c 00 00       	call   c010751a <free_pages>
    assert(nr_free == 3);
c01068eb:	a1 ac 71 1c c0       	mov    0xc01c71ac,%eax
c01068f0:	83 f8 03             	cmp    $0x3,%eax
c01068f3:	74 24                	je     c0106919 <basic_check+0x31c>
c01068f5:	c7 44 24 0c 57 ed 10 	movl   $0xc010ed57,0xc(%esp)
c01068fc:	c0 
c01068fd:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106904:	c0 
c0106905:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c010690c:	00 
c010690d:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106914:	e8 ec 9a ff ff       	call   c0100405 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0106919:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106920:	e8 8a 0b 00 00       	call   c01074af <alloc_pages>
c0106925:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106928:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010692c:	75 24                	jne    c0106952 <basic_check+0x355>
c010692e:	c7 44 24 0c 20 ec 10 	movl   $0xc010ec20,0xc(%esp)
c0106935:	c0 
c0106936:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c010693d:	c0 
c010693e:	c7 44 24 04 f4 00 00 	movl   $0xf4,0x4(%esp)
c0106945:	00 
c0106946:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c010694d:	e8 b3 9a ff ff       	call   c0100405 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0106952:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106959:	e8 51 0b 00 00       	call   c01074af <alloc_pages>
c010695e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106961:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106965:	75 24                	jne    c010698b <basic_check+0x38e>
c0106967:	c7 44 24 0c 3c ec 10 	movl   $0xc010ec3c,0xc(%esp)
c010696e:	c0 
c010696f:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106976:	c0 
c0106977:	c7 44 24 04 f5 00 00 	movl   $0xf5,0x4(%esp)
c010697e:	00 
c010697f:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106986:	e8 7a 9a ff ff       	call   c0100405 <__panic>
    assert((p2 = alloc_page()) != NULL);
c010698b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106992:	e8 18 0b 00 00       	call   c01074af <alloc_pages>
c0106997:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010699a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010699e:	75 24                	jne    c01069c4 <basic_check+0x3c7>
c01069a0:	c7 44 24 0c 58 ec 10 	movl   $0xc010ec58,0xc(%esp)
c01069a7:	c0 
c01069a8:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c01069af:	c0 
c01069b0:	c7 44 24 04 f6 00 00 	movl   $0xf6,0x4(%esp)
c01069b7:	00 
c01069b8:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c01069bf:	e8 41 9a ff ff       	call   c0100405 <__panic>

    assert(alloc_page() == NULL);
c01069c4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01069cb:	e8 df 0a 00 00       	call   c01074af <alloc_pages>
c01069d0:	85 c0                	test   %eax,%eax
c01069d2:	74 24                	je     c01069f8 <basic_check+0x3fb>
c01069d4:	c7 44 24 0c 42 ed 10 	movl   $0xc010ed42,0xc(%esp)
c01069db:	c0 
c01069dc:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c01069e3:	c0 
c01069e4:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
c01069eb:	00 
c01069ec:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c01069f3:	e8 0d 9a ff ff       	call   c0100405 <__panic>

    free_page(p0);
c01069f8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01069ff:	00 
c0106a00:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106a03:	89 04 24             	mov    %eax,(%esp)
c0106a06:	e8 0f 0b 00 00       	call   c010751a <free_pages>
c0106a0b:	c7 45 d8 a4 71 1c c0 	movl   $0xc01c71a4,-0x28(%ebp)
c0106a12:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106a15:	8b 40 04             	mov    0x4(%eax),%eax
c0106a18:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0106a1b:	0f 94 c0             	sete   %al
c0106a1e:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0106a21:	85 c0                	test   %eax,%eax
c0106a23:	74 24                	je     c0106a49 <basic_check+0x44c>
c0106a25:	c7 44 24 0c 64 ed 10 	movl   $0xc010ed64,0xc(%esp)
c0106a2c:	c0 
c0106a2d:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106a34:	c0 
c0106a35:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c0106a3c:	00 
c0106a3d:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106a44:	e8 bc 99 ff ff       	call   c0100405 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0106a49:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106a50:	e8 5a 0a 00 00       	call   c01074af <alloc_pages>
c0106a55:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106a58:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106a5b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106a5e:	74 24                	je     c0106a84 <basic_check+0x487>
c0106a60:	c7 44 24 0c 7c ed 10 	movl   $0xc010ed7c,0xc(%esp)
c0106a67:	c0 
c0106a68:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106a6f:	c0 
c0106a70:	c7 44 24 04 fe 00 00 	movl   $0xfe,0x4(%esp)
c0106a77:	00 
c0106a78:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106a7f:	e8 81 99 ff ff       	call   c0100405 <__panic>
    assert(alloc_page() == NULL);
c0106a84:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106a8b:	e8 1f 0a 00 00       	call   c01074af <alloc_pages>
c0106a90:	85 c0                	test   %eax,%eax
c0106a92:	74 24                	je     c0106ab8 <basic_check+0x4bb>
c0106a94:	c7 44 24 0c 42 ed 10 	movl   $0xc010ed42,0xc(%esp)
c0106a9b:	c0 
c0106a9c:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106aa3:	c0 
c0106aa4:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
c0106aab:	00 
c0106aac:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106ab3:	e8 4d 99 ff ff       	call   c0100405 <__panic>

    assert(nr_free == 0);
c0106ab8:	a1 ac 71 1c c0       	mov    0xc01c71ac,%eax
c0106abd:	85 c0                	test   %eax,%eax
c0106abf:	74 24                	je     c0106ae5 <basic_check+0x4e8>
c0106ac1:	c7 44 24 0c 95 ed 10 	movl   $0xc010ed95,0xc(%esp)
c0106ac8:	c0 
c0106ac9:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106ad0:	c0 
c0106ad1:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0106ad8:	00 
c0106ad9:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106ae0:	e8 20 99 ff ff       	call   c0100405 <__panic>
    free_list = free_list_store;
c0106ae5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106ae8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106aeb:	a3 a4 71 1c c0       	mov    %eax,0xc01c71a4
c0106af0:	89 15 a8 71 1c c0    	mov    %edx,0xc01c71a8
    nr_free = nr_free_store;
c0106af6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106af9:	a3 ac 71 1c c0       	mov    %eax,0xc01c71ac

    free_page(p);
c0106afe:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106b05:	00 
c0106b06:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106b09:	89 04 24             	mov    %eax,(%esp)
c0106b0c:	e8 09 0a 00 00       	call   c010751a <free_pages>
    free_page(p1);
c0106b11:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106b18:	00 
c0106b19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106b1c:	89 04 24             	mov    %eax,(%esp)
c0106b1f:	e8 f6 09 00 00       	call   c010751a <free_pages>
    free_page(p2);
c0106b24:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106b2b:	00 
c0106b2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b2f:	89 04 24             	mov    %eax,(%esp)
c0106b32:	e8 e3 09 00 00       	call   c010751a <free_pages>
}
c0106b37:	c9                   	leave  
c0106b38:	c3                   	ret    

c0106b39 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0106b39:	55                   	push   %ebp
c0106b3a:	89 e5                	mov    %esp,%ebp
c0106b3c:	53                   	push   %ebx
c0106b3d:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0106b43:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106b4a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0106b51:	c7 45 ec a4 71 1c c0 	movl   $0xc01c71a4,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0106b58:	eb 6b                	jmp    c0106bc5 <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c0106b5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106b5d:	83 e8 0c             	sub    $0xc,%eax
c0106b60:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0106b63:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106b66:	83 c0 04             	add    $0x4,%eax
c0106b69:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0106b70:	89 45 cc             	mov    %eax,-0x34(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106b73:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0106b76:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0106b79:	0f a3 10             	bt     %edx,(%eax)
c0106b7c:	19 c0                	sbb    %eax,%eax
c0106b7e:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c0106b81:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0106b85:	0f 95 c0             	setne  %al
c0106b88:	0f b6 c0             	movzbl %al,%eax
c0106b8b:	85 c0                	test   %eax,%eax
c0106b8d:	75 24                	jne    c0106bb3 <default_check+0x7a>
c0106b8f:	c7 44 24 0c a2 ed 10 	movl   $0xc010eda2,0xc(%esp)
c0106b96:	c0 
c0106b97:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106b9e:	c0 
c0106b9f:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c0106ba6:	00 
c0106ba7:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106bae:	e8 52 98 ff ff       	call   c0100405 <__panic>
        count ++, total += p->property;
c0106bb3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106bb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106bba:	8b 50 08             	mov    0x8(%eax),%edx
c0106bbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106bc0:	01 d0                	add    %edx,%eax
c0106bc2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106bc5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106bc8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    return listelm->next;
c0106bcb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106bce:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != &free_list) {
c0106bd1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106bd4:	81 7d ec a4 71 1c c0 	cmpl   $0xc01c71a4,-0x14(%ebp)
c0106bdb:	0f 85 79 ff ff ff    	jne    c0106b5a <default_check+0x21>
    }
    assert(total == nr_free_pages());
c0106be1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0106be4:	e8 63 09 00 00       	call   c010754c <nr_free_pages>
c0106be9:	39 c3                	cmp    %eax,%ebx
c0106beb:	74 24                	je     c0106c11 <default_check+0xd8>
c0106bed:	c7 44 24 0c b2 ed 10 	movl   $0xc010edb2,0xc(%esp)
c0106bf4:	c0 
c0106bf5:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106bfc:	c0 
c0106bfd:	c7 44 24 04 15 01 00 	movl   $0x115,0x4(%esp)
c0106c04:	00 
c0106c05:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106c0c:	e8 f4 97 ff ff       	call   c0100405 <__panic>

    basic_check();
c0106c11:	e8 e7 f9 ff ff       	call   c01065fd <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0106c16:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0106c1d:	e8 8d 08 00 00       	call   c01074af <alloc_pages>
c0106c22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c0106c25:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106c29:	75 24                	jne    c0106c4f <default_check+0x116>
c0106c2b:	c7 44 24 0c cb ed 10 	movl   $0xc010edcb,0xc(%esp)
c0106c32:	c0 
c0106c33:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106c3a:	c0 
c0106c3b:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c0106c42:	00 
c0106c43:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106c4a:	e8 b6 97 ff ff       	call   c0100405 <__panic>
    assert(!PageProperty(p0));
c0106c4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c52:	83 c0 04             	add    $0x4,%eax
c0106c55:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0106c5c:	89 45 bc             	mov    %eax,-0x44(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106c5f:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0106c62:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0106c65:	0f a3 10             	bt     %edx,(%eax)
c0106c68:	19 c0                	sbb    %eax,%eax
c0106c6a:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c0106c6d:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0106c71:	0f 95 c0             	setne  %al
c0106c74:	0f b6 c0             	movzbl %al,%eax
c0106c77:	85 c0                	test   %eax,%eax
c0106c79:	74 24                	je     c0106c9f <default_check+0x166>
c0106c7b:	c7 44 24 0c d6 ed 10 	movl   $0xc010edd6,0xc(%esp)
c0106c82:	c0 
c0106c83:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106c8a:	c0 
c0106c8b:	c7 44 24 04 1b 01 00 	movl   $0x11b,0x4(%esp)
c0106c92:	00 
c0106c93:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106c9a:	e8 66 97 ff ff       	call   c0100405 <__panic>

    list_entry_t free_list_store = free_list;
c0106c9f:	a1 a4 71 1c c0       	mov    0xc01c71a4,%eax
c0106ca4:	8b 15 a8 71 1c c0    	mov    0xc01c71a8,%edx
c0106caa:	89 45 80             	mov    %eax,-0x80(%ebp)
c0106cad:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0106cb0:	c7 45 b4 a4 71 1c c0 	movl   $0xc01c71a4,-0x4c(%ebp)
    elm->prev = elm->next = elm;
c0106cb7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106cba:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0106cbd:	89 50 04             	mov    %edx,0x4(%eax)
c0106cc0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106cc3:	8b 50 04             	mov    0x4(%eax),%edx
c0106cc6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106cc9:	89 10                	mov    %edx,(%eax)
c0106ccb:	c7 45 b0 a4 71 1c c0 	movl   $0xc01c71a4,-0x50(%ebp)
    return list->next == list;
c0106cd2:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0106cd5:	8b 40 04             	mov    0x4(%eax),%eax
c0106cd8:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c0106cdb:	0f 94 c0             	sete   %al
c0106cde:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0106ce1:	85 c0                	test   %eax,%eax
c0106ce3:	75 24                	jne    c0106d09 <default_check+0x1d0>
c0106ce5:	c7 44 24 0c 2b ed 10 	movl   $0xc010ed2b,0xc(%esp)
c0106cec:	c0 
c0106ced:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106cf4:	c0 
c0106cf5:	c7 44 24 04 1f 01 00 	movl   $0x11f,0x4(%esp)
c0106cfc:	00 
c0106cfd:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106d04:	e8 fc 96 ff ff       	call   c0100405 <__panic>
    assert(alloc_page() == NULL);
c0106d09:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106d10:	e8 9a 07 00 00       	call   c01074af <alloc_pages>
c0106d15:	85 c0                	test   %eax,%eax
c0106d17:	74 24                	je     c0106d3d <default_check+0x204>
c0106d19:	c7 44 24 0c 42 ed 10 	movl   $0xc010ed42,0xc(%esp)
c0106d20:	c0 
c0106d21:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106d28:	c0 
c0106d29:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c0106d30:	00 
c0106d31:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106d38:	e8 c8 96 ff ff       	call   c0100405 <__panic>

    unsigned int nr_free_store = nr_free;
c0106d3d:	a1 ac 71 1c c0       	mov    0xc01c71ac,%eax
c0106d42:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0106d45:	c7 05 ac 71 1c c0 00 	movl   $0x0,0xc01c71ac
c0106d4c:	00 00 00 

    free_pages(p0 + 2, 3);
c0106d4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d52:	83 c0 40             	add    $0x40,%eax
c0106d55:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0106d5c:	00 
c0106d5d:	89 04 24             	mov    %eax,(%esp)
c0106d60:	e8 b5 07 00 00       	call   c010751a <free_pages>
    assert(alloc_pages(4) == NULL);
c0106d65:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0106d6c:	e8 3e 07 00 00       	call   c01074af <alloc_pages>
c0106d71:	85 c0                	test   %eax,%eax
c0106d73:	74 24                	je     c0106d99 <default_check+0x260>
c0106d75:	c7 44 24 0c e8 ed 10 	movl   $0xc010ede8,0xc(%esp)
c0106d7c:	c0 
c0106d7d:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106d84:	c0 
c0106d85:	c7 44 24 04 26 01 00 	movl   $0x126,0x4(%esp)
c0106d8c:	00 
c0106d8d:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106d94:	e8 6c 96 ff ff       	call   c0100405 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c0106d99:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d9c:	83 c0 40             	add    $0x40,%eax
c0106d9f:	83 c0 04             	add    $0x4,%eax
c0106da2:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c0106da9:	89 45 a8             	mov    %eax,-0x58(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106dac:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0106daf:	8b 55 ac             	mov    -0x54(%ebp),%edx
c0106db2:	0f a3 10             	bt     %edx,(%eax)
c0106db5:	19 c0                	sbb    %eax,%eax
c0106db7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c0106dba:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c0106dbe:	0f 95 c0             	setne  %al
c0106dc1:	0f b6 c0             	movzbl %al,%eax
c0106dc4:	85 c0                	test   %eax,%eax
c0106dc6:	74 0e                	je     c0106dd6 <default_check+0x29d>
c0106dc8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106dcb:	83 c0 40             	add    $0x40,%eax
c0106dce:	8b 40 08             	mov    0x8(%eax),%eax
c0106dd1:	83 f8 03             	cmp    $0x3,%eax
c0106dd4:	74 24                	je     c0106dfa <default_check+0x2c1>
c0106dd6:	c7 44 24 0c 00 ee 10 	movl   $0xc010ee00,0xc(%esp)
c0106ddd:	c0 
c0106dde:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106de5:	c0 
c0106de6:	c7 44 24 04 27 01 00 	movl   $0x127,0x4(%esp)
c0106ded:	00 
c0106dee:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106df5:	e8 0b 96 ff ff       	call   c0100405 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0106dfa:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c0106e01:	e8 a9 06 00 00       	call   c01074af <alloc_pages>
c0106e06:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106e09:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0106e0d:	75 24                	jne    c0106e33 <default_check+0x2fa>
c0106e0f:	c7 44 24 0c 2c ee 10 	movl   $0xc010ee2c,0xc(%esp)
c0106e16:	c0 
c0106e17:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106e1e:	c0 
c0106e1f:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c0106e26:	00 
c0106e27:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106e2e:	e8 d2 95 ff ff       	call   c0100405 <__panic>
    assert(alloc_page() == NULL);
c0106e33:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106e3a:	e8 70 06 00 00       	call   c01074af <alloc_pages>
c0106e3f:	85 c0                	test   %eax,%eax
c0106e41:	74 24                	je     c0106e67 <default_check+0x32e>
c0106e43:	c7 44 24 0c 42 ed 10 	movl   $0xc010ed42,0xc(%esp)
c0106e4a:	c0 
c0106e4b:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106e52:	c0 
c0106e53:	c7 44 24 04 29 01 00 	movl   $0x129,0x4(%esp)
c0106e5a:	00 
c0106e5b:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106e62:	e8 9e 95 ff ff       	call   c0100405 <__panic>
    assert(p0 + 2 == p1);
c0106e67:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106e6a:	83 c0 40             	add    $0x40,%eax
c0106e6d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0106e70:	74 24                	je     c0106e96 <default_check+0x35d>
c0106e72:	c7 44 24 0c 4a ee 10 	movl   $0xc010ee4a,0xc(%esp)
c0106e79:	c0 
c0106e7a:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106e81:	c0 
c0106e82:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c0106e89:	00 
c0106e8a:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106e91:	e8 6f 95 ff ff       	call   c0100405 <__panic>

    p2 = p0 + 1;
c0106e96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106e99:	83 c0 20             	add    $0x20,%eax
c0106e9c:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c0106e9f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106ea6:	00 
c0106ea7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106eaa:	89 04 24             	mov    %eax,(%esp)
c0106ead:	e8 68 06 00 00       	call   c010751a <free_pages>
    free_pages(p1, 3);
c0106eb2:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0106eb9:	00 
c0106eba:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106ebd:	89 04 24             	mov    %eax,(%esp)
c0106ec0:	e8 55 06 00 00       	call   c010751a <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c0106ec5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106ec8:	83 c0 04             	add    $0x4,%eax
c0106ecb:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c0106ed2:	89 45 9c             	mov    %eax,-0x64(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106ed5:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0106ed8:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0106edb:	0f a3 10             	bt     %edx,(%eax)
c0106ede:	19 c0                	sbb    %eax,%eax
c0106ee0:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0106ee3:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0106ee7:	0f 95 c0             	setne  %al
c0106eea:	0f b6 c0             	movzbl %al,%eax
c0106eed:	85 c0                	test   %eax,%eax
c0106eef:	74 0b                	je     c0106efc <default_check+0x3c3>
c0106ef1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106ef4:	8b 40 08             	mov    0x8(%eax),%eax
c0106ef7:	83 f8 01             	cmp    $0x1,%eax
c0106efa:	74 24                	je     c0106f20 <default_check+0x3e7>
c0106efc:	c7 44 24 0c 58 ee 10 	movl   $0xc010ee58,0xc(%esp)
c0106f03:	c0 
c0106f04:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106f0b:	c0 
c0106f0c:	c7 44 24 04 2f 01 00 	movl   $0x12f,0x4(%esp)
c0106f13:	00 
c0106f14:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106f1b:	e8 e5 94 ff ff       	call   c0100405 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0106f20:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106f23:	83 c0 04             	add    $0x4,%eax
c0106f26:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c0106f2d:	89 45 90             	mov    %eax,-0x70(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106f30:	8b 45 90             	mov    -0x70(%ebp),%eax
c0106f33:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0106f36:	0f a3 10             	bt     %edx,(%eax)
c0106f39:	19 c0                	sbb    %eax,%eax
c0106f3b:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c0106f3e:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c0106f42:	0f 95 c0             	setne  %al
c0106f45:	0f b6 c0             	movzbl %al,%eax
c0106f48:	85 c0                	test   %eax,%eax
c0106f4a:	74 0b                	je     c0106f57 <default_check+0x41e>
c0106f4c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106f4f:	8b 40 08             	mov    0x8(%eax),%eax
c0106f52:	83 f8 03             	cmp    $0x3,%eax
c0106f55:	74 24                	je     c0106f7b <default_check+0x442>
c0106f57:	c7 44 24 0c 80 ee 10 	movl   $0xc010ee80,0xc(%esp)
c0106f5e:	c0 
c0106f5f:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106f66:	c0 
c0106f67:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0106f6e:	00 
c0106f6f:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106f76:	e8 8a 94 ff ff       	call   c0100405 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0106f7b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106f82:	e8 28 05 00 00       	call   c01074af <alloc_pages>
c0106f87:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106f8a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106f8d:	83 e8 20             	sub    $0x20,%eax
c0106f90:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0106f93:	74 24                	je     c0106fb9 <default_check+0x480>
c0106f95:	c7 44 24 0c a6 ee 10 	movl   $0xc010eea6,0xc(%esp)
c0106f9c:	c0 
c0106f9d:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106fa4:	c0 
c0106fa5:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0106fac:	00 
c0106fad:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0106fb4:	e8 4c 94 ff ff       	call   c0100405 <__panic>
    free_page(p0);
c0106fb9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106fc0:	00 
c0106fc1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106fc4:	89 04 24             	mov    %eax,(%esp)
c0106fc7:	e8 4e 05 00 00       	call   c010751a <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c0106fcc:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0106fd3:	e8 d7 04 00 00       	call   c01074af <alloc_pages>
c0106fd8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106fdb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106fde:	83 c0 20             	add    $0x20,%eax
c0106fe1:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0106fe4:	74 24                	je     c010700a <default_check+0x4d1>
c0106fe6:	c7 44 24 0c c4 ee 10 	movl   $0xc010eec4,0xc(%esp)
c0106fed:	c0 
c0106fee:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0106ff5:	c0 
c0106ff6:	c7 44 24 04 34 01 00 	movl   $0x134,0x4(%esp)
c0106ffd:	00 
c0106ffe:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0107005:	e8 fb 93 ff ff       	call   c0100405 <__panic>

    free_pages(p0, 2);
c010700a:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0107011:	00 
c0107012:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107015:	89 04 24             	mov    %eax,(%esp)
c0107018:	e8 fd 04 00 00       	call   c010751a <free_pages>
    free_page(p2);
c010701d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107024:	00 
c0107025:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107028:	89 04 24             	mov    %eax,(%esp)
c010702b:	e8 ea 04 00 00       	call   c010751a <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c0107030:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0107037:	e8 73 04 00 00       	call   c01074af <alloc_pages>
c010703c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010703f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107043:	75 24                	jne    c0107069 <default_check+0x530>
c0107045:	c7 44 24 0c e4 ee 10 	movl   $0xc010eee4,0xc(%esp)
c010704c:	c0 
c010704d:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0107054:	c0 
c0107055:	c7 44 24 04 39 01 00 	movl   $0x139,0x4(%esp)
c010705c:	00 
c010705d:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0107064:	e8 9c 93 ff ff       	call   c0100405 <__panic>
    assert(alloc_page() == NULL);
c0107069:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107070:	e8 3a 04 00 00       	call   c01074af <alloc_pages>
c0107075:	85 c0                	test   %eax,%eax
c0107077:	74 24                	je     c010709d <default_check+0x564>
c0107079:	c7 44 24 0c 42 ed 10 	movl   $0xc010ed42,0xc(%esp)
c0107080:	c0 
c0107081:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0107088:	c0 
c0107089:	c7 44 24 04 3a 01 00 	movl   $0x13a,0x4(%esp)
c0107090:	00 
c0107091:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0107098:	e8 68 93 ff ff       	call   c0100405 <__panic>

    assert(nr_free == 0);
c010709d:	a1 ac 71 1c c0       	mov    0xc01c71ac,%eax
c01070a2:	85 c0                	test   %eax,%eax
c01070a4:	74 24                	je     c01070ca <default_check+0x591>
c01070a6:	c7 44 24 0c 95 ed 10 	movl   $0xc010ed95,0xc(%esp)
c01070ad:	c0 
c01070ae:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c01070b5:	c0 
c01070b6:	c7 44 24 04 3c 01 00 	movl   $0x13c,0x4(%esp)
c01070bd:	00 
c01070be:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c01070c5:	e8 3b 93 ff ff       	call   c0100405 <__panic>
    nr_free = nr_free_store;
c01070ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01070cd:	a3 ac 71 1c c0       	mov    %eax,0xc01c71ac

    free_list = free_list_store;
c01070d2:	8b 45 80             	mov    -0x80(%ebp),%eax
c01070d5:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01070d8:	a3 a4 71 1c c0       	mov    %eax,0xc01c71a4
c01070dd:	89 15 a8 71 1c c0    	mov    %edx,0xc01c71a8
    free_pages(p0, 5);
c01070e3:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c01070ea:	00 
c01070eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01070ee:	89 04 24             	mov    %eax,(%esp)
c01070f1:	e8 24 04 00 00       	call   c010751a <free_pages>

    le = &free_list;
c01070f6:	c7 45 ec a4 71 1c c0 	movl   $0xc01c71a4,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01070fd:	eb 1d                	jmp    c010711c <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c01070ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107102:	83 e8 0c             	sub    $0xc,%eax
c0107105:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c0107108:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010710c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010710f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107112:	8b 40 08             	mov    0x8(%eax),%eax
c0107115:	29 c2                	sub    %eax,%edx
c0107117:	89 d0                	mov    %edx,%eax
c0107119:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010711c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010711f:	89 45 88             	mov    %eax,-0x78(%ebp)
    return listelm->next;
c0107122:	8b 45 88             	mov    -0x78(%ebp),%eax
c0107125:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != &free_list) {
c0107128:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010712b:	81 7d ec a4 71 1c c0 	cmpl   $0xc01c71a4,-0x14(%ebp)
c0107132:	75 cb                	jne    c01070ff <default_check+0x5c6>
    }
    assert(count == 0);
c0107134:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107138:	74 24                	je     c010715e <default_check+0x625>
c010713a:	c7 44 24 0c 02 ef 10 	movl   $0xc010ef02,0xc(%esp)
c0107141:	c0 
c0107142:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0107149:	c0 
c010714a:	c7 44 24 04 47 01 00 	movl   $0x147,0x4(%esp)
c0107151:	00 
c0107152:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0107159:	e8 a7 92 ff ff       	call   c0100405 <__panic>
    assert(total == 0);
c010715e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107162:	74 24                	je     c0107188 <default_check+0x64f>
c0107164:	c7 44 24 0c 0d ef 10 	movl   $0xc010ef0d,0xc(%esp)
c010716b:	c0 
c010716c:	c7 44 24 08 d2 eb 10 	movl   $0xc010ebd2,0x8(%esp)
c0107173:	c0 
c0107174:	c7 44 24 04 48 01 00 	movl   $0x148,0x4(%esp)
c010717b:	00 
c010717c:	c7 04 24 e7 eb 10 c0 	movl   $0xc010ebe7,(%esp)
c0107183:	e8 7d 92 ff ff       	call   c0100405 <__panic>
}
c0107188:	81 c4 94 00 00 00    	add    $0x94,%esp
c010718e:	5b                   	pop    %ebx
c010718f:	5d                   	pop    %ebp
c0107190:	c3                   	ret    

c0107191 <page2ppn>:
page2ppn(struct Page *page) {
c0107191:	55                   	push   %ebp
c0107192:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0107194:	8b 55 08             	mov    0x8(%ebp),%edx
c0107197:	a1 b8 71 1c c0       	mov    0xc01c71b8,%eax
c010719c:	29 c2                	sub    %eax,%edx
c010719e:	89 d0                	mov    %edx,%eax
c01071a0:	c1 f8 05             	sar    $0x5,%eax
}
c01071a3:	5d                   	pop    %ebp
c01071a4:	c3                   	ret    

c01071a5 <page2pa>:
page2pa(struct Page *page) {
c01071a5:	55                   	push   %ebp
c01071a6:	89 e5                	mov    %esp,%ebp
c01071a8:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01071ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01071ae:	89 04 24             	mov    %eax,(%esp)
c01071b1:	e8 db ff ff ff       	call   c0107191 <page2ppn>
c01071b6:	c1 e0 0c             	shl    $0xc,%eax
}
c01071b9:	c9                   	leave  
c01071ba:	c3                   	ret    

c01071bb <pa2page>:
pa2page(uintptr_t pa) {
c01071bb:	55                   	push   %ebp
c01071bc:	89 e5                	mov    %esp,%ebp
c01071be:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c01071c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01071c4:	c1 e8 0c             	shr    $0xc,%eax
c01071c7:	89 c2                	mov    %eax,%edx
c01071c9:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c01071ce:	39 c2                	cmp    %eax,%edx
c01071d0:	72 1c                	jb     c01071ee <pa2page+0x33>
        panic("pa2page called with invalid pa");
c01071d2:	c7 44 24 08 48 ef 10 	movl   $0xc010ef48,0x8(%esp)
c01071d9:	c0 
c01071da:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c01071e1:	00 
c01071e2:	c7 04 24 67 ef 10 c0 	movl   $0xc010ef67,(%esp)
c01071e9:	e8 17 92 ff ff       	call   c0100405 <__panic>
    return &pages[PPN(pa)];
c01071ee:	a1 b8 71 1c c0       	mov    0xc01c71b8,%eax
c01071f3:	8b 55 08             	mov    0x8(%ebp),%edx
c01071f6:	c1 ea 0c             	shr    $0xc,%edx
c01071f9:	c1 e2 05             	shl    $0x5,%edx
c01071fc:	01 d0                	add    %edx,%eax
}
c01071fe:	c9                   	leave  
c01071ff:	c3                   	ret    

c0107200 <page2kva>:
page2kva(struct Page *page) {
c0107200:	55                   	push   %ebp
c0107201:	89 e5                	mov    %esp,%ebp
c0107203:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0107206:	8b 45 08             	mov    0x8(%ebp),%eax
c0107209:	89 04 24             	mov    %eax,(%esp)
c010720c:	e8 94 ff ff ff       	call   c01071a5 <page2pa>
c0107211:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107214:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107217:	c1 e8 0c             	shr    $0xc,%eax
c010721a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010721d:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0107222:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0107225:	72 23                	jb     c010724a <page2kva+0x4a>
c0107227:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010722a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010722e:	c7 44 24 08 78 ef 10 	movl   $0xc010ef78,0x8(%esp)
c0107235:	c0 
c0107236:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010723d:	00 
c010723e:	c7 04 24 67 ef 10 c0 	movl   $0xc010ef67,(%esp)
c0107245:	e8 bb 91 ff ff       	call   c0100405 <__panic>
c010724a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010724d:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0107252:	c9                   	leave  
c0107253:	c3                   	ret    

c0107254 <pte2page>:
pte2page(pte_t pte) {
c0107254:	55                   	push   %ebp
c0107255:	89 e5                	mov    %esp,%ebp
c0107257:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c010725a:	8b 45 08             	mov    0x8(%ebp),%eax
c010725d:	83 e0 01             	and    $0x1,%eax
c0107260:	85 c0                	test   %eax,%eax
c0107262:	75 1c                	jne    c0107280 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0107264:	c7 44 24 08 9c ef 10 	movl   $0xc010ef9c,0x8(%esp)
c010726b:	c0 
c010726c:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0107273:	00 
c0107274:	c7 04 24 67 ef 10 c0 	movl   $0xc010ef67,(%esp)
c010727b:	e8 85 91 ff ff       	call   c0100405 <__panic>
    return pa2page(PTE_ADDR(pte));
c0107280:	8b 45 08             	mov    0x8(%ebp),%eax
c0107283:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107288:	89 04 24             	mov    %eax,(%esp)
c010728b:	e8 2b ff ff ff       	call   c01071bb <pa2page>
}
c0107290:	c9                   	leave  
c0107291:	c3                   	ret    

c0107292 <pde2page>:
pde2page(pde_t pde) {
c0107292:	55                   	push   %ebp
c0107293:	89 e5                	mov    %esp,%ebp
c0107295:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0107298:	8b 45 08             	mov    0x8(%ebp),%eax
c010729b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01072a0:	89 04 24             	mov    %eax,(%esp)
c01072a3:	e8 13 ff ff ff       	call   c01071bb <pa2page>
}
c01072a8:	c9                   	leave  
c01072a9:	c3                   	ret    

c01072aa <page_ref>:
page_ref(struct Page *page) {
c01072aa:	55                   	push   %ebp
c01072ab:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01072ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01072b0:	8b 00                	mov    (%eax),%eax
}
c01072b2:	5d                   	pop    %ebp
c01072b3:	c3                   	ret    

c01072b4 <set_page_ref>:
set_page_ref(struct Page *page, int val) {
c01072b4:	55                   	push   %ebp
c01072b5:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01072b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01072ba:	8b 55 0c             	mov    0xc(%ebp),%edx
c01072bd:	89 10                	mov    %edx,(%eax)
}
c01072bf:	5d                   	pop    %ebp
c01072c0:	c3                   	ret    

c01072c1 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c01072c1:	55                   	push   %ebp
c01072c2:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c01072c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01072c7:	8b 00                	mov    (%eax),%eax
c01072c9:	8d 50 01             	lea    0x1(%eax),%edx
c01072cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01072cf:	89 10                	mov    %edx,(%eax)
    return page->ref;
c01072d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01072d4:	8b 00                	mov    (%eax),%eax
}
c01072d6:	5d                   	pop    %ebp
c01072d7:	c3                   	ret    

c01072d8 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c01072d8:	55                   	push   %ebp
c01072d9:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c01072db:	8b 45 08             	mov    0x8(%ebp),%eax
c01072de:	8b 00                	mov    (%eax),%eax
c01072e0:	8d 50 ff             	lea    -0x1(%eax),%edx
c01072e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01072e6:	89 10                	mov    %edx,(%eax)
    return page->ref;
c01072e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01072eb:	8b 00                	mov    (%eax),%eax
}
c01072ed:	5d                   	pop    %ebp
c01072ee:	c3                   	ret    

c01072ef <__intr_save>:
__intr_save(void) {
c01072ef:	55                   	push   %ebp
c01072f0:	89 e5                	mov    %esp,%ebp
c01072f2:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01072f5:	9c                   	pushf  
c01072f6:	58                   	pop    %eax
c01072f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01072fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01072fd:	25 00 02 00 00       	and    $0x200,%eax
c0107302:	85 c0                	test   %eax,%eax
c0107304:	74 0c                	je     c0107312 <__intr_save+0x23>
        intr_disable();
c0107306:	e8 0f af ff ff       	call   c010221a <intr_disable>
        return 1;
c010730b:	b8 01 00 00 00       	mov    $0x1,%eax
c0107310:	eb 05                	jmp    c0107317 <__intr_save+0x28>
    return 0;
c0107312:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107317:	c9                   	leave  
c0107318:	c3                   	ret    

c0107319 <__intr_restore>:
__intr_restore(bool flag) {
c0107319:	55                   	push   %ebp
c010731a:	89 e5                	mov    %esp,%ebp
c010731c:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010731f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107323:	74 05                	je     c010732a <__intr_restore+0x11>
        intr_enable();
c0107325:	e8 ea ae ff ff       	call   c0102214 <intr_enable>
}
c010732a:	c9                   	leave  
c010732b:	c3                   	ret    

c010732c <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c010732c:	55                   	push   %ebp
c010732d:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c010732f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107332:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0107335:	b8 23 00 00 00       	mov    $0x23,%eax
c010733a:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c010733c:	b8 23 00 00 00       	mov    $0x23,%eax
c0107341:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0107343:	b8 10 00 00 00       	mov    $0x10,%eax
c0107348:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c010734a:	b8 10 00 00 00       	mov    $0x10,%eax
c010734f:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0107351:	b8 10 00 00 00       	mov    $0x10,%eax
c0107356:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0107358:	ea 5f 73 10 c0 08 00 	ljmp   $0x8,$0xc010735f
}
c010735f:	5d                   	pop    %ebp
c0107360:	c3                   	ret    

c0107361 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0107361:	55                   	push   %ebp
c0107362:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0107364:	8b 45 08             	mov    0x8(%ebp),%eax
c0107367:	a3 a4 4f 1c c0       	mov    %eax,0xc01c4fa4
}
c010736c:	5d                   	pop    %ebp
c010736d:	c3                   	ret    

c010736e <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c010736e:	55                   	push   %ebp
c010736f:	89 e5                	mov    %esp,%ebp
c0107371:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0107374:	b8 00 10 13 c0       	mov    $0xc0131000,%eax
c0107379:	89 04 24             	mov    %eax,(%esp)
c010737c:	e8 e0 ff ff ff       	call   c0107361 <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c0107381:	66 c7 05 a8 4f 1c c0 	movw   $0x10,0xc01c4fa8
c0107388:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c010738a:	66 c7 05 68 1a 13 c0 	movw   $0x68,0xc0131a68
c0107391:	68 00 
c0107393:	b8 a0 4f 1c c0       	mov    $0xc01c4fa0,%eax
c0107398:	66 a3 6a 1a 13 c0    	mov    %ax,0xc0131a6a
c010739e:	b8 a0 4f 1c c0       	mov    $0xc01c4fa0,%eax
c01073a3:	c1 e8 10             	shr    $0x10,%eax
c01073a6:	a2 6c 1a 13 c0       	mov    %al,0xc0131a6c
c01073ab:	0f b6 05 6d 1a 13 c0 	movzbl 0xc0131a6d,%eax
c01073b2:	83 e0 f0             	and    $0xfffffff0,%eax
c01073b5:	83 c8 09             	or     $0x9,%eax
c01073b8:	a2 6d 1a 13 c0       	mov    %al,0xc0131a6d
c01073bd:	0f b6 05 6d 1a 13 c0 	movzbl 0xc0131a6d,%eax
c01073c4:	83 e0 ef             	and    $0xffffffef,%eax
c01073c7:	a2 6d 1a 13 c0       	mov    %al,0xc0131a6d
c01073cc:	0f b6 05 6d 1a 13 c0 	movzbl 0xc0131a6d,%eax
c01073d3:	83 e0 9f             	and    $0xffffff9f,%eax
c01073d6:	a2 6d 1a 13 c0       	mov    %al,0xc0131a6d
c01073db:	0f b6 05 6d 1a 13 c0 	movzbl 0xc0131a6d,%eax
c01073e2:	83 c8 80             	or     $0xffffff80,%eax
c01073e5:	a2 6d 1a 13 c0       	mov    %al,0xc0131a6d
c01073ea:	0f b6 05 6e 1a 13 c0 	movzbl 0xc0131a6e,%eax
c01073f1:	83 e0 f0             	and    $0xfffffff0,%eax
c01073f4:	a2 6e 1a 13 c0       	mov    %al,0xc0131a6e
c01073f9:	0f b6 05 6e 1a 13 c0 	movzbl 0xc0131a6e,%eax
c0107400:	83 e0 ef             	and    $0xffffffef,%eax
c0107403:	a2 6e 1a 13 c0       	mov    %al,0xc0131a6e
c0107408:	0f b6 05 6e 1a 13 c0 	movzbl 0xc0131a6e,%eax
c010740f:	83 e0 df             	and    $0xffffffdf,%eax
c0107412:	a2 6e 1a 13 c0       	mov    %al,0xc0131a6e
c0107417:	0f b6 05 6e 1a 13 c0 	movzbl 0xc0131a6e,%eax
c010741e:	83 c8 40             	or     $0x40,%eax
c0107421:	a2 6e 1a 13 c0       	mov    %al,0xc0131a6e
c0107426:	0f b6 05 6e 1a 13 c0 	movzbl 0xc0131a6e,%eax
c010742d:	83 e0 7f             	and    $0x7f,%eax
c0107430:	a2 6e 1a 13 c0       	mov    %al,0xc0131a6e
c0107435:	b8 a0 4f 1c c0       	mov    $0xc01c4fa0,%eax
c010743a:	c1 e8 18             	shr    $0x18,%eax
c010743d:	a2 6f 1a 13 c0       	mov    %al,0xc0131a6f

    // reload all segment registers
    lgdt(&gdt_pd);
c0107442:	c7 04 24 70 1a 13 c0 	movl   $0xc0131a70,(%esp)
c0107449:	e8 de fe ff ff       	call   c010732c <lgdt>
c010744e:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c0107454:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0107458:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c010745b:	c9                   	leave  
c010745c:	c3                   	ret    

c010745d <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c010745d:	55                   	push   %ebp
c010745e:	89 e5                	mov    %esp,%ebp
c0107460:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c0107463:	c7 05 b0 71 1c c0 2c 	movl   $0xc010ef2c,0xc01c71b0
c010746a:	ef 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c010746d:	a1 b0 71 1c c0       	mov    0xc01c71b0,%eax
c0107472:	8b 00                	mov    (%eax),%eax
c0107474:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107478:	c7 04 24 c8 ef 10 c0 	movl   $0xc010efc8,(%esp)
c010747f:	e8 2a 8e ff ff       	call   c01002ae <cprintf>
    pmm_manager->init();
c0107484:	a1 b0 71 1c c0       	mov    0xc01c71b0,%eax
c0107489:	8b 40 04             	mov    0x4(%eax),%eax
c010748c:	ff d0                	call   *%eax
}
c010748e:	c9                   	leave  
c010748f:	c3                   	ret    

c0107490 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0107490:	55                   	push   %ebp
c0107491:	89 e5                	mov    %esp,%ebp
c0107493:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c0107496:	a1 b0 71 1c c0       	mov    0xc01c71b0,%eax
c010749b:	8b 40 08             	mov    0x8(%eax),%eax
c010749e:	8b 55 0c             	mov    0xc(%ebp),%edx
c01074a1:	89 54 24 04          	mov    %edx,0x4(%esp)
c01074a5:	8b 55 08             	mov    0x8(%ebp),%edx
c01074a8:	89 14 24             	mov    %edx,(%esp)
c01074ab:	ff d0                	call   *%eax
}
c01074ad:	c9                   	leave  
c01074ae:	c3                   	ret    

c01074af <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c01074af:	55                   	push   %ebp
c01074b0:	89 e5                	mov    %esp,%ebp
c01074b2:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c01074b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c01074bc:	e8 2e fe ff ff       	call   c01072ef <__intr_save>
c01074c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c01074c4:	a1 b0 71 1c c0       	mov    0xc01c71b0,%eax
c01074c9:	8b 40 0c             	mov    0xc(%eax),%eax
c01074cc:	8b 55 08             	mov    0x8(%ebp),%edx
c01074cf:	89 14 24             	mov    %edx,(%esp)
c01074d2:	ff d0                	call   *%eax
c01074d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c01074d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01074da:	89 04 24             	mov    %eax,(%esp)
c01074dd:	e8 37 fe ff ff       	call   c0107319 <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c01074e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01074e6:	75 2d                	jne    c0107515 <alloc_pages+0x66>
c01074e8:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c01074ec:	77 27                	ja     c0107515 <alloc_pages+0x66>
c01074ee:	a1 6c 4f 1c c0       	mov    0xc01c4f6c,%eax
c01074f3:	85 c0                	test   %eax,%eax
c01074f5:	74 1e                	je     c0107515 <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c01074f7:	8b 55 08             	mov    0x8(%ebp),%edx
c01074fa:	a1 bc 70 1c c0       	mov    0xc01c70bc,%eax
c01074ff:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107506:	00 
c0107507:	89 54 24 04          	mov    %edx,0x4(%esp)
c010750b:	89 04 24             	mov    %eax,(%esp)
c010750e:	e8 b5 e0 ff ff       	call   c01055c8 <swap_out>
    }
c0107513:	eb a7                	jmp    c01074bc <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c0107515:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107518:	c9                   	leave  
c0107519:	c3                   	ret    

c010751a <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c010751a:	55                   	push   %ebp
c010751b:	89 e5                	mov    %esp,%ebp
c010751d:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0107520:	e8 ca fd ff ff       	call   c01072ef <__intr_save>
c0107525:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c0107528:	a1 b0 71 1c c0       	mov    0xc01c71b0,%eax
c010752d:	8b 40 10             	mov    0x10(%eax),%eax
c0107530:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107533:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107537:	8b 55 08             	mov    0x8(%ebp),%edx
c010753a:	89 14 24             	mov    %edx,(%esp)
c010753d:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c010753f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107542:	89 04 24             	mov    %eax,(%esp)
c0107545:	e8 cf fd ff ff       	call   c0107319 <__intr_restore>
}
c010754a:	c9                   	leave  
c010754b:	c3                   	ret    

c010754c <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c010754c:	55                   	push   %ebp
c010754d:	89 e5                	mov    %esp,%ebp
c010754f:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c0107552:	e8 98 fd ff ff       	call   c01072ef <__intr_save>
c0107557:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c010755a:	a1 b0 71 1c c0       	mov    0xc01c71b0,%eax
c010755f:	8b 40 14             	mov    0x14(%eax),%eax
c0107562:	ff d0                	call   *%eax
c0107564:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0107567:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010756a:	89 04 24             	mov    %eax,(%esp)
c010756d:	e8 a7 fd ff ff       	call   c0107319 <__intr_restore>
    return ret;
c0107572:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0107575:	c9                   	leave  
c0107576:	c3                   	ret    

c0107577 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c0107577:	55                   	push   %ebp
c0107578:	89 e5                	mov    %esp,%ebp
c010757a:	57                   	push   %edi
c010757b:	56                   	push   %esi
c010757c:	53                   	push   %ebx
c010757d:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c0107583:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c010758a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0107591:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0107598:	c7 04 24 df ef 10 c0 	movl   $0xc010efdf,(%esp)
c010759f:	e8 0a 8d ff ff       	call   c01002ae <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01075a4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01075ab:	e9 15 01 00 00       	jmp    c01076c5 <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01075b0:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01075b3:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01075b6:	89 d0                	mov    %edx,%eax
c01075b8:	c1 e0 02             	shl    $0x2,%eax
c01075bb:	01 d0                	add    %edx,%eax
c01075bd:	c1 e0 02             	shl    $0x2,%eax
c01075c0:	01 c8                	add    %ecx,%eax
c01075c2:	8b 50 08             	mov    0x8(%eax),%edx
c01075c5:	8b 40 04             	mov    0x4(%eax),%eax
c01075c8:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01075cb:	89 55 bc             	mov    %edx,-0x44(%ebp)
c01075ce:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01075d1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01075d4:	89 d0                	mov    %edx,%eax
c01075d6:	c1 e0 02             	shl    $0x2,%eax
c01075d9:	01 d0                	add    %edx,%eax
c01075db:	c1 e0 02             	shl    $0x2,%eax
c01075de:	01 c8                	add    %ecx,%eax
c01075e0:	8b 48 0c             	mov    0xc(%eax),%ecx
c01075e3:	8b 58 10             	mov    0x10(%eax),%ebx
c01075e6:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01075e9:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01075ec:	01 c8                	add    %ecx,%eax
c01075ee:	11 da                	adc    %ebx,%edx
c01075f0:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01075f3:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c01075f6:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01075f9:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01075fc:	89 d0                	mov    %edx,%eax
c01075fe:	c1 e0 02             	shl    $0x2,%eax
c0107601:	01 d0                	add    %edx,%eax
c0107603:	c1 e0 02             	shl    $0x2,%eax
c0107606:	01 c8                	add    %ecx,%eax
c0107608:	83 c0 14             	add    $0x14,%eax
c010760b:	8b 00                	mov    (%eax),%eax
c010760d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c0107613:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0107616:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0107619:	83 c0 ff             	add    $0xffffffff,%eax
c010761c:	83 d2 ff             	adc    $0xffffffff,%edx
c010761f:	89 c6                	mov    %eax,%esi
c0107621:	89 d7                	mov    %edx,%edi
c0107623:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107626:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107629:	89 d0                	mov    %edx,%eax
c010762b:	c1 e0 02             	shl    $0x2,%eax
c010762e:	01 d0                	add    %edx,%eax
c0107630:	c1 e0 02             	shl    $0x2,%eax
c0107633:	01 c8                	add    %ecx,%eax
c0107635:	8b 48 0c             	mov    0xc(%eax),%ecx
c0107638:	8b 58 10             	mov    0x10(%eax),%ebx
c010763b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c0107641:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0107645:	89 74 24 14          	mov    %esi,0x14(%esp)
c0107649:	89 7c 24 18          	mov    %edi,0x18(%esp)
c010764d:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0107650:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0107653:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107657:	89 54 24 10          	mov    %edx,0x10(%esp)
c010765b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010765f:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c0107663:	c7 04 24 ec ef 10 c0 	movl   $0xc010efec,(%esp)
c010766a:	e8 3f 8c ff ff       	call   c01002ae <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c010766f:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107672:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107675:	89 d0                	mov    %edx,%eax
c0107677:	c1 e0 02             	shl    $0x2,%eax
c010767a:	01 d0                	add    %edx,%eax
c010767c:	c1 e0 02             	shl    $0x2,%eax
c010767f:	01 c8                	add    %ecx,%eax
c0107681:	83 c0 14             	add    $0x14,%eax
c0107684:	8b 00                	mov    (%eax),%eax
c0107686:	83 f8 01             	cmp    $0x1,%eax
c0107689:	75 36                	jne    c01076c1 <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c010768b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010768e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107691:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0107694:	77 2b                	ja     c01076c1 <page_init+0x14a>
c0107696:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0107699:	72 05                	jb     c01076a0 <page_init+0x129>
c010769b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c010769e:	73 21                	jae    c01076c1 <page_init+0x14a>
c01076a0:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01076a4:	77 1b                	ja     c01076c1 <page_init+0x14a>
c01076a6:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01076aa:	72 09                	jb     c01076b5 <page_init+0x13e>
c01076ac:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c01076b3:	77 0c                	ja     c01076c1 <page_init+0x14a>
                maxpa = end;
c01076b5:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01076b8:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01076bb:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01076be:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    for (i = 0; i < memmap->nr_map; i ++) {
c01076c1:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01076c5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01076c8:	8b 00                	mov    (%eax),%eax
c01076ca:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01076cd:	0f 8f dd fe ff ff    	jg     c01075b0 <page_init+0x39>
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c01076d3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01076d7:	72 1d                	jb     c01076f6 <page_init+0x17f>
c01076d9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01076dd:	77 09                	ja     c01076e8 <page_init+0x171>
c01076df:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c01076e6:	76 0e                	jbe    c01076f6 <page_init+0x17f>
        maxpa = KMEMSIZE;
c01076e8:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c01076ef:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c01076f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01076f9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01076fc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0107700:	c1 ea 0c             	shr    $0xc,%edx
c0107703:	a3 80 4f 1c c0       	mov    %eax,0xc01c4f80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c0107708:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c010770f:	b8 a4 72 1c c0       	mov    $0xc01c72a4,%eax
c0107714:	8d 50 ff             	lea    -0x1(%eax),%edx
c0107717:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010771a:	01 d0                	add    %edx,%eax
c010771c:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010771f:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107722:	ba 00 00 00 00       	mov    $0x0,%edx
c0107727:	f7 75 ac             	divl   -0x54(%ebp)
c010772a:	89 d0                	mov    %edx,%eax
c010772c:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010772f:	29 c2                	sub    %eax,%edx
c0107731:	89 d0                	mov    %edx,%eax
c0107733:	a3 b8 71 1c c0       	mov    %eax,0xc01c71b8

    for (i = 0; i < npage; i ++) {
c0107738:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010773f:	eb 27                	jmp    c0107768 <page_init+0x1f1>
        SetPageReserved(pages + i);
c0107741:	a1 b8 71 1c c0       	mov    0xc01c71b8,%eax
c0107746:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107749:	c1 e2 05             	shl    $0x5,%edx
c010774c:	01 d0                	add    %edx,%eax
c010774e:	83 c0 04             	add    $0x4,%eax
c0107751:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c0107758:	89 45 8c             	mov    %eax,-0x74(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010775b:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010775e:	8b 55 90             	mov    -0x70(%ebp),%edx
c0107761:	0f ab 10             	bts    %edx,(%eax)
    for (i = 0; i < npage; i ++) {
c0107764:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0107768:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010776b:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0107770:	39 c2                	cmp    %eax,%edx
c0107772:	72 cd                	jb     c0107741 <page_init+0x1ca>
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0107774:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0107779:	c1 e0 05             	shl    $0x5,%eax
c010777c:	89 c2                	mov    %eax,%edx
c010777e:	a1 b8 71 1c c0       	mov    0xc01c71b8,%eax
c0107783:	01 d0                	add    %edx,%eax
c0107785:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c0107788:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c010778f:	77 23                	ja     c01077b4 <page_init+0x23d>
c0107791:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107794:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107798:	c7 44 24 08 1c f0 10 	movl   $0xc010f01c,0x8(%esp)
c010779f:	c0 
c01077a0:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
c01077a7:	00 
c01077a8:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c01077af:	e8 51 8c ff ff       	call   c0100405 <__panic>
c01077b4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01077b7:	05 00 00 00 40       	add    $0x40000000,%eax
c01077bc:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c01077bf:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01077c6:	e9 74 01 00 00       	jmp    c010793f <page_init+0x3c8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01077cb:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01077ce:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01077d1:	89 d0                	mov    %edx,%eax
c01077d3:	c1 e0 02             	shl    $0x2,%eax
c01077d6:	01 d0                	add    %edx,%eax
c01077d8:	c1 e0 02             	shl    $0x2,%eax
c01077db:	01 c8                	add    %ecx,%eax
c01077dd:	8b 50 08             	mov    0x8(%eax),%edx
c01077e0:	8b 40 04             	mov    0x4(%eax),%eax
c01077e3:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01077e6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01077e9:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01077ec:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01077ef:	89 d0                	mov    %edx,%eax
c01077f1:	c1 e0 02             	shl    $0x2,%eax
c01077f4:	01 d0                	add    %edx,%eax
c01077f6:	c1 e0 02             	shl    $0x2,%eax
c01077f9:	01 c8                	add    %ecx,%eax
c01077fb:	8b 48 0c             	mov    0xc(%eax),%ecx
c01077fe:	8b 58 10             	mov    0x10(%eax),%ebx
c0107801:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107804:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107807:	01 c8                	add    %ecx,%eax
c0107809:	11 da                	adc    %ebx,%edx
c010780b:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010780e:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0107811:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107814:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107817:	89 d0                	mov    %edx,%eax
c0107819:	c1 e0 02             	shl    $0x2,%eax
c010781c:	01 d0                	add    %edx,%eax
c010781e:	c1 e0 02             	shl    $0x2,%eax
c0107821:	01 c8                	add    %ecx,%eax
c0107823:	83 c0 14             	add    $0x14,%eax
c0107826:	8b 00                	mov    (%eax),%eax
c0107828:	83 f8 01             	cmp    $0x1,%eax
c010782b:	0f 85 0a 01 00 00    	jne    c010793b <page_init+0x3c4>
            if (begin < freemem) {
c0107831:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107834:	ba 00 00 00 00       	mov    $0x0,%edx
c0107839:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010783c:	72 17                	jb     c0107855 <page_init+0x2de>
c010783e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0107841:	77 05                	ja     c0107848 <page_init+0x2d1>
c0107843:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0107846:	76 0d                	jbe    c0107855 <page_init+0x2de>
                begin = freemem;
c0107848:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010784b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010784e:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0107855:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107859:	72 1d                	jb     c0107878 <page_init+0x301>
c010785b:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010785f:	77 09                	ja     c010786a <page_init+0x2f3>
c0107861:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c0107868:	76 0e                	jbe    c0107878 <page_init+0x301>
                end = KMEMSIZE;
c010786a:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c0107871:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c0107878:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010787b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010787e:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107881:	0f 87 b4 00 00 00    	ja     c010793b <page_init+0x3c4>
c0107887:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010788a:	72 09                	jb     c0107895 <page_init+0x31e>
c010788c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010788f:	0f 83 a6 00 00 00    	jae    c010793b <page_init+0x3c4>
                begin = ROUNDUP(begin, PGSIZE);
c0107895:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c010789c:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010789f:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01078a2:	01 d0                	add    %edx,%eax
c01078a4:	83 e8 01             	sub    $0x1,%eax
c01078a7:	89 45 98             	mov    %eax,-0x68(%ebp)
c01078aa:	8b 45 98             	mov    -0x68(%ebp),%eax
c01078ad:	ba 00 00 00 00       	mov    $0x0,%edx
c01078b2:	f7 75 9c             	divl   -0x64(%ebp)
c01078b5:	89 d0                	mov    %edx,%eax
c01078b7:	8b 55 98             	mov    -0x68(%ebp),%edx
c01078ba:	29 c2                	sub    %eax,%edx
c01078bc:	89 d0                	mov    %edx,%eax
c01078be:	ba 00 00 00 00       	mov    $0x0,%edx
c01078c3:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01078c6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c01078c9:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01078cc:	89 45 94             	mov    %eax,-0x6c(%ebp)
c01078cf:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01078d2:	ba 00 00 00 00       	mov    $0x0,%edx
c01078d7:	89 c7                	mov    %eax,%edi
c01078d9:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c01078df:	89 7d 80             	mov    %edi,-0x80(%ebp)
c01078e2:	89 d0                	mov    %edx,%eax
c01078e4:	83 e0 00             	and    $0x0,%eax
c01078e7:	89 45 84             	mov    %eax,-0x7c(%ebp)
c01078ea:	8b 45 80             	mov    -0x80(%ebp),%eax
c01078ed:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01078f0:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01078f3:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c01078f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01078f9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01078fc:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01078ff:	77 3a                	ja     c010793b <page_init+0x3c4>
c0107901:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107904:	72 05                	jb     c010790b <page_init+0x394>
c0107906:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0107909:	73 30                	jae    c010793b <page_init+0x3c4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c010790b:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010790e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c0107911:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107914:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107917:	29 c8                	sub    %ecx,%eax
c0107919:	19 da                	sbb    %ebx,%edx
c010791b:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010791f:	c1 ea 0c             	shr    $0xc,%edx
c0107922:	89 c3                	mov    %eax,%ebx
c0107924:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107927:	89 04 24             	mov    %eax,(%esp)
c010792a:	e8 8c f8 ff ff       	call   c01071bb <pa2page>
c010792f:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0107933:	89 04 24             	mov    %eax,(%esp)
c0107936:	e8 55 fb ff ff       	call   c0107490 <init_memmap>
    for (i = 0; i < memmap->nr_map; i ++) {
c010793b:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010793f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0107942:	8b 00                	mov    (%eax),%eax
c0107944:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0107947:	0f 8f 7e fe ff ff    	jg     c01077cb <page_init+0x254>
                }
            }
        }
    }
}
c010794d:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c0107953:	5b                   	pop    %ebx
c0107954:	5e                   	pop    %esi
c0107955:	5f                   	pop    %edi
c0107956:	5d                   	pop    %ebp
c0107957:	c3                   	ret    

c0107958 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c0107958:	55                   	push   %ebp
c0107959:	89 e5                	mov    %esp,%ebp
c010795b:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c010795e:	8b 45 14             	mov    0x14(%ebp),%eax
c0107961:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107964:	31 d0                	xor    %edx,%eax
c0107966:	25 ff 0f 00 00       	and    $0xfff,%eax
c010796b:	85 c0                	test   %eax,%eax
c010796d:	74 24                	je     c0107993 <boot_map_segment+0x3b>
c010796f:	c7 44 24 0c 4e f0 10 	movl   $0xc010f04e,0xc(%esp)
c0107976:	c0 
c0107977:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c010797e:	c0 
c010797f:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c0107986:	00 
c0107987:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c010798e:	e8 72 8a ff ff       	call   c0100405 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0107993:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c010799a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010799d:	25 ff 0f 00 00       	and    $0xfff,%eax
c01079a2:	89 c2                	mov    %eax,%edx
c01079a4:	8b 45 10             	mov    0x10(%ebp),%eax
c01079a7:	01 c2                	add    %eax,%edx
c01079a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01079ac:	01 d0                	add    %edx,%eax
c01079ae:	83 e8 01             	sub    $0x1,%eax
c01079b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01079b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01079b7:	ba 00 00 00 00       	mov    $0x0,%edx
c01079bc:	f7 75 f0             	divl   -0x10(%ebp)
c01079bf:	89 d0                	mov    %edx,%eax
c01079c1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01079c4:	29 c2                	sub    %eax,%edx
c01079c6:	89 d0                	mov    %edx,%eax
c01079c8:	c1 e8 0c             	shr    $0xc,%eax
c01079cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c01079ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c01079d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01079d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01079d7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01079dc:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c01079df:	8b 45 14             	mov    0x14(%ebp),%eax
c01079e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01079e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01079e8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01079ed:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01079f0:	eb 6b                	jmp    c0107a5d <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c01079f2:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01079f9:	00 
c01079fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01079fd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107a01:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a04:	89 04 24             	mov    %eax,(%esp)
c0107a07:	e8 87 01 00 00       	call   c0107b93 <get_pte>
c0107a0c:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c0107a0f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107a13:	75 24                	jne    c0107a39 <boot_map_segment+0xe1>
c0107a15:	c7 44 24 0c 7a f0 10 	movl   $0xc010f07a,0xc(%esp)
c0107a1c:	c0 
c0107a1d:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0107a24:	c0 
c0107a25:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c0107a2c:	00 
c0107a2d:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0107a34:	e8 cc 89 ff ff       	call   c0100405 <__panic>
        *ptep = pa | PTE_P | perm;
c0107a39:	8b 45 18             	mov    0x18(%ebp),%eax
c0107a3c:	8b 55 14             	mov    0x14(%ebp),%edx
c0107a3f:	09 d0                	or     %edx,%eax
c0107a41:	83 c8 01             	or     $0x1,%eax
c0107a44:	89 c2                	mov    %eax,%edx
c0107a46:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107a49:	89 10                	mov    %edx,(%eax)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0107a4b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0107a4f:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c0107a56:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0107a5d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107a61:	75 8f                	jne    c01079f2 <boot_map_segment+0x9a>
    }
}
c0107a63:	c9                   	leave  
c0107a64:	c3                   	ret    

c0107a65 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c0107a65:	55                   	push   %ebp
c0107a66:	89 e5                	mov    %esp,%ebp
c0107a68:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c0107a6b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107a72:	e8 38 fa ff ff       	call   c01074af <alloc_pages>
c0107a77:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0107a7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107a7e:	75 1c                	jne    c0107a9c <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c0107a80:	c7 44 24 08 87 f0 10 	movl   $0xc010f087,0x8(%esp)
c0107a87:	c0 
c0107a88:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c0107a8f:	00 
c0107a90:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0107a97:	e8 69 89 ff ff       	call   c0100405 <__panic>
    }
    return page2kva(p);
c0107a9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a9f:	89 04 24             	mov    %eax,(%esp)
c0107aa2:	e8 59 f7 ff ff       	call   c0107200 <page2kva>
}
c0107aa7:	c9                   	leave  
c0107aa8:	c3                   	ret    

c0107aa9 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0107aa9:	55                   	push   %ebp
c0107aaa:	89 e5                	mov    %esp,%ebp
c0107aac:	83 ec 38             	sub    $0x38,%esp
    // We've already enabled paging
    boot_cr3 = PADDR(boot_pgdir);
c0107aaf:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0107ab4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107ab7:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0107abe:	77 23                	ja     c0107ae3 <pmm_init+0x3a>
c0107ac0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ac3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107ac7:	c7 44 24 08 1c f0 10 	movl   $0xc010f01c,0x8(%esp)
c0107ace:	c0 
c0107acf:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c0107ad6:	00 
c0107ad7:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0107ade:	e8 22 89 ff ff       	call   c0100405 <__panic>
c0107ae3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ae6:	05 00 00 00 40       	add    $0x40000000,%eax
c0107aeb:	a3 b4 71 1c c0       	mov    %eax,0xc01c71b4
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0107af0:	e8 68 f9 ff ff       	call   c010745d <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c0107af5:	e8 7d fa ff ff       	call   c0107577 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0107afa:	e8 d8 08 00 00       	call   c01083d7 <check_alloc_page>

    check_pgdir();
c0107aff:	e8 f1 08 00 00       	call   c01083f5 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0107b04:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0107b09:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0107b0f:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0107b14:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107b17:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0107b1e:	77 23                	ja     c0107b43 <pmm_init+0x9a>
c0107b20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b23:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107b27:	c7 44 24 08 1c f0 10 	movl   $0xc010f01c,0x8(%esp)
c0107b2e:	c0 
c0107b2f:	c7 44 24 04 3a 01 00 	movl   $0x13a,0x4(%esp)
c0107b36:	00 
c0107b37:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0107b3e:	e8 c2 88 ff ff       	call   c0100405 <__panic>
c0107b43:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b46:	05 00 00 00 40       	add    $0x40000000,%eax
c0107b4b:	83 c8 03             	or     $0x3,%eax
c0107b4e:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0107b50:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0107b55:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0107b5c:	00 
c0107b5d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0107b64:	00 
c0107b65:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c0107b6c:	38 
c0107b6d:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c0107b74:	c0 
c0107b75:	89 04 24             	mov    %eax,(%esp)
c0107b78:	e8 db fd ff ff       	call   c0107958 <boot_map_segment>

    // Since we are using bootloader's GDT,
    // we should reload gdt (second time, the last time) to get user segments and the TSS
    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0107b7d:	e8 ec f7 ff ff       	call   c010736e <gdt_init>

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0107b82:	e8 09 0f 00 00       	call   c0108a90 <check_boot_pgdir>

    print_pgdir();
c0107b87:	e8 91 13 00 00       	call   c0108f1d <print_pgdir>
    
    kmalloc_init();
c0107b8c:	e8 f9 d5 ff ff       	call   c010518a <kmalloc_init>

}
c0107b91:	c9                   	leave  
c0107b92:	c3                   	ret    

c0107b93 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0107b93:	55                   	push   %ebp
c0107b94:	89 e5                	mov    %esp,%ebp
c0107b96:	83 ec 38             	sub    $0x38,%esp
     pde_t *pdep = &pgdir[PDX(la)];
c0107b99:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107b9c:	c1 e8 16             	shr    $0x16,%eax
c0107b9f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107ba6:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ba9:	01 d0                	add    %edx,%eax
c0107bab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //获取一级页表项对应的入口地址
    if (!(*pdep & PTE_P)) {
c0107bae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107bb1:	8b 00                	mov    (%eax),%eax
c0107bb3:	83 e0 01             	and    $0x1,%eax
c0107bb6:	85 c0                	test   %eax,%eax
c0107bb8:	0f 85 af 00 00 00    	jne    c0107c6d <get_pte+0xda>
        //物理页不存在, create==0, null
        struct Page *page;
        if (!create || (page = alloc_page()) == NULL) {//分配失败
c0107bbe:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107bc2:	74 15                	je     c0107bd9 <get_pte+0x46>
c0107bc4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107bcb:	e8 df f8 ff ff       	call   c01074af <alloc_pages>
c0107bd0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107bd3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107bd7:	75 0a                	jne    c0107be3 <get_pte+0x50>
            return NULL;
c0107bd9:	b8 00 00 00 00       	mov    $0x0,%eax
c0107bde:	e9 e6 00 00 00       	jmp    c0107cc9 <get_pte+0x136>
        }
        //引用次数+1
        set_page_ref(page, 1);
c0107be3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107bea:	00 
c0107beb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107bee:	89 04 24             	mov    %eax,(%esp)
c0107bf1:	e8 be f6 ff ff       	call   c01072b4 <set_page_ref>
        //物理地址
        uintptr_t pa = page2pa(page);
c0107bf6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107bf9:	89 04 24             	mov    %eax,(%esp)
c0107bfc:	e8 a4 f5 ff ff       	call   c01071a5 <page2pa>
c0107c01:	89 45 ec             	mov    %eax,-0x14(%ebp)
        ///物理地址转虚拟地址，并初始化,把新申请的数目为pgsize个页全设为0	
        memset(KADDR(pa), 0, PGSIZE);
c0107c04:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107c07:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107c0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107c0d:	c1 e8 0c             	shr    $0xc,%eax
c0107c10:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107c13:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0107c18:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0107c1b:	72 23                	jb     c0107c40 <get_pte+0xad>
c0107c1d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107c20:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107c24:	c7 44 24 08 78 ef 10 	movl   $0xc010ef78,0x8(%esp)
c0107c2b:	c0 
c0107c2c:	c7 44 24 04 66 01 00 	movl   $0x166,0x4(%esp)
c0107c33:	00 
c0107c34:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0107c3b:	e8 c5 87 ff ff       	call   c0100405 <__panic>
c0107c40:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107c43:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0107c48:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0107c4f:	00 
c0107c50:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107c57:	00 
c0107c58:	89 04 24             	mov    %eax,(%esp)
c0107c5b:	e8 f3 50 00 00       	call   c010cd53 <memset>
        //设置控制位
        *pdep = pa | PTE_U | PTE_W | PTE_P;
c0107c60:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107c63:	83 c8 07             	or     $0x7,%eax
c0107c66:	89 c2                	mov    %eax,%edx
c0107c68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c6b:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c0107c6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c70:	8b 00                	mov    (%eax),%eax
c0107c72:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107c77:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0107c7a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107c7d:	c1 e8 0c             	shr    $0xc,%eax
c0107c80:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0107c83:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0107c88:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0107c8b:	72 23                	jb     c0107cb0 <get_pte+0x11d>
c0107c8d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107c90:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107c94:	c7 44 24 08 78 ef 10 	movl   $0xc010ef78,0x8(%esp)
c0107c9b:	c0 
c0107c9c:	c7 44 24 04 6a 01 00 	movl   $0x16a,0x4(%esp)
c0107ca3:	00 
c0107ca4:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0107cab:	e8 55 87 ff ff       	call   c0100405 <__panic>
c0107cb0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107cb3:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0107cb8:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107cbb:	c1 ea 0c             	shr    $0xc,%edx
c0107cbe:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c0107cc4:	c1 e2 02             	shl    $0x2,%edx
c0107cc7:	01 d0                	add    %edx,%eax
    //页目录项地址-->>页表物理地址-->>虚拟地址-->>页表项索引
    //PTX(la)：返回虚拟地址la的页表项索引
    //返回la对应的页表项入口地址
}
c0107cc9:	c9                   	leave  
c0107cca:	c3                   	ret    

c0107ccb <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0107ccb:	55                   	push   %ebp
c0107ccc:	89 e5                	mov    %esp,%ebp
c0107cce:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0107cd1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107cd8:	00 
c0107cd9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107cdc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107ce0:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ce3:	89 04 24             	mov    %eax,(%esp)
c0107ce6:	e8 a8 fe ff ff       	call   c0107b93 <get_pte>
c0107ceb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0107cee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107cf2:	74 08                	je     c0107cfc <get_page+0x31>
        *ptep_store = ptep;
c0107cf4:	8b 45 10             	mov    0x10(%ebp),%eax
c0107cf7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107cfa:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0107cfc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107d00:	74 1b                	je     c0107d1d <get_page+0x52>
c0107d02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d05:	8b 00                	mov    (%eax),%eax
c0107d07:	83 e0 01             	and    $0x1,%eax
c0107d0a:	85 c0                	test   %eax,%eax
c0107d0c:	74 0f                	je     c0107d1d <get_page+0x52>
        return pte2page(*ptep);
c0107d0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d11:	8b 00                	mov    (%eax),%eax
c0107d13:	89 04 24             	mov    %eax,(%esp)
c0107d16:	e8 39 f5 ff ff       	call   c0107254 <pte2page>
c0107d1b:	eb 05                	jmp    c0107d22 <get_page+0x57>
    }
    return NULL;
c0107d1d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107d22:	c9                   	leave  
c0107d23:	c3                   	ret    

c0107d24 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0107d24:	55                   	push   %ebp
c0107d25:	89 e5                	mov    %esp,%ebp
c0107d27:	83 ec 28             	sub    $0x28,%esp
    if (*ptep & PTE_P) {
c0107d2a:	8b 45 10             	mov    0x10(%ebp),%eax
c0107d2d:	8b 00                	mov    (%eax),%eax
c0107d2f:	83 e0 01             	and    $0x1,%eax
c0107d32:	85 c0                	test   %eax,%eax
c0107d34:	74 53                	je     c0107d89 <page_remove_pte+0x65>
        //判断页表中该表项是否存在
        struct Page *page = pte2page(*ptep);//获得相应的page
c0107d36:	8b 45 10             	mov    0x10(%ebp),%eax
c0107d39:	8b 00                	mov    (%eax),%eax
c0107d3b:	89 04 24             	mov    %eax,(%esp)
c0107d3e:	e8 11 f5 ff ff       	call   c0107254 <pte2page>
c0107d43:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (page_ref_dec(page) == 0) {
c0107d46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d49:	89 04 24             	mov    %eax,(%esp)
c0107d4c:	e8 87 f5 ff ff       	call   c01072d8 <page_ref_dec>
c0107d51:	85 c0                	test   %eax,%eax
c0107d53:	75 13                	jne    c0107d68 <page_remove_pte+0x44>
            ////除了当前进程，没有别的进程引用
            free_page(page);
c0107d55:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107d5c:	00 
c0107d5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d60:	89 04 24             	mov    %eax,(%esp)
c0107d63:	e8 b2 f7 ff ff       	call   c010751a <free_pages>
        }
        *ptep &= (~PTE_P); 
c0107d68:	8b 45 10             	mov    0x10(%ebp),%eax
c0107d6b:	8b 00                	mov    (%eax),%eax
c0107d6d:	83 e0 fe             	and    $0xfffffffe,%eax
c0107d70:	89 c2                	mov    %eax,%edx
c0107d72:	8b 45 10             	mov    0x10(%ebp),%eax
c0107d75:	89 10                	mov    %edx,(%eax)
        // 将PTE的存在位设置为0，表示该映射关系无效
        tlb_invalidate(pgdir, la);
c0107d77:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107d7a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107d7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d81:	89 04 24             	mov    %eax,(%esp)
c0107d84:	e8 1d 05 00 00       	call   c01082a6 <tlb_invalidate>
         //刷新TLB
    }
}
c0107d89:	c9                   	leave  
c0107d8a:	c3                   	ret    

c0107d8b <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0107d8b:	55                   	push   %ebp
c0107d8c:	89 e5                	mov    %esp,%ebp
c0107d8e:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0107d91:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107d94:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107d99:	85 c0                	test   %eax,%eax
c0107d9b:	75 0c                	jne    c0107da9 <unmap_range+0x1e>
c0107d9d:	8b 45 10             	mov    0x10(%ebp),%eax
c0107da0:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107da5:	85 c0                	test   %eax,%eax
c0107da7:	74 24                	je     c0107dcd <unmap_range+0x42>
c0107da9:	c7 44 24 0c a0 f0 10 	movl   $0xc010f0a0,0xc(%esp)
c0107db0:	c0 
c0107db1:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0107db8:	c0 
c0107db9:	c7 44 24 04 92 01 00 	movl   $0x192,0x4(%esp)
c0107dc0:	00 
c0107dc1:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0107dc8:	e8 38 86 ff ff       	call   c0100405 <__panic>
    assert(USER_ACCESS(start, end));
c0107dcd:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0107dd4:	76 11                	jbe    c0107de7 <unmap_range+0x5c>
c0107dd6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107dd9:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107ddc:	73 09                	jae    c0107de7 <unmap_range+0x5c>
c0107dde:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0107de5:	76 24                	jbe    c0107e0b <unmap_range+0x80>
c0107de7:	c7 44 24 0c c9 f0 10 	movl   $0xc010f0c9,0xc(%esp)
c0107dee:	c0 
c0107def:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0107df6:	c0 
c0107df7:	c7 44 24 04 93 01 00 	movl   $0x193,0x4(%esp)
c0107dfe:	00 
c0107dff:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0107e06:	e8 fa 85 ff ff       	call   c0100405 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0107e0b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107e12:	00 
c0107e13:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e16:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107e1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e1d:	89 04 24             	mov    %eax,(%esp)
c0107e20:	e8 6e fd ff ff       	call   c0107b93 <get_pte>
c0107e25:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0107e28:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107e2c:	75 18                	jne    c0107e46 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0107e2e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e31:	05 00 00 40 00       	add    $0x400000,%eax
c0107e36:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107e39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e3c:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0107e41:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0107e44:	eb 29                	jmp    c0107e6f <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0107e46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e49:	8b 00                	mov    (%eax),%eax
c0107e4b:	85 c0                	test   %eax,%eax
c0107e4d:	74 19                	je     c0107e68 <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0107e4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e52:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107e56:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e59:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107e5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e60:	89 04 24             	mov    %eax,(%esp)
c0107e63:	e8 bc fe ff ff       	call   c0107d24 <page_remove_pte>
        }
        start += PGSIZE;
c0107e68:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0107e6f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107e73:	74 08                	je     c0107e7d <unmap_range+0xf2>
c0107e75:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e78:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107e7b:	72 8e                	jb     c0107e0b <unmap_range+0x80>
}
c0107e7d:	c9                   	leave  
c0107e7e:	c3                   	ret    

c0107e7f <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0107e7f:	55                   	push   %ebp
c0107e80:	89 e5                	mov    %esp,%ebp
c0107e82:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0107e85:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e88:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107e8d:	85 c0                	test   %eax,%eax
c0107e8f:	75 0c                	jne    c0107e9d <exit_range+0x1e>
c0107e91:	8b 45 10             	mov    0x10(%ebp),%eax
c0107e94:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107e99:	85 c0                	test   %eax,%eax
c0107e9b:	74 24                	je     c0107ec1 <exit_range+0x42>
c0107e9d:	c7 44 24 0c a0 f0 10 	movl   $0xc010f0a0,0xc(%esp)
c0107ea4:	c0 
c0107ea5:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0107eac:	c0 
c0107ead:	c7 44 24 04 a4 01 00 	movl   $0x1a4,0x4(%esp)
c0107eb4:	00 
c0107eb5:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0107ebc:	e8 44 85 ff ff       	call   c0100405 <__panic>
    assert(USER_ACCESS(start, end));
c0107ec1:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0107ec8:	76 11                	jbe    c0107edb <exit_range+0x5c>
c0107eca:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107ecd:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107ed0:	73 09                	jae    c0107edb <exit_range+0x5c>
c0107ed2:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0107ed9:	76 24                	jbe    c0107eff <exit_range+0x80>
c0107edb:	c7 44 24 0c c9 f0 10 	movl   $0xc010f0c9,0xc(%esp)
c0107ee2:	c0 
c0107ee3:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0107eea:	c0 
c0107eeb:	c7 44 24 04 a5 01 00 	movl   $0x1a5,0x4(%esp)
c0107ef2:	00 
c0107ef3:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0107efa:	e8 06 85 ff ff       	call   c0100405 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0107eff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107f02:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107f05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f08:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0107f0d:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0107f10:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107f13:	c1 e8 16             	shr    $0x16,%eax
c0107f16:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0107f19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f1c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107f23:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f26:	01 d0                	add    %edx,%eax
c0107f28:	8b 00                	mov    (%eax),%eax
c0107f2a:	83 e0 01             	and    $0x1,%eax
c0107f2d:	85 c0                	test   %eax,%eax
c0107f2f:	74 3e                	je     c0107f6f <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0107f31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f34:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107f3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f3e:	01 d0                	add    %edx,%eax
c0107f40:	8b 00                	mov    (%eax),%eax
c0107f42:	89 04 24             	mov    %eax,(%esp)
c0107f45:	e8 48 f3 ff ff       	call   c0107292 <pde2page>
c0107f4a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107f51:	00 
c0107f52:	89 04 24             	mov    %eax,(%esp)
c0107f55:	e8 c0 f5 ff ff       	call   c010751a <free_pages>
            pgdir[pde_idx] = 0;
c0107f5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f5d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107f64:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f67:	01 d0                	add    %edx,%eax
c0107f69:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0107f6f:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0107f76:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107f7a:	74 08                	je     c0107f84 <exit_range+0x105>
c0107f7c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107f7f:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107f82:	72 8c                	jb     c0107f10 <exit_range+0x91>
}
c0107f84:	c9                   	leave  
c0107f85:	c3                   	ret    

c0107f86 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0107f86:	55                   	push   %ebp
c0107f87:	89 e5                	mov    %esp,%ebp
c0107f89:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0107f8c:	8b 45 10             	mov    0x10(%ebp),%eax
c0107f8f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107f94:	85 c0                	test   %eax,%eax
c0107f96:	75 0c                	jne    c0107fa4 <copy_range+0x1e>
c0107f98:	8b 45 14             	mov    0x14(%ebp),%eax
c0107f9b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107fa0:	85 c0                	test   %eax,%eax
c0107fa2:	74 24                	je     c0107fc8 <copy_range+0x42>
c0107fa4:	c7 44 24 0c a0 f0 10 	movl   $0xc010f0a0,0xc(%esp)
c0107fab:	c0 
c0107fac:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0107fb3:	c0 
c0107fb4:	c7 44 24 04 ba 01 00 	movl   $0x1ba,0x4(%esp)
c0107fbb:	00 
c0107fbc:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0107fc3:	e8 3d 84 ff ff       	call   c0100405 <__panic>
    assert(USER_ACCESS(start, end));
c0107fc8:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0107fcf:	76 11                	jbe    c0107fe2 <copy_range+0x5c>
c0107fd1:	8b 45 10             	mov    0x10(%ebp),%eax
c0107fd4:	3b 45 14             	cmp    0x14(%ebp),%eax
c0107fd7:	73 09                	jae    c0107fe2 <copy_range+0x5c>
c0107fd9:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0107fe0:	76 24                	jbe    c0108006 <copy_range+0x80>
c0107fe2:	c7 44 24 0c c9 f0 10 	movl   $0xc010f0c9,0xc(%esp)
c0107fe9:	c0 
c0107fea:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0107ff1:	c0 
c0107ff2:	c7 44 24 04 bb 01 00 	movl   $0x1bb,0x4(%esp)
c0107ff9:	00 
c0107ffa:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108001:	e8 ff 83 ff ff       	call   c0100405 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0108006:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010800d:	00 
c010800e:	8b 45 10             	mov    0x10(%ebp),%eax
c0108011:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108015:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108018:	89 04 24             	mov    %eax,(%esp)
c010801b:	e8 73 fb ff ff       	call   c0107b93 <get_pte>
c0108020:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0108023:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108027:	75 1b                	jne    c0108044 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0108029:	8b 45 10             	mov    0x10(%ebp),%eax
c010802c:	05 00 00 40 00       	add    $0x400000,%eax
c0108031:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108034:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108037:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c010803c:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c010803f:	e9 4c 01 00 00       	jmp    c0108190 <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0108044:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108047:	8b 00                	mov    (%eax),%eax
c0108049:	83 e0 01             	and    $0x1,%eax
c010804c:	85 c0                	test   %eax,%eax
c010804e:	0f 84 35 01 00 00    	je     c0108189 <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0108054:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010805b:	00 
c010805c:	8b 45 10             	mov    0x10(%ebp),%eax
c010805f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108063:	8b 45 08             	mov    0x8(%ebp),%eax
c0108066:	89 04 24             	mov    %eax,(%esp)
c0108069:	e8 25 fb ff ff       	call   c0107b93 <get_pte>
c010806e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108071:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108075:	75 0a                	jne    c0108081 <copy_range+0xfb>
                return -E_NO_MEM;
c0108077:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010807c:	e9 26 01 00 00       	jmp    c01081a7 <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0108081:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108084:	8b 00                	mov    (%eax),%eax
c0108086:	83 e0 07             	and    $0x7,%eax
c0108089:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c010808c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010808f:	8b 00                	mov    (%eax),%eax
c0108091:	89 04 24             	mov    %eax,(%esp)
c0108094:	e8 bb f1 ff ff       	call   c0107254 <pte2page>
c0108099:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c010809c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01080a3:	e8 07 f4 ff ff       	call   c01074af <alloc_pages>
c01080a8:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c01080ab:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01080af:	75 24                	jne    c01080d5 <copy_range+0x14f>
c01080b1:	c7 44 24 0c e1 f0 10 	movl   $0xc010f0e1,0xc(%esp)
c01080b8:	c0 
c01080b9:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c01080c0:	c0 
c01080c1:	c7 44 24 04 ce 01 00 	movl   $0x1ce,0x4(%esp)
c01080c8:	00 
c01080c9:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c01080d0:	e8 30 83 ff ff       	call   c0100405 <__panic>
        assert(npage!=NULL);
c01080d5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01080d9:	75 24                	jne    c01080ff <copy_range+0x179>
c01080db:	c7 44 24 0c ec f0 10 	movl   $0xc010f0ec,0xc(%esp)
c01080e2:	c0 
c01080e3:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c01080ea:	c0 
c01080eb:	c7 44 24 04 cf 01 00 	movl   $0x1cf,0x4(%esp)
c01080f2:	00 
c01080f3:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c01080fa:	e8 06 83 ff ff       	call   c0100405 <__panic>
        int ret=0;
c01080ff:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void * kva_src = page2kva(page);
c0108106:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108109:	89 04 24             	mov    %eax,(%esp)
c010810c:	e8 ef f0 ff ff       	call   c0107200 <page2kva>
c0108111:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void * kva_dst = page2kva(npage);
c0108114:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108117:	89 04 24             	mov    %eax,(%esp)
c010811a:	e8 e1 f0 ff ff       	call   c0107200 <page2kva>
c010811f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    
        memcpy(kva_dst, kva_src, PGSIZE);
c0108122:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0108129:	00 
c010812a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010812d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108131:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108134:	89 04 24             	mov    %eax,(%esp)
c0108137:	e8 f9 4c 00 00       	call   c010ce35 <memcpy>

        ret = page_insert(to, npage, start, perm);
c010813c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010813f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0108143:	8b 45 10             	mov    0x10(%ebp),%eax
c0108146:	89 44 24 08          	mov    %eax,0x8(%esp)
c010814a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010814d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108151:	8b 45 08             	mov    0x8(%ebp),%eax
c0108154:	89 04 24             	mov    %eax,(%esp)
c0108157:	e8 91 00 00 00       	call   c01081ed <page_insert>
c010815c:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c010815f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108163:	74 24                	je     c0108189 <copy_range+0x203>
c0108165:	c7 44 24 0c f8 f0 10 	movl   $0xc010f0f8,0xc(%esp)
c010816c:	c0 
c010816d:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108174:	c0 
c0108175:	c7 44 24 04 e5 01 00 	movl   $0x1e5,0x4(%esp)
c010817c:	00 
c010817d:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108184:	e8 7c 82 ff ff       	call   c0100405 <__panic>
        }
        start += PGSIZE;
c0108189:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0108190:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0108194:	74 0c                	je     c01081a2 <copy_range+0x21c>
c0108196:	8b 45 10             	mov    0x10(%ebp),%eax
c0108199:	3b 45 14             	cmp    0x14(%ebp),%eax
c010819c:	0f 82 64 fe ff ff    	jb     c0108006 <copy_range+0x80>
    return 0;
c01081a2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01081a7:	c9                   	leave  
c01081a8:	c3                   	ret    

c01081a9 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c01081a9:	55                   	push   %ebp
c01081aa:	89 e5                	mov    %esp,%ebp
c01081ac:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c01081af:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01081b6:	00 
c01081b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c01081be:	8b 45 08             	mov    0x8(%ebp),%eax
c01081c1:	89 04 24             	mov    %eax,(%esp)
c01081c4:	e8 ca f9 ff ff       	call   c0107b93 <get_pte>
c01081c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c01081cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01081d0:	74 19                	je     c01081eb <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c01081d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01081d5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01081d9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01081e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01081e3:	89 04 24             	mov    %eax,(%esp)
c01081e6:	e8 39 fb ff ff       	call   c0107d24 <page_remove_pte>
    }
}
c01081eb:	c9                   	leave  
c01081ec:	c3                   	ret    

c01081ed <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c01081ed:	55                   	push   %ebp
c01081ee:	89 e5                	mov    %esp,%ebp
c01081f0:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c01081f3:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01081fa:	00 
c01081fb:	8b 45 10             	mov    0x10(%ebp),%eax
c01081fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108202:	8b 45 08             	mov    0x8(%ebp),%eax
c0108205:	89 04 24             	mov    %eax,(%esp)
c0108208:	e8 86 f9 ff ff       	call   c0107b93 <get_pte>
c010820d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0108210:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108214:	75 0a                	jne    c0108220 <page_insert+0x33>
        return -E_NO_MEM;
c0108216:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010821b:	e9 84 00 00 00       	jmp    c01082a4 <page_insert+0xb7>
    }
    page_ref_inc(page);
c0108220:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108223:	89 04 24             	mov    %eax,(%esp)
c0108226:	e8 96 f0 ff ff       	call   c01072c1 <page_ref_inc>
    if (*ptep & PTE_P) {
c010822b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010822e:	8b 00                	mov    (%eax),%eax
c0108230:	83 e0 01             	and    $0x1,%eax
c0108233:	85 c0                	test   %eax,%eax
c0108235:	74 3e                	je     c0108275 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0108237:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010823a:	8b 00                	mov    (%eax),%eax
c010823c:	89 04 24             	mov    %eax,(%esp)
c010823f:	e8 10 f0 ff ff       	call   c0107254 <pte2page>
c0108244:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0108247:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010824a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010824d:	75 0d                	jne    c010825c <page_insert+0x6f>
            page_ref_dec(page);
c010824f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108252:	89 04 24             	mov    %eax,(%esp)
c0108255:	e8 7e f0 ff ff       	call   c01072d8 <page_ref_dec>
c010825a:	eb 19                	jmp    c0108275 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c010825c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010825f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108263:	8b 45 10             	mov    0x10(%ebp),%eax
c0108266:	89 44 24 04          	mov    %eax,0x4(%esp)
c010826a:	8b 45 08             	mov    0x8(%ebp),%eax
c010826d:	89 04 24             	mov    %eax,(%esp)
c0108270:	e8 af fa ff ff       	call   c0107d24 <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0108275:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108278:	89 04 24             	mov    %eax,(%esp)
c010827b:	e8 25 ef ff ff       	call   c01071a5 <page2pa>
c0108280:	0b 45 14             	or     0x14(%ebp),%eax
c0108283:	83 c8 01             	or     $0x1,%eax
c0108286:	89 c2                	mov    %eax,%edx
c0108288:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010828b:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c010828d:	8b 45 10             	mov    0x10(%ebp),%eax
c0108290:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108294:	8b 45 08             	mov    0x8(%ebp),%eax
c0108297:	89 04 24             	mov    %eax,(%esp)
c010829a:	e8 07 00 00 00       	call   c01082a6 <tlb_invalidate>
    return 0;
c010829f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01082a4:	c9                   	leave  
c01082a5:	c3                   	ret    

c01082a6 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c01082a6:	55                   	push   %ebp
c01082a7:	89 e5                	mov    %esp,%ebp
c01082a9:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c01082ac:	0f 20 d8             	mov    %cr3,%eax
c01082af:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c01082b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c01082b5:	89 c2                	mov    %eax,%edx
c01082b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01082ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01082bd:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01082c4:	77 23                	ja     c01082e9 <tlb_invalidate+0x43>
c01082c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082c9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01082cd:	c7 44 24 08 1c f0 10 	movl   $0xc010f01c,0x8(%esp)
c01082d4:	c0 
c01082d5:	c7 44 24 04 16 02 00 	movl   $0x216,0x4(%esp)
c01082dc:	00 
c01082dd:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c01082e4:	e8 1c 81 ff ff       	call   c0100405 <__panic>
c01082e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082ec:	05 00 00 00 40       	add    $0x40000000,%eax
c01082f1:	39 c2                	cmp    %eax,%edx
c01082f3:	75 0c                	jne    c0108301 <tlb_invalidate+0x5b>
        invlpg((void *)la);
c01082f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c01082fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01082fe:	0f 01 38             	invlpg (%eax)
    }
}
c0108301:	c9                   	leave  
c0108302:	c3                   	ret    

c0108303 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0108303:	55                   	push   %ebp
c0108304:	89 e5                	mov    %esp,%ebp
c0108306:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0108309:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0108310:	e8 9a f1 ff ff       	call   c01074af <alloc_pages>
c0108315:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0108318:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010831c:	0f 84 b0 00 00 00    	je     c01083d2 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0108322:	8b 45 10             	mov    0x10(%ebp),%eax
c0108325:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0108329:	8b 45 0c             	mov    0xc(%ebp),%eax
c010832c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108330:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108333:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108337:	8b 45 08             	mov    0x8(%ebp),%eax
c010833a:	89 04 24             	mov    %eax,(%esp)
c010833d:	e8 ab fe ff ff       	call   c01081ed <page_insert>
c0108342:	85 c0                	test   %eax,%eax
c0108344:	74 1a                	je     c0108360 <pgdir_alloc_page+0x5d>
            free_page(page);
c0108346:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010834d:	00 
c010834e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108351:	89 04 24             	mov    %eax,(%esp)
c0108354:	e8 c1 f1 ff ff       	call   c010751a <free_pages>
            return NULL;
c0108359:	b8 00 00 00 00       	mov    $0x0,%eax
c010835e:	eb 75                	jmp    c01083d5 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c0108360:	a1 6c 4f 1c c0       	mov    0xc01c4f6c,%eax
c0108365:	85 c0                	test   %eax,%eax
c0108367:	74 69                	je     c01083d2 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c0108369:	a1 bc 70 1c c0       	mov    0xc01c70bc,%eax
c010836e:	85 c0                	test   %eax,%eax
c0108370:	74 60                	je     c01083d2 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0108372:	a1 bc 70 1c c0       	mov    0xc01c70bc,%eax
c0108377:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010837e:	00 
c010837f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108382:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108386:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108389:	89 54 24 04          	mov    %edx,0x4(%esp)
c010838d:	89 04 24             	mov    %eax,(%esp)
c0108390:	e8 e7 d1 ff ff       	call   c010557c <swap_map_swappable>
                page->pra_vaddr=la;
c0108395:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108398:	8b 55 0c             	mov    0xc(%ebp),%edx
c010839b:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c010839e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01083a1:	89 04 24             	mov    %eax,(%esp)
c01083a4:	e8 01 ef ff ff       	call   c01072aa <page_ref>
c01083a9:	83 f8 01             	cmp    $0x1,%eax
c01083ac:	74 24                	je     c01083d2 <pgdir_alloc_page+0xcf>
c01083ae:	c7 44 24 0c 01 f1 10 	movl   $0xc010f101,0xc(%esp)
c01083b5:	c0 
c01083b6:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c01083bd:	c0 
c01083be:	c7 44 24 04 2a 02 00 	movl   $0x22a,0x4(%esp)
c01083c5:	00 
c01083c6:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c01083cd:	e8 33 80 ff ff       	call   c0100405 <__panic>
            }
        }

    }

    return page;
c01083d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01083d5:	c9                   	leave  
c01083d6:	c3                   	ret    

c01083d7 <check_alloc_page>:

static void
check_alloc_page(void) {
c01083d7:	55                   	push   %ebp
c01083d8:	89 e5                	mov    %esp,%ebp
c01083da:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c01083dd:	a1 b0 71 1c c0       	mov    0xc01c71b0,%eax
c01083e2:	8b 40 18             	mov    0x18(%eax),%eax
c01083e5:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c01083e7:	c7 04 24 18 f1 10 c0 	movl   $0xc010f118,(%esp)
c01083ee:	e8 bb 7e ff ff       	call   c01002ae <cprintf>
}
c01083f3:	c9                   	leave  
c01083f4:	c3                   	ret    

c01083f5 <check_pgdir>:

static void
check_pgdir(void) {
c01083f5:	55                   	push   %ebp
c01083f6:	89 e5                	mov    %esp,%ebp
c01083f8:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c01083fb:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0108400:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0108405:	76 24                	jbe    c010842b <check_pgdir+0x36>
c0108407:	c7 44 24 0c 37 f1 10 	movl   $0xc010f137,0xc(%esp)
c010840e:	c0 
c010840f:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108416:	c0 
c0108417:	c7 44 24 04 42 02 00 	movl   $0x242,0x4(%esp)
c010841e:	00 
c010841f:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108426:	e8 da 7f ff ff       	call   c0100405 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c010842b:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108430:	85 c0                	test   %eax,%eax
c0108432:	74 0e                	je     c0108442 <check_pgdir+0x4d>
c0108434:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108439:	25 ff 0f 00 00       	and    $0xfff,%eax
c010843e:	85 c0                	test   %eax,%eax
c0108440:	74 24                	je     c0108466 <check_pgdir+0x71>
c0108442:	c7 44 24 0c 54 f1 10 	movl   $0xc010f154,0xc(%esp)
c0108449:	c0 
c010844a:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108451:	c0 
c0108452:	c7 44 24 04 43 02 00 	movl   $0x243,0x4(%esp)
c0108459:	00 
c010845a:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108461:	e8 9f 7f ff ff       	call   c0100405 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0108466:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c010846b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108472:	00 
c0108473:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010847a:	00 
c010847b:	89 04 24             	mov    %eax,(%esp)
c010847e:	e8 48 f8 ff ff       	call   c0107ccb <get_page>
c0108483:	85 c0                	test   %eax,%eax
c0108485:	74 24                	je     c01084ab <check_pgdir+0xb6>
c0108487:	c7 44 24 0c 8c f1 10 	movl   $0xc010f18c,0xc(%esp)
c010848e:	c0 
c010848f:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108496:	c0 
c0108497:	c7 44 24 04 44 02 00 	movl   $0x244,0x4(%esp)
c010849e:	00 
c010849f:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c01084a6:	e8 5a 7f ff ff       	call   c0100405 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c01084ab:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01084b2:	e8 f8 ef ff ff       	call   c01074af <alloc_pages>
c01084b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c01084ba:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01084bf:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01084c6:	00 
c01084c7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01084ce:	00 
c01084cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01084d2:	89 54 24 04          	mov    %edx,0x4(%esp)
c01084d6:	89 04 24             	mov    %eax,(%esp)
c01084d9:	e8 0f fd ff ff       	call   c01081ed <page_insert>
c01084de:	85 c0                	test   %eax,%eax
c01084e0:	74 24                	je     c0108506 <check_pgdir+0x111>
c01084e2:	c7 44 24 0c b4 f1 10 	movl   $0xc010f1b4,0xc(%esp)
c01084e9:	c0 
c01084ea:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c01084f1:	c0 
c01084f2:	c7 44 24 04 48 02 00 	movl   $0x248,0x4(%esp)
c01084f9:	00 
c01084fa:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108501:	e8 ff 7e ff ff       	call   c0100405 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0108506:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c010850b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108512:	00 
c0108513:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010851a:	00 
c010851b:	89 04 24             	mov    %eax,(%esp)
c010851e:	e8 70 f6 ff ff       	call   c0107b93 <get_pte>
c0108523:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108526:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010852a:	75 24                	jne    c0108550 <check_pgdir+0x15b>
c010852c:	c7 44 24 0c e0 f1 10 	movl   $0xc010f1e0,0xc(%esp)
c0108533:	c0 
c0108534:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c010853b:	c0 
c010853c:	c7 44 24 04 4b 02 00 	movl   $0x24b,0x4(%esp)
c0108543:	00 
c0108544:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c010854b:	e8 b5 7e ff ff       	call   c0100405 <__panic>
    assert(pte2page(*ptep) == p1);
c0108550:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108553:	8b 00                	mov    (%eax),%eax
c0108555:	89 04 24             	mov    %eax,(%esp)
c0108558:	e8 f7 ec ff ff       	call   c0107254 <pte2page>
c010855d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108560:	74 24                	je     c0108586 <check_pgdir+0x191>
c0108562:	c7 44 24 0c 0d f2 10 	movl   $0xc010f20d,0xc(%esp)
c0108569:	c0 
c010856a:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108571:	c0 
c0108572:	c7 44 24 04 4c 02 00 	movl   $0x24c,0x4(%esp)
c0108579:	00 
c010857a:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108581:	e8 7f 7e ff ff       	call   c0100405 <__panic>
    assert(page_ref(p1) == 1);
c0108586:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108589:	89 04 24             	mov    %eax,(%esp)
c010858c:	e8 19 ed ff ff       	call   c01072aa <page_ref>
c0108591:	83 f8 01             	cmp    $0x1,%eax
c0108594:	74 24                	je     c01085ba <check_pgdir+0x1c5>
c0108596:	c7 44 24 0c 23 f2 10 	movl   $0xc010f223,0xc(%esp)
c010859d:	c0 
c010859e:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c01085a5:	c0 
c01085a6:	c7 44 24 04 4d 02 00 	movl   $0x24d,0x4(%esp)
c01085ad:	00 
c01085ae:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c01085b5:	e8 4b 7e ff ff       	call   c0100405 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c01085ba:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01085bf:	8b 00                	mov    (%eax),%eax
c01085c1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01085c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01085c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01085cc:	c1 e8 0c             	shr    $0xc,%eax
c01085cf:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01085d2:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c01085d7:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c01085da:	72 23                	jb     c01085ff <check_pgdir+0x20a>
c01085dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01085df:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01085e3:	c7 44 24 08 78 ef 10 	movl   $0xc010ef78,0x8(%esp)
c01085ea:	c0 
c01085eb:	c7 44 24 04 4f 02 00 	movl   $0x24f,0x4(%esp)
c01085f2:	00 
c01085f3:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c01085fa:	e8 06 7e ff ff       	call   c0100405 <__panic>
c01085ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108602:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0108607:	83 c0 04             	add    $0x4,%eax
c010860a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c010860d:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108612:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108619:	00 
c010861a:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0108621:	00 
c0108622:	89 04 24             	mov    %eax,(%esp)
c0108625:	e8 69 f5 ff ff       	call   c0107b93 <get_pte>
c010862a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010862d:	74 24                	je     c0108653 <check_pgdir+0x25e>
c010862f:	c7 44 24 0c 38 f2 10 	movl   $0xc010f238,0xc(%esp)
c0108636:	c0 
c0108637:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c010863e:	c0 
c010863f:	c7 44 24 04 50 02 00 	movl   $0x250,0x4(%esp)
c0108646:	00 
c0108647:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c010864e:	e8 b2 7d ff ff       	call   c0100405 <__panic>

    p2 = alloc_page();
c0108653:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010865a:	e8 50 ee ff ff       	call   c01074af <alloc_pages>
c010865f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0108662:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108667:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c010866e:	00 
c010866f:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0108676:	00 
c0108677:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010867a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010867e:	89 04 24             	mov    %eax,(%esp)
c0108681:	e8 67 fb ff ff       	call   c01081ed <page_insert>
c0108686:	85 c0                	test   %eax,%eax
c0108688:	74 24                	je     c01086ae <check_pgdir+0x2b9>
c010868a:	c7 44 24 0c 60 f2 10 	movl   $0xc010f260,0xc(%esp)
c0108691:	c0 
c0108692:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108699:	c0 
c010869a:	c7 44 24 04 53 02 00 	movl   $0x253,0x4(%esp)
c01086a1:	00 
c01086a2:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c01086a9:	e8 57 7d ff ff       	call   c0100405 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01086ae:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01086b3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01086ba:	00 
c01086bb:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01086c2:	00 
c01086c3:	89 04 24             	mov    %eax,(%esp)
c01086c6:	e8 c8 f4 ff ff       	call   c0107b93 <get_pte>
c01086cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01086ce:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01086d2:	75 24                	jne    c01086f8 <check_pgdir+0x303>
c01086d4:	c7 44 24 0c 98 f2 10 	movl   $0xc010f298,0xc(%esp)
c01086db:	c0 
c01086dc:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c01086e3:	c0 
c01086e4:	c7 44 24 04 54 02 00 	movl   $0x254,0x4(%esp)
c01086eb:	00 
c01086ec:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c01086f3:	e8 0d 7d ff ff       	call   c0100405 <__panic>
    assert(*ptep & PTE_U);
c01086f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01086fb:	8b 00                	mov    (%eax),%eax
c01086fd:	83 e0 04             	and    $0x4,%eax
c0108700:	85 c0                	test   %eax,%eax
c0108702:	75 24                	jne    c0108728 <check_pgdir+0x333>
c0108704:	c7 44 24 0c c8 f2 10 	movl   $0xc010f2c8,0xc(%esp)
c010870b:	c0 
c010870c:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108713:	c0 
c0108714:	c7 44 24 04 55 02 00 	movl   $0x255,0x4(%esp)
c010871b:	00 
c010871c:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108723:	e8 dd 7c ff ff       	call   c0100405 <__panic>
    assert(*ptep & PTE_W);
c0108728:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010872b:	8b 00                	mov    (%eax),%eax
c010872d:	83 e0 02             	and    $0x2,%eax
c0108730:	85 c0                	test   %eax,%eax
c0108732:	75 24                	jne    c0108758 <check_pgdir+0x363>
c0108734:	c7 44 24 0c d6 f2 10 	movl   $0xc010f2d6,0xc(%esp)
c010873b:	c0 
c010873c:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108743:	c0 
c0108744:	c7 44 24 04 56 02 00 	movl   $0x256,0x4(%esp)
c010874b:	00 
c010874c:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108753:	e8 ad 7c ff ff       	call   c0100405 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c0108758:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c010875d:	8b 00                	mov    (%eax),%eax
c010875f:	83 e0 04             	and    $0x4,%eax
c0108762:	85 c0                	test   %eax,%eax
c0108764:	75 24                	jne    c010878a <check_pgdir+0x395>
c0108766:	c7 44 24 0c e4 f2 10 	movl   $0xc010f2e4,0xc(%esp)
c010876d:	c0 
c010876e:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108775:	c0 
c0108776:	c7 44 24 04 57 02 00 	movl   $0x257,0x4(%esp)
c010877d:	00 
c010877e:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108785:	e8 7b 7c ff ff       	call   c0100405 <__panic>
    assert(page_ref(p2) == 1);
c010878a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010878d:	89 04 24             	mov    %eax,(%esp)
c0108790:	e8 15 eb ff ff       	call   c01072aa <page_ref>
c0108795:	83 f8 01             	cmp    $0x1,%eax
c0108798:	74 24                	je     c01087be <check_pgdir+0x3c9>
c010879a:	c7 44 24 0c fa f2 10 	movl   $0xc010f2fa,0xc(%esp)
c01087a1:	c0 
c01087a2:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c01087a9:	c0 
c01087aa:	c7 44 24 04 58 02 00 	movl   $0x258,0x4(%esp)
c01087b1:	00 
c01087b2:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c01087b9:	e8 47 7c ff ff       	call   c0100405 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c01087be:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01087c3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01087ca:	00 
c01087cb:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01087d2:	00 
c01087d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01087d6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01087da:	89 04 24             	mov    %eax,(%esp)
c01087dd:	e8 0b fa ff ff       	call   c01081ed <page_insert>
c01087e2:	85 c0                	test   %eax,%eax
c01087e4:	74 24                	je     c010880a <check_pgdir+0x415>
c01087e6:	c7 44 24 0c 0c f3 10 	movl   $0xc010f30c,0xc(%esp)
c01087ed:	c0 
c01087ee:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c01087f5:	c0 
c01087f6:	c7 44 24 04 5a 02 00 	movl   $0x25a,0x4(%esp)
c01087fd:	00 
c01087fe:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108805:	e8 fb 7b ff ff       	call   c0100405 <__panic>
    assert(page_ref(p1) == 2);
c010880a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010880d:	89 04 24             	mov    %eax,(%esp)
c0108810:	e8 95 ea ff ff       	call   c01072aa <page_ref>
c0108815:	83 f8 02             	cmp    $0x2,%eax
c0108818:	74 24                	je     c010883e <check_pgdir+0x449>
c010881a:	c7 44 24 0c 38 f3 10 	movl   $0xc010f338,0xc(%esp)
c0108821:	c0 
c0108822:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108829:	c0 
c010882a:	c7 44 24 04 5b 02 00 	movl   $0x25b,0x4(%esp)
c0108831:	00 
c0108832:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108839:	e8 c7 7b ff ff       	call   c0100405 <__panic>
    assert(page_ref(p2) == 0);
c010883e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108841:	89 04 24             	mov    %eax,(%esp)
c0108844:	e8 61 ea ff ff       	call   c01072aa <page_ref>
c0108849:	85 c0                	test   %eax,%eax
c010884b:	74 24                	je     c0108871 <check_pgdir+0x47c>
c010884d:	c7 44 24 0c 4a f3 10 	movl   $0xc010f34a,0xc(%esp)
c0108854:	c0 
c0108855:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c010885c:	c0 
c010885d:	c7 44 24 04 5c 02 00 	movl   $0x25c,0x4(%esp)
c0108864:	00 
c0108865:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c010886c:	e8 94 7b ff ff       	call   c0100405 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0108871:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108876:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010887d:	00 
c010887e:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0108885:	00 
c0108886:	89 04 24             	mov    %eax,(%esp)
c0108889:	e8 05 f3 ff ff       	call   c0107b93 <get_pte>
c010888e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108891:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108895:	75 24                	jne    c01088bb <check_pgdir+0x4c6>
c0108897:	c7 44 24 0c 98 f2 10 	movl   $0xc010f298,0xc(%esp)
c010889e:	c0 
c010889f:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c01088a6:	c0 
c01088a7:	c7 44 24 04 5d 02 00 	movl   $0x25d,0x4(%esp)
c01088ae:	00 
c01088af:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c01088b6:	e8 4a 7b ff ff       	call   c0100405 <__panic>
    assert(pte2page(*ptep) == p1);
c01088bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01088be:	8b 00                	mov    (%eax),%eax
c01088c0:	89 04 24             	mov    %eax,(%esp)
c01088c3:	e8 8c e9 ff ff       	call   c0107254 <pte2page>
c01088c8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01088cb:	74 24                	je     c01088f1 <check_pgdir+0x4fc>
c01088cd:	c7 44 24 0c 0d f2 10 	movl   $0xc010f20d,0xc(%esp)
c01088d4:	c0 
c01088d5:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c01088dc:	c0 
c01088dd:	c7 44 24 04 5e 02 00 	movl   $0x25e,0x4(%esp)
c01088e4:	00 
c01088e5:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c01088ec:	e8 14 7b ff ff       	call   c0100405 <__panic>
    assert((*ptep & PTE_U) == 0);
c01088f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01088f4:	8b 00                	mov    (%eax),%eax
c01088f6:	83 e0 04             	and    $0x4,%eax
c01088f9:	85 c0                	test   %eax,%eax
c01088fb:	74 24                	je     c0108921 <check_pgdir+0x52c>
c01088fd:	c7 44 24 0c 5c f3 10 	movl   $0xc010f35c,0xc(%esp)
c0108904:	c0 
c0108905:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c010890c:	c0 
c010890d:	c7 44 24 04 5f 02 00 	movl   $0x25f,0x4(%esp)
c0108914:	00 
c0108915:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c010891c:	e8 e4 7a ff ff       	call   c0100405 <__panic>

    page_remove(boot_pgdir, 0x0);
c0108921:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108926:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010892d:	00 
c010892e:	89 04 24             	mov    %eax,(%esp)
c0108931:	e8 73 f8 ff ff       	call   c01081a9 <page_remove>
    assert(page_ref(p1) == 1);
c0108936:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108939:	89 04 24             	mov    %eax,(%esp)
c010893c:	e8 69 e9 ff ff       	call   c01072aa <page_ref>
c0108941:	83 f8 01             	cmp    $0x1,%eax
c0108944:	74 24                	je     c010896a <check_pgdir+0x575>
c0108946:	c7 44 24 0c 23 f2 10 	movl   $0xc010f223,0xc(%esp)
c010894d:	c0 
c010894e:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108955:	c0 
c0108956:	c7 44 24 04 62 02 00 	movl   $0x262,0x4(%esp)
c010895d:	00 
c010895e:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108965:	e8 9b 7a ff ff       	call   c0100405 <__panic>
    assert(page_ref(p2) == 0);
c010896a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010896d:	89 04 24             	mov    %eax,(%esp)
c0108970:	e8 35 e9 ff ff       	call   c01072aa <page_ref>
c0108975:	85 c0                	test   %eax,%eax
c0108977:	74 24                	je     c010899d <check_pgdir+0x5a8>
c0108979:	c7 44 24 0c 4a f3 10 	movl   $0xc010f34a,0xc(%esp)
c0108980:	c0 
c0108981:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108988:	c0 
c0108989:	c7 44 24 04 63 02 00 	movl   $0x263,0x4(%esp)
c0108990:	00 
c0108991:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108998:	e8 68 7a ff ff       	call   c0100405 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c010899d:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01089a2:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01089a9:	00 
c01089aa:	89 04 24             	mov    %eax,(%esp)
c01089ad:	e8 f7 f7 ff ff       	call   c01081a9 <page_remove>
    assert(page_ref(p1) == 0);
c01089b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089b5:	89 04 24             	mov    %eax,(%esp)
c01089b8:	e8 ed e8 ff ff       	call   c01072aa <page_ref>
c01089bd:	85 c0                	test   %eax,%eax
c01089bf:	74 24                	je     c01089e5 <check_pgdir+0x5f0>
c01089c1:	c7 44 24 0c 71 f3 10 	movl   $0xc010f371,0xc(%esp)
c01089c8:	c0 
c01089c9:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c01089d0:	c0 
c01089d1:	c7 44 24 04 66 02 00 	movl   $0x266,0x4(%esp)
c01089d8:	00 
c01089d9:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c01089e0:	e8 20 7a ff ff       	call   c0100405 <__panic>
    assert(page_ref(p2) == 0);
c01089e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01089e8:	89 04 24             	mov    %eax,(%esp)
c01089eb:	e8 ba e8 ff ff       	call   c01072aa <page_ref>
c01089f0:	85 c0                	test   %eax,%eax
c01089f2:	74 24                	je     c0108a18 <check_pgdir+0x623>
c01089f4:	c7 44 24 0c 4a f3 10 	movl   $0xc010f34a,0xc(%esp)
c01089fb:	c0 
c01089fc:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108a03:	c0 
c0108a04:	c7 44 24 04 67 02 00 	movl   $0x267,0x4(%esp)
c0108a0b:	00 
c0108a0c:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108a13:	e8 ed 79 ff ff       	call   c0100405 <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c0108a18:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108a1d:	8b 00                	mov    (%eax),%eax
c0108a1f:	89 04 24             	mov    %eax,(%esp)
c0108a22:	e8 6b e8 ff ff       	call   c0107292 <pde2page>
c0108a27:	89 04 24             	mov    %eax,(%esp)
c0108a2a:	e8 7b e8 ff ff       	call   c01072aa <page_ref>
c0108a2f:	83 f8 01             	cmp    $0x1,%eax
c0108a32:	74 24                	je     c0108a58 <check_pgdir+0x663>
c0108a34:	c7 44 24 0c 84 f3 10 	movl   $0xc010f384,0xc(%esp)
c0108a3b:	c0 
c0108a3c:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108a43:	c0 
c0108a44:	c7 44 24 04 69 02 00 	movl   $0x269,0x4(%esp)
c0108a4b:	00 
c0108a4c:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108a53:	e8 ad 79 ff ff       	call   c0100405 <__panic>
    free_page(pde2page(boot_pgdir[0]));
c0108a58:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108a5d:	8b 00                	mov    (%eax),%eax
c0108a5f:	89 04 24             	mov    %eax,(%esp)
c0108a62:	e8 2b e8 ff ff       	call   c0107292 <pde2page>
c0108a67:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108a6e:	00 
c0108a6f:	89 04 24             	mov    %eax,(%esp)
c0108a72:	e8 a3 ea ff ff       	call   c010751a <free_pages>
    boot_pgdir[0] = 0;
c0108a77:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108a7c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0108a82:	c7 04 24 ab f3 10 c0 	movl   $0xc010f3ab,(%esp)
c0108a89:	e8 20 78 ff ff       	call   c01002ae <cprintf>
}
c0108a8e:	c9                   	leave  
c0108a8f:	c3                   	ret    

c0108a90 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0108a90:	55                   	push   %ebp
c0108a91:	89 e5                	mov    %esp,%ebp
c0108a93:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0108a96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108a9d:	e9 ca 00 00 00       	jmp    c0108b6c <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0108aa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108aa5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108aa8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108aab:	c1 e8 0c             	shr    $0xc,%eax
c0108aae:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108ab1:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0108ab6:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0108ab9:	72 23                	jb     c0108ade <check_boot_pgdir+0x4e>
c0108abb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108abe:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0108ac2:	c7 44 24 08 78 ef 10 	movl   $0xc010ef78,0x8(%esp)
c0108ac9:	c0 
c0108aca:	c7 44 24 04 75 02 00 	movl   $0x275,0x4(%esp)
c0108ad1:	00 
c0108ad2:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108ad9:	e8 27 79 ff ff       	call   c0100405 <__panic>
c0108ade:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108ae1:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0108ae6:	89 c2                	mov    %eax,%edx
c0108ae8:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108aed:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108af4:	00 
c0108af5:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108af9:	89 04 24             	mov    %eax,(%esp)
c0108afc:	e8 92 f0 ff ff       	call   c0107b93 <get_pte>
c0108b01:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108b04:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108b08:	75 24                	jne    c0108b2e <check_boot_pgdir+0x9e>
c0108b0a:	c7 44 24 0c c8 f3 10 	movl   $0xc010f3c8,0xc(%esp)
c0108b11:	c0 
c0108b12:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108b19:	c0 
c0108b1a:	c7 44 24 04 75 02 00 	movl   $0x275,0x4(%esp)
c0108b21:	00 
c0108b22:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108b29:	e8 d7 78 ff ff       	call   c0100405 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c0108b2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b31:	8b 00                	mov    (%eax),%eax
c0108b33:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108b38:	89 c2                	mov    %eax,%edx
c0108b3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b3d:	39 c2                	cmp    %eax,%edx
c0108b3f:	74 24                	je     c0108b65 <check_boot_pgdir+0xd5>
c0108b41:	c7 44 24 0c 05 f4 10 	movl   $0xc010f405,0xc(%esp)
c0108b48:	c0 
c0108b49:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108b50:	c0 
c0108b51:	c7 44 24 04 76 02 00 	movl   $0x276,0x4(%esp)
c0108b58:	00 
c0108b59:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108b60:	e8 a0 78 ff ff       	call   c0100405 <__panic>
    for (i = 0; i < npage; i += PGSIZE) {
c0108b65:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c0108b6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108b6f:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0108b74:	39 c2                	cmp    %eax,%edx
c0108b76:	0f 82 26 ff ff ff    	jb     c0108aa2 <check_boot_pgdir+0x12>
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c0108b7c:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108b81:	05 ac 0f 00 00       	add    $0xfac,%eax
c0108b86:	8b 00                	mov    (%eax),%eax
c0108b88:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108b8d:	89 c2                	mov    %eax,%edx
c0108b8f:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108b94:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108b97:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c0108b9e:	77 23                	ja     c0108bc3 <check_boot_pgdir+0x133>
c0108ba0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108ba3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0108ba7:	c7 44 24 08 1c f0 10 	movl   $0xc010f01c,0x8(%esp)
c0108bae:	c0 
c0108baf:	c7 44 24 04 79 02 00 	movl   $0x279,0x4(%esp)
c0108bb6:	00 
c0108bb7:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108bbe:	e8 42 78 ff ff       	call   c0100405 <__panic>
c0108bc3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108bc6:	05 00 00 00 40       	add    $0x40000000,%eax
c0108bcb:	39 c2                	cmp    %eax,%edx
c0108bcd:	74 24                	je     c0108bf3 <check_boot_pgdir+0x163>
c0108bcf:	c7 44 24 0c 1c f4 10 	movl   $0xc010f41c,0xc(%esp)
c0108bd6:	c0 
c0108bd7:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108bde:	c0 
c0108bdf:	c7 44 24 04 79 02 00 	movl   $0x279,0x4(%esp)
c0108be6:	00 
c0108be7:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108bee:	e8 12 78 ff ff       	call   c0100405 <__panic>

    assert(boot_pgdir[0] == 0);
c0108bf3:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108bf8:	8b 00                	mov    (%eax),%eax
c0108bfa:	85 c0                	test   %eax,%eax
c0108bfc:	74 24                	je     c0108c22 <check_boot_pgdir+0x192>
c0108bfe:	c7 44 24 0c 50 f4 10 	movl   $0xc010f450,0xc(%esp)
c0108c05:	c0 
c0108c06:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108c0d:	c0 
c0108c0e:	c7 44 24 04 7b 02 00 	movl   $0x27b,0x4(%esp)
c0108c15:	00 
c0108c16:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108c1d:	e8 e3 77 ff ff       	call   c0100405 <__panic>

    struct Page *p;
    p = alloc_page();
c0108c22:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0108c29:	e8 81 e8 ff ff       	call   c01074af <alloc_pages>
c0108c2e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0108c31:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108c36:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0108c3d:	00 
c0108c3e:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0108c45:	00 
c0108c46:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108c49:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108c4d:	89 04 24             	mov    %eax,(%esp)
c0108c50:	e8 98 f5 ff ff       	call   c01081ed <page_insert>
c0108c55:	85 c0                	test   %eax,%eax
c0108c57:	74 24                	je     c0108c7d <check_boot_pgdir+0x1ed>
c0108c59:	c7 44 24 0c 64 f4 10 	movl   $0xc010f464,0xc(%esp)
c0108c60:	c0 
c0108c61:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108c68:	c0 
c0108c69:	c7 44 24 04 7f 02 00 	movl   $0x27f,0x4(%esp)
c0108c70:	00 
c0108c71:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108c78:	e8 88 77 ff ff       	call   c0100405 <__panic>
    assert(page_ref(p) == 1);
c0108c7d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108c80:	89 04 24             	mov    %eax,(%esp)
c0108c83:	e8 22 e6 ff ff       	call   c01072aa <page_ref>
c0108c88:	83 f8 01             	cmp    $0x1,%eax
c0108c8b:	74 24                	je     c0108cb1 <check_boot_pgdir+0x221>
c0108c8d:	c7 44 24 0c 92 f4 10 	movl   $0xc010f492,0xc(%esp)
c0108c94:	c0 
c0108c95:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108c9c:	c0 
c0108c9d:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
c0108ca4:	00 
c0108ca5:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108cac:	e8 54 77 ff ff       	call   c0100405 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0108cb1:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108cb6:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0108cbd:	00 
c0108cbe:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c0108cc5:	00 
c0108cc6:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108cc9:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108ccd:	89 04 24             	mov    %eax,(%esp)
c0108cd0:	e8 18 f5 ff ff       	call   c01081ed <page_insert>
c0108cd5:	85 c0                	test   %eax,%eax
c0108cd7:	74 24                	je     c0108cfd <check_boot_pgdir+0x26d>
c0108cd9:	c7 44 24 0c a4 f4 10 	movl   $0xc010f4a4,0xc(%esp)
c0108ce0:	c0 
c0108ce1:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108ce8:	c0 
c0108ce9:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
c0108cf0:	00 
c0108cf1:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108cf8:	e8 08 77 ff ff       	call   c0100405 <__panic>
    assert(page_ref(p) == 2);
c0108cfd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108d00:	89 04 24             	mov    %eax,(%esp)
c0108d03:	e8 a2 e5 ff ff       	call   c01072aa <page_ref>
c0108d08:	83 f8 02             	cmp    $0x2,%eax
c0108d0b:	74 24                	je     c0108d31 <check_boot_pgdir+0x2a1>
c0108d0d:	c7 44 24 0c db f4 10 	movl   $0xc010f4db,0xc(%esp)
c0108d14:	c0 
c0108d15:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108d1c:	c0 
c0108d1d:	c7 44 24 04 82 02 00 	movl   $0x282,0x4(%esp)
c0108d24:	00 
c0108d25:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108d2c:	e8 d4 76 ff ff       	call   c0100405 <__panic>

    const char *str = "ucore: Hello world!!";
c0108d31:	c7 45 dc ec f4 10 c0 	movl   $0xc010f4ec,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0108d38:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108d3b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d3f:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0108d46:	e8 31 3d 00 00       	call   c010ca7c <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0108d4b:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0108d52:	00 
c0108d53:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0108d5a:	e8 96 3d 00 00       	call   c010caf5 <strcmp>
c0108d5f:	85 c0                	test   %eax,%eax
c0108d61:	74 24                	je     c0108d87 <check_boot_pgdir+0x2f7>
c0108d63:	c7 44 24 0c 04 f5 10 	movl   $0xc010f504,0xc(%esp)
c0108d6a:	c0 
c0108d6b:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108d72:	c0 
c0108d73:	c7 44 24 04 86 02 00 	movl   $0x286,0x4(%esp)
c0108d7a:	00 
c0108d7b:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108d82:	e8 7e 76 ff ff       	call   c0100405 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0108d87:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108d8a:	89 04 24             	mov    %eax,(%esp)
c0108d8d:	e8 6e e4 ff ff       	call   c0107200 <page2kva>
c0108d92:	05 00 01 00 00       	add    $0x100,%eax
c0108d97:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0108d9a:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0108da1:	e8 7e 3c 00 00       	call   c010ca24 <strlen>
c0108da6:	85 c0                	test   %eax,%eax
c0108da8:	74 24                	je     c0108dce <check_boot_pgdir+0x33e>
c0108daa:	c7 44 24 0c 3c f5 10 	movl   $0xc010f53c,0xc(%esp)
c0108db1:	c0 
c0108db2:	c7 44 24 08 65 f0 10 	movl   $0xc010f065,0x8(%esp)
c0108db9:	c0 
c0108dba:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
c0108dc1:	00 
c0108dc2:	c7 04 24 40 f0 10 c0 	movl   $0xc010f040,(%esp)
c0108dc9:	e8 37 76 ff ff       	call   c0100405 <__panic>

    free_page(p);
c0108dce:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108dd5:	00 
c0108dd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108dd9:	89 04 24             	mov    %eax,(%esp)
c0108ddc:	e8 39 e7 ff ff       	call   c010751a <free_pages>
    free_page(pde2page(boot_pgdir[0]));
c0108de1:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108de6:	8b 00                	mov    (%eax),%eax
c0108de8:	89 04 24             	mov    %eax,(%esp)
c0108deb:	e8 a2 e4 ff ff       	call   c0107292 <pde2page>
c0108df0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108df7:	00 
c0108df8:	89 04 24             	mov    %eax,(%esp)
c0108dfb:	e8 1a e7 ff ff       	call   c010751a <free_pages>
    boot_pgdir[0] = 0;
c0108e00:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108e05:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0108e0b:	c7 04 24 60 f5 10 c0 	movl   $0xc010f560,(%esp)
c0108e12:	e8 97 74 ff ff       	call   c01002ae <cprintf>
}
c0108e17:	c9                   	leave  
c0108e18:	c3                   	ret    

c0108e19 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0108e19:	55                   	push   %ebp
c0108e1a:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0108e1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e1f:	83 e0 04             	and    $0x4,%eax
c0108e22:	85 c0                	test   %eax,%eax
c0108e24:	74 07                	je     c0108e2d <perm2str+0x14>
c0108e26:	b8 75 00 00 00       	mov    $0x75,%eax
c0108e2b:	eb 05                	jmp    c0108e32 <perm2str+0x19>
c0108e2d:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0108e32:	a2 08 50 1c c0       	mov    %al,0xc01c5008
    str[1] = 'r';
c0108e37:	c6 05 09 50 1c c0 72 	movb   $0x72,0xc01c5009
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0108e3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e41:	83 e0 02             	and    $0x2,%eax
c0108e44:	85 c0                	test   %eax,%eax
c0108e46:	74 07                	je     c0108e4f <perm2str+0x36>
c0108e48:	b8 77 00 00 00       	mov    $0x77,%eax
c0108e4d:	eb 05                	jmp    c0108e54 <perm2str+0x3b>
c0108e4f:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0108e54:	a2 0a 50 1c c0       	mov    %al,0xc01c500a
    str[3] = '\0';
c0108e59:	c6 05 0b 50 1c c0 00 	movb   $0x0,0xc01c500b
    return str;
c0108e60:	b8 08 50 1c c0       	mov    $0xc01c5008,%eax
}
c0108e65:	5d                   	pop    %ebp
c0108e66:	c3                   	ret    

c0108e67 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0108e67:	55                   	push   %ebp
c0108e68:	89 e5                	mov    %esp,%ebp
c0108e6a:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0108e6d:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e70:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108e73:	72 0a                	jb     c0108e7f <get_pgtable_items+0x18>
        return 0;
c0108e75:	b8 00 00 00 00       	mov    $0x0,%eax
c0108e7a:	e9 9c 00 00 00       	jmp    c0108f1b <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c0108e7f:	eb 04                	jmp    c0108e85 <get_pgtable_items+0x1e>
        start ++;
c0108e81:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    while (start < right && !(table[start] & PTE_P)) {
c0108e85:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e88:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108e8b:	73 18                	jae    c0108ea5 <get_pgtable_items+0x3e>
c0108e8d:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e90:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108e97:	8b 45 14             	mov    0x14(%ebp),%eax
c0108e9a:	01 d0                	add    %edx,%eax
c0108e9c:	8b 00                	mov    (%eax),%eax
c0108e9e:	83 e0 01             	and    $0x1,%eax
c0108ea1:	85 c0                	test   %eax,%eax
c0108ea3:	74 dc                	je     c0108e81 <get_pgtable_items+0x1a>
    }
    if (start < right) {
c0108ea5:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ea8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108eab:	73 69                	jae    c0108f16 <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c0108ead:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0108eb1:	74 08                	je     c0108ebb <get_pgtable_items+0x54>
            *left_store = start;
c0108eb3:	8b 45 18             	mov    0x18(%ebp),%eax
c0108eb6:	8b 55 10             	mov    0x10(%ebp),%edx
c0108eb9:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0108ebb:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ebe:	8d 50 01             	lea    0x1(%eax),%edx
c0108ec1:	89 55 10             	mov    %edx,0x10(%ebp)
c0108ec4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108ecb:	8b 45 14             	mov    0x14(%ebp),%eax
c0108ece:	01 d0                	add    %edx,%eax
c0108ed0:	8b 00                	mov    (%eax),%eax
c0108ed2:	83 e0 07             	and    $0x7,%eax
c0108ed5:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0108ed8:	eb 04                	jmp    c0108ede <get_pgtable_items+0x77>
            start ++;
c0108eda:	83 45 10 01          	addl   $0x1,0x10(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0108ede:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ee1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108ee4:	73 1d                	jae    c0108f03 <get_pgtable_items+0x9c>
c0108ee6:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ee9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108ef0:	8b 45 14             	mov    0x14(%ebp),%eax
c0108ef3:	01 d0                	add    %edx,%eax
c0108ef5:	8b 00                	mov    (%eax),%eax
c0108ef7:	83 e0 07             	and    $0x7,%eax
c0108efa:	89 c2                	mov    %eax,%edx
c0108efc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108eff:	39 c2                	cmp    %eax,%edx
c0108f01:	74 d7                	je     c0108eda <get_pgtable_items+0x73>
        }
        if (right_store != NULL) {
c0108f03:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0108f07:	74 08                	je     c0108f11 <get_pgtable_items+0xaa>
            *right_store = start;
c0108f09:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0108f0c:	8b 55 10             	mov    0x10(%ebp),%edx
c0108f0f:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0108f11:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108f14:	eb 05                	jmp    c0108f1b <get_pgtable_items+0xb4>
    }
    return 0;
c0108f16:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108f1b:	c9                   	leave  
c0108f1c:	c3                   	ret    

c0108f1d <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0108f1d:	55                   	push   %ebp
c0108f1e:	89 e5                	mov    %esp,%ebp
c0108f20:	57                   	push   %edi
c0108f21:	56                   	push   %esi
c0108f22:	53                   	push   %ebx
c0108f23:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0108f26:	c7 04 24 80 f5 10 c0 	movl   $0xc010f580,(%esp)
c0108f2d:	e8 7c 73 ff ff       	call   c01002ae <cprintf>
    size_t left, right = 0, perm;
c0108f32:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0108f39:	e9 fa 00 00 00       	jmp    c0109038 <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0108f3e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f41:	89 04 24             	mov    %eax,(%esp)
c0108f44:	e8 d0 fe ff ff       	call   c0108e19 <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0108f49:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0108f4c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108f4f:	29 d1                	sub    %edx,%ecx
c0108f51:	89 ca                	mov    %ecx,%edx
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0108f53:	89 d6                	mov    %edx,%esi
c0108f55:	c1 e6 16             	shl    $0x16,%esi
c0108f58:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108f5b:	89 d3                	mov    %edx,%ebx
c0108f5d:	c1 e3 16             	shl    $0x16,%ebx
c0108f60:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108f63:	89 d1                	mov    %edx,%ecx
c0108f65:	c1 e1 16             	shl    $0x16,%ecx
c0108f68:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0108f6b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108f6e:	29 d7                	sub    %edx,%edi
c0108f70:	89 fa                	mov    %edi,%edx
c0108f72:	89 44 24 14          	mov    %eax,0x14(%esp)
c0108f76:	89 74 24 10          	mov    %esi,0x10(%esp)
c0108f7a:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0108f7e:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108f82:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108f86:	c7 04 24 b1 f5 10 c0 	movl   $0xc010f5b1,(%esp)
c0108f8d:	e8 1c 73 ff ff       	call   c01002ae <cprintf>
        size_t l, r = left * NPTEENTRY;
c0108f92:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108f95:	c1 e0 0a             	shl    $0xa,%eax
c0108f98:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0108f9b:	eb 54                	jmp    c0108ff1 <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0108f9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108fa0:	89 04 24             	mov    %eax,(%esp)
c0108fa3:	e8 71 fe ff ff       	call   c0108e19 <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0108fa8:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0108fab:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108fae:	29 d1                	sub    %edx,%ecx
c0108fb0:	89 ca                	mov    %ecx,%edx
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0108fb2:	89 d6                	mov    %edx,%esi
c0108fb4:	c1 e6 0c             	shl    $0xc,%esi
c0108fb7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108fba:	89 d3                	mov    %edx,%ebx
c0108fbc:	c1 e3 0c             	shl    $0xc,%ebx
c0108fbf:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108fc2:	c1 e2 0c             	shl    $0xc,%edx
c0108fc5:	89 d1                	mov    %edx,%ecx
c0108fc7:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0108fca:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108fcd:	29 d7                	sub    %edx,%edi
c0108fcf:	89 fa                	mov    %edi,%edx
c0108fd1:	89 44 24 14          	mov    %eax,0x14(%esp)
c0108fd5:	89 74 24 10          	mov    %esi,0x10(%esp)
c0108fd9:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0108fdd:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108fe1:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108fe5:	c7 04 24 d0 f5 10 c0 	movl   $0xc010f5d0,(%esp)
c0108fec:	e8 bd 72 ff ff       	call   c01002ae <cprintf>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0108ff1:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c0108ff6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108ff9:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0108ffc:	89 ce                	mov    %ecx,%esi
c0108ffe:	c1 e6 0a             	shl    $0xa,%esi
c0109001:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0109004:	89 cb                	mov    %ecx,%ebx
c0109006:	c1 e3 0a             	shl    $0xa,%ebx
c0109009:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c010900c:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0109010:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0109013:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0109017:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010901b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010901f:	89 74 24 04          	mov    %esi,0x4(%esp)
c0109023:	89 1c 24             	mov    %ebx,(%esp)
c0109026:	e8 3c fe ff ff       	call   c0108e67 <get_pgtable_items>
c010902b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010902e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0109032:	0f 85 65 ff ff ff    	jne    c0108f9d <print_pgdir+0x80>
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0109038:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c010903d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109040:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0109043:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0109047:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c010904a:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c010904e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109052:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109056:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c010905d:	00 
c010905e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0109065:	e8 fd fd ff ff       	call   c0108e67 <get_pgtable_items>
c010906a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010906d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0109071:	0f 85 c7 fe ff ff    	jne    c0108f3e <print_pgdir+0x21>
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0109077:	c7 04 24 f4 f5 10 c0 	movl   $0xc010f5f4,(%esp)
c010907e:	e8 2b 72 ff ff       	call   c01002ae <cprintf>
}
c0109083:	83 c4 4c             	add    $0x4c,%esp
c0109086:	5b                   	pop    %ebx
c0109087:	5e                   	pop    %esi
c0109088:	5f                   	pop    %edi
c0109089:	5d                   	pop    %ebp
c010908a:	c3                   	ret    

c010908b <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c010908b:	55                   	push   %ebp
c010908c:	89 e5                	mov    %esp,%ebp
c010908e:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c0109091:	8b 45 08             	mov    0x8(%ebp),%eax
c0109094:	8b 04 85 c0 71 1c c0 	mov    -0x3fe38e40(,%eax,4),%eax
c010909b:	83 f8 01             	cmp    $0x1,%eax
c010909e:	0f 85 85 00 00 00    	jne    c0109129 <phi_test_sema+0x9e>
c01090a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01090a7:	8d 48 04             	lea    0x4(%eax),%ecx
c01090aa:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01090af:	89 c8                	mov    %ecx,%eax
c01090b1:	f7 ea                	imul   %edx
c01090b3:	d1 fa                	sar    %edx
c01090b5:	89 c8                	mov    %ecx,%eax
c01090b7:	c1 f8 1f             	sar    $0x1f,%eax
c01090ba:	29 c2                	sub    %eax,%edx
c01090bc:	89 d0                	mov    %edx,%eax
c01090be:	c1 e0 02             	shl    $0x2,%eax
c01090c1:	01 d0                	add    %edx,%eax
c01090c3:	29 c1                	sub    %eax,%ecx
c01090c5:	89 ca                	mov    %ecx,%edx
c01090c7:	8b 04 95 c0 71 1c c0 	mov    -0x3fe38e40(,%edx,4),%eax
c01090ce:	83 f8 02             	cmp    $0x2,%eax
c01090d1:	74 56                	je     c0109129 <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c01090d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01090d6:	8d 48 01             	lea    0x1(%eax),%ecx
c01090d9:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01090de:	89 c8                	mov    %ecx,%eax
c01090e0:	f7 ea                	imul   %edx
c01090e2:	d1 fa                	sar    %edx
c01090e4:	89 c8                	mov    %ecx,%eax
c01090e6:	c1 f8 1f             	sar    $0x1f,%eax
c01090e9:	29 c2                	sub    %eax,%edx
c01090eb:	89 d0                	mov    %edx,%eax
c01090ed:	c1 e0 02             	shl    $0x2,%eax
c01090f0:	01 d0                	add    %edx,%eax
c01090f2:	29 c1                	sub    %eax,%ecx
c01090f4:	89 ca                	mov    %ecx,%edx
c01090f6:	8b 04 95 c0 71 1c c0 	mov    -0x3fe38e40(,%edx,4),%eax
c01090fd:	83 f8 02             	cmp    $0x2,%eax
c0109100:	74 27                	je     c0109129 <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c0109102:	8b 45 08             	mov    0x8(%ebp),%eax
c0109105:	c7 04 85 c0 71 1c c0 	movl   $0x2,-0x3fe38e40(,%eax,4)
c010910c:	02 00 00 00 
        up(&s[i]);
c0109110:	8b 55 08             	mov    0x8(%ebp),%edx
c0109113:	89 d0                	mov    %edx,%eax
c0109115:	01 c0                	add    %eax,%eax
c0109117:	01 d0                	add    %edx,%eax
c0109119:	c1 e0 02             	shl    $0x2,%eax
c010911c:	05 60 72 1c c0       	add    $0xc01c7260,%eax
c0109121:	89 04 24             	mov    %eax,(%esp)
c0109124:	e8 4f 0b 00 00       	call   c0109c78 <up>
    }
}
c0109129:	c9                   	leave  
c010912a:	c3                   	ret    

c010912b <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c010912b:	55                   	push   %ebp
c010912c:	89 e5                	mov    %esp,%ebp
c010912e:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0109131:	c7 04 24 e8 71 1c c0 	movl   $0xc01c71e8,(%esp)
c0109138:	e8 56 0b 00 00       	call   c0109c93 <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c010913d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109140:	c7 04 85 c0 71 1c c0 	movl   $0x1,-0x3fe38e40(,%eax,4)
c0109147:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c010914b:	8b 45 08             	mov    0x8(%ebp),%eax
c010914e:	89 04 24             	mov    %eax,(%esp)
c0109151:	e8 35 ff ff ff       	call   c010908b <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c0109156:	c7 04 24 e8 71 1c c0 	movl   $0xc01c71e8,(%esp)
c010915d:	e8 16 0b 00 00       	call   c0109c78 <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c0109162:	8b 55 08             	mov    0x8(%ebp),%edx
c0109165:	89 d0                	mov    %edx,%eax
c0109167:	01 c0                	add    %eax,%eax
c0109169:	01 d0                	add    %edx,%eax
c010916b:	c1 e0 02             	shl    $0x2,%eax
c010916e:	05 60 72 1c c0       	add    $0xc01c7260,%eax
c0109173:	89 04 24             	mov    %eax,(%esp)
c0109176:	e8 18 0b 00 00       	call   c0109c93 <down>
}
c010917b:	c9                   	leave  
c010917c:	c3                   	ret    

c010917d <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c010917d:	55                   	push   %ebp
c010917e:	89 e5                	mov    %esp,%ebp
c0109180:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0109183:	c7 04 24 e8 71 1c c0 	movl   $0xc01c71e8,(%esp)
c010918a:	e8 04 0b 00 00       	call   c0109c93 <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c010918f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109192:	c7 04 85 c0 71 1c c0 	movl   $0x0,-0x3fe38e40(,%eax,4)
c0109199:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c010919d:	8b 45 08             	mov    0x8(%ebp),%eax
c01091a0:	8d 48 04             	lea    0x4(%eax),%ecx
c01091a3:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01091a8:	89 c8                	mov    %ecx,%eax
c01091aa:	f7 ea                	imul   %edx
c01091ac:	d1 fa                	sar    %edx
c01091ae:	89 c8                	mov    %ecx,%eax
c01091b0:	c1 f8 1f             	sar    $0x1f,%eax
c01091b3:	29 c2                	sub    %eax,%edx
c01091b5:	89 d0                	mov    %edx,%eax
c01091b7:	c1 e0 02             	shl    $0x2,%eax
c01091ba:	01 d0                	add    %edx,%eax
c01091bc:	29 c1                	sub    %eax,%ecx
c01091be:	89 ca                	mov    %ecx,%edx
c01091c0:	89 14 24             	mov    %edx,(%esp)
c01091c3:	e8 c3 fe ff ff       	call   c010908b <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c01091c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01091cb:	8d 48 01             	lea    0x1(%eax),%ecx
c01091ce:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01091d3:	89 c8                	mov    %ecx,%eax
c01091d5:	f7 ea                	imul   %edx
c01091d7:	d1 fa                	sar    %edx
c01091d9:	89 c8                	mov    %ecx,%eax
c01091db:	c1 f8 1f             	sar    $0x1f,%eax
c01091de:	29 c2                	sub    %eax,%edx
c01091e0:	89 d0                	mov    %edx,%eax
c01091e2:	c1 e0 02             	shl    $0x2,%eax
c01091e5:	01 d0                	add    %edx,%eax
c01091e7:	29 c1                	sub    %eax,%ecx
c01091e9:	89 ca                	mov    %ecx,%edx
c01091eb:	89 14 24             	mov    %edx,(%esp)
c01091ee:	e8 98 fe ff ff       	call   c010908b <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c01091f3:	c7 04 24 e8 71 1c c0 	movl   $0xc01c71e8,(%esp)
c01091fa:	e8 79 0a 00 00       	call   c0109c78 <up>
}
c01091ff:	c9                   	leave  
c0109200:	c3                   	ret    

c0109201 <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c0109201:	55                   	push   %ebp
c0109202:	89 e5                	mov    %esp,%ebp
c0109204:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c0109207:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c010920e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109211:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c0109214:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109217:	89 44 24 04          	mov    %eax,0x4(%esp)
c010921b:	c7 04 24 28 f6 10 c0 	movl   $0xc010f628,(%esp)
c0109222:	e8 87 70 ff ff       	call   c01002ae <cprintf>
    while(iter++<TIMES)
c0109227:	eb 62                	jmp    c010928b <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c0109229:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010922c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109230:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109233:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109237:	c7 04 24 48 f6 10 c0 	movl   $0xc010f648,(%esp)
c010923e:	e8 6b 70 ff ff       	call   c01002ae <cprintf>
        do_sleep(SLEEP_TIME);
c0109243:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010924a:	e8 f0 2b 00 00       	call   c010be3f <do_sleep>
        phi_take_forks_sema(i); 
c010924f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109252:	89 04 24             	mov    %eax,(%esp)
c0109255:	e8 d1 fe ff ff       	call   c010912b <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c010925a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010925d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109261:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109264:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109268:	c7 04 24 78 f6 10 c0 	movl   $0xc010f678,(%esp)
c010926f:	e8 3a 70 ff ff       	call   c01002ae <cprintf>
        do_sleep(SLEEP_TIME);
c0109274:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010927b:	e8 bf 2b 00 00       	call   c010be3f <do_sleep>
        phi_put_forks_sema(i); 
c0109280:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109283:	89 04 24             	mov    %eax,(%esp)
c0109286:	e8 f2 fe ff ff       	call   c010917d <phi_put_forks_sema>
    while(iter++<TIMES)
c010928b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010928e:	8d 50 01             	lea    0x1(%eax),%edx
c0109291:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109294:	83 f8 03             	cmp    $0x3,%eax
c0109297:	7e 90                	jle    c0109229 <philosopher_using_semaphore+0x28>
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c0109299:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010929c:	89 44 24 04          	mov    %eax,0x4(%esp)
c01092a0:	c7 04 24 a3 f6 10 c0 	movl   $0xc010f6a3,(%esp)
c01092a7:	e8 02 70 ff ff       	call   c01002ae <cprintf>
    return 0;    
c01092ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01092b1:	c9                   	leave  
c01092b2:	c3                   	ret    

c01092b3 <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c01092b3:	55                   	push   %ebp
c01092b4:	89 e5                	mov    %esp,%ebp
c01092b6:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c01092b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01092bc:	8b 04 85 20 72 1c c0 	mov    -0x3fe38de0(,%eax,4),%eax
c01092c3:	83 f8 01             	cmp    $0x1,%eax
c01092c6:	0f 85 b5 00 00 00    	jne    c0109381 <phi_test_condvar+0xce>
c01092cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01092cf:	8d 48 04             	lea    0x4(%eax),%ecx
c01092d2:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01092d7:	89 c8                	mov    %ecx,%eax
c01092d9:	f7 ea                	imul   %edx
c01092db:	d1 fa                	sar    %edx
c01092dd:	89 c8                	mov    %ecx,%eax
c01092df:	c1 f8 1f             	sar    $0x1f,%eax
c01092e2:	29 c2                	sub    %eax,%edx
c01092e4:	89 d0                	mov    %edx,%eax
c01092e6:	c1 e0 02             	shl    $0x2,%eax
c01092e9:	01 d0                	add    %edx,%eax
c01092eb:	29 c1                	sub    %eax,%ecx
c01092ed:	89 ca                	mov    %ecx,%edx
c01092ef:	8b 04 95 20 72 1c c0 	mov    -0x3fe38de0(,%edx,4),%eax
c01092f6:	83 f8 02             	cmp    $0x2,%eax
c01092f9:	0f 84 82 00 00 00    	je     c0109381 <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c01092ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0109302:	8d 48 01             	lea    0x1(%eax),%ecx
c0109305:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010930a:	89 c8                	mov    %ecx,%eax
c010930c:	f7 ea                	imul   %edx
c010930e:	d1 fa                	sar    %edx
c0109310:	89 c8                	mov    %ecx,%eax
c0109312:	c1 f8 1f             	sar    $0x1f,%eax
c0109315:	29 c2                	sub    %eax,%edx
c0109317:	89 d0                	mov    %edx,%eax
c0109319:	c1 e0 02             	shl    $0x2,%eax
c010931c:	01 d0                	add    %edx,%eax
c010931e:	29 c1                	sub    %eax,%ecx
c0109320:	89 ca                	mov    %ecx,%edx
c0109322:	8b 04 95 20 72 1c c0 	mov    -0x3fe38de0(,%edx,4),%eax
c0109329:	83 f8 02             	cmp    $0x2,%eax
c010932c:	74 53                	je     c0109381 <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c010932e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109331:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109335:	c7 04 24 c0 f6 10 c0 	movl   $0xc010f6c0,(%esp)
c010933c:	e8 6d 6f ff ff       	call   c01002ae <cprintf>
        state_condvar[i] = EATING ;
c0109341:	8b 45 08             	mov    0x8(%ebp),%eax
c0109344:	c7 04 85 20 72 1c c0 	movl   $0x2,-0x3fe38de0(,%eax,4)
c010934b:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c010934f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109352:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109356:	c7 04 24 f4 f6 10 c0 	movl   $0xc010f6f4,(%esp)
c010935d:	e8 4c 6f ff ff       	call   c01002ae <cprintf>
        cond_signal(&mtp->cv[i]) ;
c0109362:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0109367:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010936a:	8b 55 08             	mov    0x8(%ebp),%edx
c010936d:	89 d0                	mov    %edx,%eax
c010936f:	c1 e0 02             	shl    $0x2,%eax
c0109372:	01 d0                	add    %edx,%eax
c0109374:	c1 e0 02             	shl    $0x2,%eax
c0109377:	01 c8                	add    %ecx,%eax
c0109379:	89 04 24             	mov    %eax,(%esp)
c010937c:	e8 c6 0a 00 00       	call   c0109e47 <cond_signal>
    }
}
c0109381:	c9                   	leave  
c0109382:	c3                   	ret    

c0109383 <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c0109383:	55                   	push   %ebp
c0109384:	89 e5                	mov    %esp,%ebp
c0109386:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c0109389:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c010938e:	89 04 24             	mov    %eax,(%esp)
c0109391:	e8 fd 08 00 00       	call   c0109c93 <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
     // try to get fork
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
c0109396:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c010939b:	8b 40 18             	mov    0x18(%eax),%eax
c010939e:	85 c0                	test   %eax,%eax
c01093a0:	7e 12                	jle    c01093b4 <phi_take_forks_condvar+0x31>
         up(&(mtp->next));
c01093a2:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c01093a7:	83 c0 0c             	add    $0xc,%eax
c01093aa:	89 04 24             	mov    %eax,(%esp)
c01093ad:	e8 c6 08 00 00       	call   c0109c78 <up>
c01093b2:	eb 0d                	jmp    c01093c1 <phi_take_forks_condvar+0x3e>
      else
         up(&(mtp->mutex));
c01093b4:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c01093b9:	89 04 24             	mov    %eax,(%esp)
c01093bc:	e8 b7 08 00 00       	call   c0109c78 <up>
}
c01093c1:	c9                   	leave  
c01093c2:	c3                   	ret    

c01093c3 <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c01093c3:	55                   	push   %ebp
c01093c4:	89 e5                	mov    %esp,%ebp
c01093c6:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c01093c9:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c01093ce:	89 04 24             	mov    %eax,(%esp)
c01093d1:	e8 bd 08 00 00       	call   c0109c93 <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I ate over
     // test left and right neighbors
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c01093d6:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c01093db:	8b 40 18             	mov    0x18(%eax),%eax
c01093de:	85 c0                	test   %eax,%eax
c01093e0:	7e 12                	jle    c01093f4 <phi_put_forks_condvar+0x31>
        up(&(mtp->next));
c01093e2:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c01093e7:	83 c0 0c             	add    $0xc,%eax
c01093ea:	89 04 24             	mov    %eax,(%esp)
c01093ed:	e8 86 08 00 00       	call   c0109c78 <up>
c01093f2:	eb 0d                	jmp    c0109401 <phi_put_forks_condvar+0x3e>
     else
        up(&(mtp->mutex));
c01093f4:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c01093f9:	89 04 24             	mov    %eax,(%esp)
c01093fc:	e8 77 08 00 00       	call   c0109c78 <up>
}
c0109401:	c9                   	leave  
c0109402:	c3                   	ret    

c0109403 <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c0109403:	55                   	push   %ebp
c0109404:	89 e5                	mov    %esp,%ebp
c0109406:	83 ec 28             	sub    $0x28,%esp
  
    int i, iter=0;
c0109409:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0109410:	8b 45 08             	mov    0x8(%ebp),%eax
c0109413:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c0109416:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109419:	89 44 24 04          	mov    %eax,0x4(%esp)
c010941d:	c7 04 24 1c f7 10 c0 	movl   $0xc010f71c,(%esp)
c0109424:	e8 85 6e ff ff       	call   c01002ae <cprintf>
    while(iter++<TIMES)
c0109429:	eb 62                	jmp    c010948d <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c010942b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010942e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109432:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109435:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109439:	c7 04 24 3c f7 10 c0 	movl   $0xc010f73c,(%esp)
c0109440:	e8 69 6e ff ff       	call   c01002ae <cprintf>
        do_sleep(SLEEP_TIME);
c0109445:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010944c:	e8 ee 29 00 00       	call   c010be3f <do_sleep>
        phi_take_forks_condvar(i); 
c0109451:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109454:	89 04 24             	mov    %eax,(%esp)
c0109457:	e8 27 ff ff ff       	call   c0109383 <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c010945c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010945f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109463:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109466:	89 44 24 04          	mov    %eax,0x4(%esp)
c010946a:	c7 04 24 6c f7 10 c0 	movl   $0xc010f76c,(%esp)
c0109471:	e8 38 6e ff ff       	call   c01002ae <cprintf>
        do_sleep(SLEEP_TIME);
c0109476:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010947d:	e8 bd 29 00 00       	call   c010be3f <do_sleep>
        phi_put_forks_condvar(i); 
c0109482:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109485:	89 04 24             	mov    %eax,(%esp)
c0109488:	e8 36 ff ff ff       	call   c01093c3 <phi_put_forks_condvar>
    while(iter++<TIMES)
c010948d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109490:	8d 50 01             	lea    0x1(%eax),%edx
c0109493:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109496:	83 f8 03             	cmp    $0x3,%eax
c0109499:	7e 90                	jle    c010942b <philosopher_using_condvar+0x28>
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c010949b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010949e:	89 44 24 04          	mov    %eax,0x4(%esp)
c01094a2:	c7 04 24 9c f7 10 c0 	movl   $0xc010f79c,(%esp)
c01094a9:	e8 00 6e ff ff       	call   c01002ae <cprintf>
    return 0;    
c01094ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01094b3:	c9                   	leave  
c01094b4:	c3                   	ret    

c01094b5 <check_sync>:

void check_sync(void){
c01094b5:	55                   	push   %ebp
c01094b6:	89 e5                	mov    %esp,%ebp
c01094b8:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c01094bb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01094c2:	00 
c01094c3:	c7 04 24 e8 71 1c c0 	movl   $0xc01c71e8,(%esp)
c01094ca:	e8 36 06 00 00       	call   c0109b05 <sem_init>
    for(i=0;i<N;i++){
c01094cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01094d6:	e9 94 00 00 00       	jmp    c010956f <check_sync+0xba>
        sem_init(&s[i], 0);
c01094db:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01094de:	89 d0                	mov    %edx,%eax
c01094e0:	01 c0                	add    %eax,%eax
c01094e2:	01 d0                	add    %edx,%eax
c01094e4:	c1 e0 02             	shl    $0x2,%eax
c01094e7:	05 60 72 1c c0       	add    $0xc01c7260,%eax
c01094ec:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01094f3:	00 
c01094f4:	89 04 24             	mov    %eax,(%esp)
c01094f7:	e8 09 06 00 00       	call   c0109b05 <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c01094fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094ff:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109506:	00 
c0109507:	89 44 24 04          	mov    %eax,0x4(%esp)
c010950b:	c7 04 24 01 92 10 c0 	movl   $0xc0109201,(%esp)
c0109512:	e8 91 14 00 00       	call   c010a9a8 <kernel_thread>
c0109517:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c010951a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010951e:	7f 1c                	jg     c010953c <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c0109520:	c7 44 24 08 bc f7 10 	movl   $0xc010f7bc,0x8(%esp)
c0109527:	c0 
c0109528:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c010952f:	00 
c0109530:	c7 04 24 ee f7 10 c0 	movl   $0xc010f7ee,(%esp)
c0109537:	e8 c9 6e ff ff       	call   c0100405 <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c010953c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010953f:	89 04 24             	mov    %eax,(%esp)
c0109542:	e8 ed 13 00 00       	call   c010a934 <find_proc>
c0109547:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010954a:	89 04 95 34 72 1c c0 	mov    %eax,-0x3fe38dcc(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c0109551:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109554:	8b 04 85 34 72 1c c0 	mov    -0x3fe38dcc(,%eax,4),%eax
c010955b:	c7 44 24 04 05 f8 10 	movl   $0xc010f805,0x4(%esp)
c0109562:	c0 
c0109563:	89 04 24             	mov    %eax,(%esp)
c0109566:	e8 b0 0f 00 00       	call   c010a51b <set_proc_name>
    for(i=0;i<N;i++){
c010956b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010956f:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c0109573:	0f 8e 62 ff ff ff    	jle    c01094db <check_sync+0x26>
    }

    //check condition variable
    monitor_init(&mt, N);
c0109579:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0109580:	00 
c0109581:	c7 04 24 00 72 1c c0 	movl   $0xc01c7200,(%esp)
c0109588:	e8 90 07 00 00       	call   c0109d1d <monitor_init>
    for(i=0;i<N;i++){
c010958d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109594:	e9 81 00 00 00       	jmp    c010961a <check_sync+0x165>
        state_condvar[i]=THINKING;
c0109599:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010959c:	c7 04 85 20 72 1c c0 	movl   $0x0,-0x3fe38de0(,%eax,4)
c01095a3:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c01095a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095aa:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01095b1:	00 
c01095b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01095b6:	c7 04 24 03 94 10 c0 	movl   $0xc0109403,(%esp)
c01095bd:	e8 e6 13 00 00       	call   c010a9a8 <kernel_thread>
c01095c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c01095c5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01095c9:	7f 1c                	jg     c01095e7 <check_sync+0x132>
            panic("create No.%d philosopher_using_condvar failed.\n");
c01095cb:	c7 44 24 08 1c f8 10 	movl   $0xc010f81c,0x8(%esp)
c01095d2:	c0 
c01095d3:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c01095da:	00 
c01095db:	c7 04 24 ee f7 10 c0 	movl   $0xc010f7ee,(%esp)
c01095e2:	e8 1e 6e ff ff       	call   c0100405 <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c01095e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01095ea:	89 04 24             	mov    %eax,(%esp)
c01095ed:	e8 42 13 00 00       	call   c010a934 <find_proc>
c01095f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01095f5:	89 04 95 d4 71 1c c0 	mov    %eax,-0x3fe38e2c(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c01095fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095ff:	8b 04 85 d4 71 1c c0 	mov    -0x3fe38e2c(,%eax,4),%eax
c0109606:	c7 44 24 04 4c f8 10 	movl   $0xc010f84c,0x4(%esp)
c010960d:	c0 
c010960e:	89 04 24             	mov    %eax,(%esp)
c0109611:	e8 05 0f 00 00       	call   c010a51b <set_proc_name>
    for(i=0;i<N;i++){
c0109616:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010961a:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c010961e:	0f 8e 75 ff ff ff    	jle    c0109599 <check_sync+0xe4>
    }
}
c0109624:	c9                   	leave  
c0109625:	c3                   	ret    

c0109626 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0109626:	55                   	push   %ebp
c0109627:	89 e5                	mov    %esp,%ebp
c0109629:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c010962c:	8b 45 08             	mov    0x8(%ebp),%eax
c010962f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109632:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0109634:	8b 45 08             	mov    0x8(%ebp),%eax
c0109637:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c010963e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109641:	83 c0 0c             	add    $0xc,%eax
c0109644:	89 45 fc             	mov    %eax,-0x4(%ebp)
    elm->prev = elm->next = elm;
c0109647:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010964a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010964d:	89 50 04             	mov    %edx,0x4(%eax)
c0109650:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109653:	8b 50 04             	mov    0x4(%eax),%edx
c0109656:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109659:	89 10                	mov    %edx,(%eax)
}
c010965b:	c9                   	leave  
c010965c:	c3                   	ret    

c010965d <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c010965d:	55                   	push   %ebp
c010965e:	89 e5                	mov    %esp,%ebp
c0109660:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0109663:	8b 45 08             	mov    0x8(%ebp),%eax
c0109666:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109669:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010966c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010966f:	89 50 04             	mov    %edx,0x4(%eax)
c0109672:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109675:	8b 50 04             	mov    0x4(%eax),%edx
c0109678:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010967b:	89 10                	mov    %edx,(%eax)
}
c010967d:	c9                   	leave  
c010967e:	c3                   	ret    

c010967f <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c010967f:	55                   	push   %ebp
c0109680:	89 e5                	mov    %esp,%ebp
c0109682:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0109685:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109688:	83 c0 0c             	add    $0xc,%eax
c010968b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return list->next == list;
c010968e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109691:	8b 40 04             	mov    0x4(%eax),%eax
c0109694:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109697:	0f 94 c0             	sete   %al
c010969a:	0f b6 c0             	movzbl %al,%eax
c010969d:	85 c0                	test   %eax,%eax
c010969f:	74 09                	je     c01096aa <wait_queue_add+0x2b>
c01096a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01096a4:	8b 00                	mov    (%eax),%eax
c01096a6:	85 c0                	test   %eax,%eax
c01096a8:	75 24                	jne    c01096ce <wait_queue_add+0x4f>
c01096aa:	c7 44 24 0c 68 f8 10 	movl   $0xc010f868,0xc(%esp)
c01096b1:	c0 
c01096b2:	c7 44 24 08 9d f8 10 	movl   $0xc010f89d,0x8(%esp)
c01096b9:	c0 
c01096ba:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c01096c1:	00 
c01096c2:	c7 04 24 b2 f8 10 c0 	movl   $0xc010f8b2,(%esp)
c01096c9:	e8 37 6d ff ff       	call   c0100405 <__panic>
    wait->wait_queue = queue;
c01096ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c01096d1:	8b 55 08             	mov    0x8(%ebp),%edx
c01096d4:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c01096d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01096da:	8d 50 0c             	lea    0xc(%eax),%edx
c01096dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01096e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01096e3:	89 55 ec             	mov    %edx,-0x14(%ebp)
    __list_add(elm, listelm->prev, listelm);
c01096e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096e9:	8b 00                	mov    (%eax),%eax
c01096eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01096ee:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01096f1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01096f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096f7:	89 45 e0             	mov    %eax,-0x20(%ebp)
    prev->next = next->prev = elm;
c01096fa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01096fd:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109700:	89 10                	mov    %edx,(%eax)
c0109702:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109705:	8b 10                	mov    (%eax),%edx
c0109707:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010970a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010970d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109710:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109713:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109716:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109719:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010971c:	89 10                	mov    %edx,(%eax)
}
c010971e:	c9                   	leave  
c010971f:	c3                   	ret    

c0109720 <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0109720:	55                   	push   %ebp
c0109721:	89 e5                	mov    %esp,%ebp
c0109723:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109726:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109729:	83 c0 0c             	add    $0xc,%eax
c010972c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return list->next == list;
c010972f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109732:	8b 40 04             	mov    0x4(%eax),%eax
c0109735:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109738:	0f 94 c0             	sete   %al
c010973b:	0f b6 c0             	movzbl %al,%eax
c010973e:	85 c0                	test   %eax,%eax
c0109740:	75 0b                	jne    c010974d <wait_queue_del+0x2d>
c0109742:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109745:	8b 40 08             	mov    0x8(%eax),%eax
c0109748:	3b 45 08             	cmp    0x8(%ebp),%eax
c010974b:	74 24                	je     c0109771 <wait_queue_del+0x51>
c010974d:	c7 44 24 0c c4 f8 10 	movl   $0xc010f8c4,0xc(%esp)
c0109754:	c0 
c0109755:	c7 44 24 08 9d f8 10 	movl   $0xc010f89d,0x8(%esp)
c010975c:	c0 
c010975d:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c0109764:	00 
c0109765:	c7 04 24 b2 f8 10 c0 	movl   $0xc010f8b2,(%esp)
c010976c:	e8 94 6c ff ff       	call   c0100405 <__panic>
    list_del_init(&(wait->wait_link));
c0109771:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109774:	83 c0 0c             	add    $0xc,%eax
c0109777:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010977a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010977d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    __list_del(listelm->prev, listelm->next);
c0109780:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109783:	8b 40 04             	mov    0x4(%eax),%eax
c0109786:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109789:	8b 12                	mov    (%edx),%edx
c010978b:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010978e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    prev->next = next;
c0109791:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109794:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109797:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010979a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010979d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01097a0:	89 10                	mov    %edx,(%eax)
c01097a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01097a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
    elm->prev = elm->next = elm;
c01097a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01097ab:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01097ae:	89 50 04             	mov    %edx,0x4(%eax)
c01097b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01097b4:	8b 50 04             	mov    0x4(%eax),%edx
c01097b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01097ba:	89 10                	mov    %edx,(%eax)
}
c01097bc:	c9                   	leave  
c01097bd:	c3                   	ret    

c01097be <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c01097be:	55                   	push   %ebp
c01097bf:	89 e5                	mov    %esp,%ebp
c01097c1:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c01097c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01097c7:	83 c0 0c             	add    $0xc,%eax
c01097ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return list->next == list;
c01097cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01097d0:	8b 40 04             	mov    0x4(%eax),%eax
c01097d3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01097d6:	0f 94 c0             	sete   %al
c01097d9:	0f b6 c0             	movzbl %al,%eax
c01097dc:	85 c0                	test   %eax,%eax
c01097de:	75 0b                	jne    c01097eb <wait_queue_next+0x2d>
c01097e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01097e3:	8b 40 08             	mov    0x8(%eax),%eax
c01097e6:	3b 45 08             	cmp    0x8(%ebp),%eax
c01097e9:	74 24                	je     c010980f <wait_queue_next+0x51>
c01097eb:	c7 44 24 0c c4 f8 10 	movl   $0xc010f8c4,0xc(%esp)
c01097f2:	c0 
c01097f3:	c7 44 24 08 9d f8 10 	movl   $0xc010f89d,0x8(%esp)
c01097fa:	c0 
c01097fb:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c0109802:	00 
c0109803:	c7 04 24 b2 f8 10 c0 	movl   $0xc010f8b2,(%esp)
c010980a:	e8 f6 6b ff ff       	call   c0100405 <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c010980f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109812:	83 c0 0c             	add    $0xc,%eax
c0109815:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return listelm->next;
c0109818:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010981b:	8b 40 04             	mov    0x4(%eax),%eax
c010981e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109821:	8b 45 08             	mov    0x8(%ebp),%eax
c0109824:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109827:	74 08                	je     c0109831 <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c0109829:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010982c:	83 e8 0c             	sub    $0xc,%eax
c010982f:	eb 05                	jmp    c0109836 <wait_queue_next+0x78>
    }
    return NULL;
c0109831:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109836:	c9                   	leave  
c0109837:	c3                   	ret    

c0109838 <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c0109838:	55                   	push   %ebp
c0109839:	89 e5                	mov    %esp,%ebp
c010983b:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c010983e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109841:	83 c0 0c             	add    $0xc,%eax
c0109844:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return list->next == list;
c0109847:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010984a:	8b 40 04             	mov    0x4(%eax),%eax
c010984d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109850:	0f 94 c0             	sete   %al
c0109853:	0f b6 c0             	movzbl %al,%eax
c0109856:	85 c0                	test   %eax,%eax
c0109858:	75 0b                	jne    c0109865 <wait_queue_prev+0x2d>
c010985a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010985d:	8b 40 08             	mov    0x8(%eax),%eax
c0109860:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109863:	74 24                	je     c0109889 <wait_queue_prev+0x51>
c0109865:	c7 44 24 0c c4 f8 10 	movl   $0xc010f8c4,0xc(%esp)
c010986c:	c0 
c010986d:	c7 44 24 08 9d f8 10 	movl   $0xc010f89d,0x8(%esp)
c0109874:	c0 
c0109875:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c010987c:	00 
c010987d:	c7 04 24 b2 f8 10 c0 	movl   $0xc010f8b2,(%esp)
c0109884:	e8 7c 6b ff ff       	call   c0100405 <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c0109889:	8b 45 0c             	mov    0xc(%ebp),%eax
c010988c:	83 c0 0c             	add    $0xc,%eax
c010988f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return listelm->prev;
c0109892:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109895:	8b 00                	mov    (%eax),%eax
c0109897:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c010989a:	8b 45 08             	mov    0x8(%ebp),%eax
c010989d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01098a0:	74 08                	je     c01098aa <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c01098a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098a5:	83 e8 0c             	sub    $0xc,%eax
c01098a8:	eb 05                	jmp    c01098af <wait_queue_prev+0x77>
    }
    return NULL;
c01098aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01098af:	c9                   	leave  
c01098b0:	c3                   	ret    

c01098b1 <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c01098b1:	55                   	push   %ebp
c01098b2:	89 e5                	mov    %esp,%ebp
c01098b4:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c01098b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01098ba:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return listelm->next;
c01098bd:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01098c0:	8b 40 04             	mov    0x4(%eax),%eax
c01098c3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c01098c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01098c9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01098cc:	74 08                	je     c01098d6 <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c01098ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01098d1:	83 e8 0c             	sub    $0xc,%eax
c01098d4:	eb 05                	jmp    c01098db <wait_queue_first+0x2a>
    }
    return NULL;
c01098d6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01098db:	c9                   	leave  
c01098dc:	c3                   	ret    

c01098dd <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c01098dd:	55                   	push   %ebp
c01098de:	89 e5                	mov    %esp,%ebp
c01098e0:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c01098e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01098e6:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return listelm->prev;
c01098e9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01098ec:	8b 00                	mov    (%eax),%eax
c01098ee:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c01098f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01098f4:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01098f7:	74 08                	je     c0109901 <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c01098f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01098fc:	83 e8 0c             	sub    $0xc,%eax
c01098ff:	eb 05                	jmp    c0109906 <wait_queue_last+0x29>
    }
    return NULL;
c0109901:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109906:	c9                   	leave  
c0109907:	c3                   	ret    

c0109908 <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c0109908:	55                   	push   %ebp
c0109909:	89 e5                	mov    %esp,%ebp
c010990b:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c010990e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109911:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list->next == list;
c0109914:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109917:	8b 40 04             	mov    0x4(%eax),%eax
c010991a:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010991d:	0f 94 c0             	sete   %al
c0109920:	0f b6 c0             	movzbl %al,%eax
}
c0109923:	c9                   	leave  
c0109924:	c3                   	ret    

c0109925 <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c0109925:	55                   	push   %ebp
c0109926:	89 e5                	mov    %esp,%ebp
c0109928:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c010992b:	8b 45 08             	mov    0x8(%ebp),%eax
c010992e:	83 c0 0c             	add    $0xc,%eax
c0109931:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109934:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109937:	8b 40 04             	mov    0x4(%eax),%eax
c010993a:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010993d:	0f 94 c0             	sete   %al
c0109940:	0f b6 c0             	movzbl %al,%eax
c0109943:	85 c0                	test   %eax,%eax
c0109945:	0f 94 c0             	sete   %al
c0109948:	0f b6 c0             	movzbl %al,%eax
}
c010994b:	c9                   	leave  
c010994c:	c3                   	ret    

c010994d <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c010994d:	55                   	push   %ebp
c010994e:	89 e5                	mov    %esp,%ebp
c0109950:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c0109953:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0109957:	74 12                	je     c010996b <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c0109959:	8b 45 0c             	mov    0xc(%ebp),%eax
c010995c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109960:	8b 45 08             	mov    0x8(%ebp),%eax
c0109963:	89 04 24             	mov    %eax,(%esp)
c0109966:	e8 b5 fd ff ff       	call   c0109720 <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c010996b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010996e:	8b 55 10             	mov    0x10(%ebp),%edx
c0109971:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c0109974:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109977:	8b 00                	mov    (%eax),%eax
c0109979:	89 04 24             	mov    %eax,(%esp)
c010997c:	e8 89 26 00 00       	call   c010c00a <wakeup_proc>
}
c0109981:	c9                   	leave  
c0109982:	c3                   	ret    

c0109983 <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109983:	55                   	push   %ebp
c0109984:	89 e5                	mov    %esp,%ebp
c0109986:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109989:	8b 45 08             	mov    0x8(%ebp),%eax
c010998c:	89 04 24             	mov    %eax,(%esp)
c010998f:	e8 1d ff ff ff       	call   c01098b1 <wait_queue_first>
c0109994:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109997:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010999b:	74 20                	je     c01099bd <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c010999d:	8b 45 10             	mov    0x10(%ebp),%eax
c01099a0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01099a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01099a7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01099ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099ae:	89 44 24 04          	mov    %eax,0x4(%esp)
c01099b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01099b5:	89 04 24             	mov    %eax,(%esp)
c01099b8:	e8 90 ff ff ff       	call   c010994d <wakeup_wait>
    }
}
c01099bd:	c9                   	leave  
c01099be:	c3                   	ret    

c01099bf <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c01099bf:	55                   	push   %ebp
c01099c0:	89 e5                	mov    %esp,%ebp
c01099c2:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c01099c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01099c8:	89 04 24             	mov    %eax,(%esp)
c01099cb:	e8 e1 fe ff ff       	call   c01098b1 <wait_queue_first>
c01099d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01099d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01099d7:	74 79                	je     c0109a52 <wakeup_queue+0x93>
        if (del) {
c01099d9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01099dd:	74 37                	je     c0109a16 <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c01099df:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01099e6:	00 
c01099e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01099ea:	89 44 24 08          	mov    %eax,0x8(%esp)
c01099ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099f1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01099f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01099f8:	89 04 24             	mov    %eax,(%esp)
c01099fb:	e8 4d ff ff ff       	call   c010994d <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c0109a00:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a03:	89 04 24             	mov    %eax,(%esp)
c0109a06:	e8 a6 fe ff ff       	call   c01098b1 <wait_queue_first>
c0109a0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109a0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109a12:	75 cb                	jne    c01099df <wakeup_queue+0x20>
c0109a14:	eb 3c                	jmp    c0109a52 <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c0109a16:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0109a1d:	00 
c0109a1e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a21:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109a25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a28:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a2f:	89 04 24             	mov    %eax,(%esp)
c0109a32:	e8 16 ff ff ff       	call   c010994d <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c0109a37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a3a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a41:	89 04 24             	mov    %eax,(%esp)
c0109a44:	e8 75 fd ff ff       	call   c01097be <wait_queue_next>
c0109a49:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109a4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109a50:	75 c4                	jne    c0109a16 <wakeup_queue+0x57>
        }
    }
}
c0109a52:	c9                   	leave  
c0109a53:	c3                   	ret    

c0109a54 <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c0109a54:	55                   	push   %ebp
c0109a55:	89 e5                	mov    %esp,%ebp
c0109a57:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c0109a5a:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0109a5f:	85 c0                	test   %eax,%eax
c0109a61:	75 24                	jne    c0109a87 <wait_current_set+0x33>
c0109a63:	c7 44 24 0c 01 f9 10 	movl   $0xc010f901,0xc(%esp)
c0109a6a:	c0 
c0109a6b:	c7 44 24 08 9d f8 10 	movl   $0xc010f89d,0x8(%esp)
c0109a72:	c0 
c0109a73:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0109a7a:	00 
c0109a7b:	c7 04 24 b2 f8 10 c0 	movl   $0xc010f8b2,(%esp)
c0109a82:	e8 7e 69 ff ff       	call   c0100405 <__panic>
    wait_init(wait, current);
c0109a87:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0109a8c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a90:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a93:	89 04 24             	mov    %eax,(%esp)
c0109a96:	e8 8b fb ff ff       	call   c0109626 <wait_init>
    current->state = PROC_SLEEPING;
c0109a9b:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0109aa0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c0109aa6:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0109aab:	8b 55 10             	mov    0x10(%ebp),%edx
c0109aae:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c0109ab4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ab7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109abb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109abe:	89 04 24             	mov    %eax,(%esp)
c0109ac1:	e8 b9 fb ff ff       	call   c010967f <wait_queue_add>
}
c0109ac6:	c9                   	leave  
c0109ac7:	c3                   	ret    

c0109ac8 <__intr_save>:
__intr_save(void) {
c0109ac8:	55                   	push   %ebp
c0109ac9:	89 e5                	mov    %esp,%ebp
c0109acb:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109ace:	9c                   	pushf  
c0109acf:	58                   	pop    %eax
c0109ad0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0109ad3:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109ad6:	25 00 02 00 00       	and    $0x200,%eax
c0109adb:	85 c0                	test   %eax,%eax
c0109add:	74 0c                	je     c0109aeb <__intr_save+0x23>
        intr_disable();
c0109adf:	e8 36 87 ff ff       	call   c010221a <intr_disable>
        return 1;
c0109ae4:	b8 01 00 00 00       	mov    $0x1,%eax
c0109ae9:	eb 05                	jmp    c0109af0 <__intr_save+0x28>
    return 0;
c0109aeb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109af0:	c9                   	leave  
c0109af1:	c3                   	ret    

c0109af2 <__intr_restore>:
__intr_restore(bool flag) {
c0109af2:	55                   	push   %ebp
c0109af3:	89 e5                	mov    %esp,%ebp
c0109af5:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109af8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109afc:	74 05                	je     c0109b03 <__intr_restore+0x11>
        intr_enable();
c0109afe:	e8 11 87 ff ff       	call   c0102214 <intr_enable>
}
c0109b03:	c9                   	leave  
c0109b04:	c3                   	ret    

c0109b05 <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109b05:	55                   	push   %ebp
c0109b06:	89 e5                	mov    %esp,%ebp
c0109b08:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c0109b0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b0e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109b11:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109b13:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b16:	83 c0 04             	add    $0x4,%eax
c0109b19:	89 04 24             	mov    %eax,(%esp)
c0109b1c:	e8 3c fb ff ff       	call   c010965d <wait_queue_init>
}
c0109b21:	c9                   	leave  
c0109b22:	c3                   	ret    

c0109b23 <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109b23:	55                   	push   %ebp
c0109b24:	89 e5                	mov    %esp,%ebp
c0109b26:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109b29:	e8 9a ff ff ff       	call   c0109ac8 <__intr_save>
c0109b2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109b31:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b34:	83 c0 04             	add    $0x4,%eax
c0109b37:	89 04 24             	mov    %eax,(%esp)
c0109b3a:	e8 72 fd ff ff       	call   c01098b1 <wait_queue_first>
c0109b3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109b42:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109b46:	75 0f                	jne    c0109b57 <__up+0x34>
            sem->value ++;
c0109b48:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b4b:	8b 00                	mov    (%eax),%eax
c0109b4d:	8d 50 01             	lea    0x1(%eax),%edx
c0109b50:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b53:	89 10                	mov    %edx,(%eax)
c0109b55:	eb 58                	jmp    c0109baf <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c0109b57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b5a:	8b 00                	mov    (%eax),%eax
c0109b5c:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0109b62:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109b65:	74 24                	je     c0109b8b <__up+0x68>
c0109b67:	c7 44 24 0c 14 f9 10 	movl   $0xc010f914,0xc(%esp)
c0109b6e:	c0 
c0109b6f:	c7 44 24 08 39 f9 10 	movl   $0xc010f939,0x8(%esp)
c0109b76:	c0 
c0109b77:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0109b7e:	00 
c0109b7f:	c7 04 24 4e f9 10 c0 	movl   $0xc010f94e,(%esp)
c0109b86:	e8 7a 68 ff ff       	call   c0100405 <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c0109b8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b8e:	8d 50 04             	lea    0x4(%eax),%edx
c0109b91:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109b98:	00 
c0109b99:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b9c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109ba0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ba3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ba7:	89 14 24             	mov    %edx,(%esp)
c0109baa:	e8 9e fd ff ff       	call   c010994d <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c0109baf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bb2:	89 04 24             	mov    %eax,(%esp)
c0109bb5:	e8 38 ff ff ff       	call   c0109af2 <__intr_restore>
}
c0109bba:	c9                   	leave  
c0109bbb:	c3                   	ret    

c0109bbc <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0109bbc:	55                   	push   %ebp
c0109bbd:	89 e5                	mov    %esp,%ebp
c0109bbf:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109bc2:	e8 01 ff ff ff       	call   c0109ac8 <__intr_save>
c0109bc7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0109bca:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bcd:	8b 00                	mov    (%eax),%eax
c0109bcf:	85 c0                	test   %eax,%eax
c0109bd1:	7e 22                	jle    c0109bf5 <__down+0x39>
        sem->value --;
c0109bd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bd6:	8b 00                	mov    (%eax),%eax
c0109bd8:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109bdb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bde:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0109be0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109be3:	89 04 24             	mov    %eax,(%esp)
c0109be6:	e8 07 ff ff ff       	call   c0109af2 <__intr_restore>
        return 0;
c0109beb:	b8 00 00 00 00       	mov    $0x0,%eax
c0109bf0:	e9 81 00 00 00       	jmp    c0109c76 <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c0109bf5:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109bf8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0109bfb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bfe:	8d 50 04             	lea    0x4(%eax),%edx
c0109c01:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c04:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109c08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c0b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c0f:	89 14 24             	mov    %edx,(%esp)
c0109c12:	e8 3d fe ff ff       	call   c0109a54 <wait_current_set>
    local_intr_restore(intr_flag);
c0109c17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c1a:	89 04 24             	mov    %eax,(%esp)
c0109c1d:	e8 d0 fe ff ff       	call   c0109af2 <__intr_restore>

    schedule();
c0109c22:	e8 7f 24 00 00       	call   c010c0a6 <schedule>

    local_intr_save(intr_flag);
c0109c27:	e8 9c fe ff ff       	call   c0109ac8 <__intr_save>
c0109c2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0109c2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c32:	89 04 24             	mov    %eax,(%esp)
c0109c35:	e8 eb fc ff ff       	call   c0109925 <wait_in_queue>
c0109c3a:	85 c0                	test   %eax,%eax
c0109c3c:	74 15                	je     c0109c53 <__down+0x97>
c0109c3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c41:	8d 50 04             	lea    0x4(%eax),%edx
c0109c44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c47:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c4b:	89 14 24             	mov    %edx,(%esp)
c0109c4e:	e8 cd fa ff ff       	call   c0109720 <wait_queue_del>
    local_intr_restore(intr_flag);
c0109c53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c56:	89 04 24             	mov    %eax,(%esp)
c0109c59:	e8 94 fe ff ff       	call   c0109af2 <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c0109c5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c61:	8b 40 04             	mov    0x4(%eax),%eax
c0109c64:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109c67:	74 08                	je     c0109c71 <__down+0xb5>
        return wait->wakeup_flags;
c0109c69:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c6c:	8b 40 04             	mov    0x4(%eax),%eax
c0109c6f:	eb 05                	jmp    c0109c76 <__down+0xba>
    }
    return 0;
c0109c71:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109c76:	c9                   	leave  
c0109c77:	c3                   	ret    

c0109c78 <up>:

void
up(semaphore_t *sem) {
c0109c78:	55                   	push   %ebp
c0109c79:	89 e5                	mov    %esp,%ebp
c0109c7b:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c0109c7e:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109c85:	00 
c0109c86:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c89:	89 04 24             	mov    %eax,(%esp)
c0109c8c:	e8 92 fe ff ff       	call   c0109b23 <__up>
}
c0109c91:	c9                   	leave  
c0109c92:	c3                   	ret    

c0109c93 <down>:

void
down(semaphore_t *sem) {
c0109c93:	55                   	push   %ebp
c0109c94:	89 e5                	mov    %esp,%ebp
c0109c96:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c0109c99:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109ca0:	00 
c0109ca1:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ca4:	89 04 24             	mov    %eax,(%esp)
c0109ca7:	e8 10 ff ff ff       	call   c0109bbc <__down>
c0109cac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0109caf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109cb3:	74 24                	je     c0109cd9 <down+0x46>
c0109cb5:	c7 44 24 0c 5e f9 10 	movl   $0xc010f95e,0xc(%esp)
c0109cbc:	c0 
c0109cbd:	c7 44 24 08 39 f9 10 	movl   $0xc010f939,0x8(%esp)
c0109cc4:	c0 
c0109cc5:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c0109ccc:	00 
c0109ccd:	c7 04 24 4e f9 10 c0 	movl   $0xc010f94e,(%esp)
c0109cd4:	e8 2c 67 ff ff       	call   c0100405 <__panic>
}
c0109cd9:	c9                   	leave  
c0109cda:	c3                   	ret    

c0109cdb <try_down>:

bool
try_down(semaphore_t *sem) {
c0109cdb:	55                   	push   %ebp
c0109cdc:	89 e5                	mov    %esp,%ebp
c0109cde:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c0109ce1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0109ce8:	e8 db fd ff ff       	call   c0109ac8 <__intr_save>
c0109ced:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c0109cf0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cf3:	8b 00                	mov    (%eax),%eax
c0109cf5:	85 c0                	test   %eax,%eax
c0109cf7:	7e 14                	jle    c0109d0d <try_down+0x32>
        sem->value --, ret = 1;
c0109cf9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cfc:	8b 00                	mov    (%eax),%eax
c0109cfe:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109d01:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d04:	89 10                	mov    %edx,(%eax)
c0109d06:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109d0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d10:	89 04 24             	mov    %eax,(%esp)
c0109d13:	e8 da fd ff ff       	call   c0109af2 <__intr_restore>
    return ret;
c0109d18:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109d1b:	c9                   	leave  
c0109d1c:	c3                   	ret    

c0109d1d <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c0109d1d:	55                   	push   %ebp
c0109d1e:	89 e5                	mov    %esp,%ebp
c0109d20:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c0109d23:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0109d27:	75 24                	jne    c0109d4d <monitor_init+0x30>
c0109d29:	c7 44 24 0c 6c f9 10 	movl   $0xc010f96c,0xc(%esp)
c0109d30:	c0 
c0109d31:	c7 44 24 08 75 f9 10 	movl   $0xc010f975,0x8(%esp)
c0109d38:	c0 
c0109d39:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c0109d40:	00 
c0109d41:	c7 04 24 8a f9 10 c0 	movl   $0xc010f98a,(%esp)
c0109d48:	e8 b8 66 ff ff       	call   c0100405 <__panic>
    mtp->next_count = 0;
c0109d4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d50:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c0109d57:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d5a:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c0109d61:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d64:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109d6b:	00 
c0109d6c:	89 04 24             	mov    %eax,(%esp)
c0109d6f:	e8 91 fd ff ff       	call   c0109b05 <sem_init>
    sem_init(&(mtp->next), 0);
c0109d74:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d77:	83 c0 0c             	add    $0xc,%eax
c0109d7a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109d81:	00 
c0109d82:	89 04 24             	mov    %eax,(%esp)
c0109d85:	e8 7b fd ff ff       	call   c0109b05 <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c0109d8a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109d8d:	89 d0                	mov    %edx,%eax
c0109d8f:	c1 e0 02             	shl    $0x2,%eax
c0109d92:	01 d0                	add    %edx,%eax
c0109d94:	c1 e0 02             	shl    $0x2,%eax
c0109d97:	89 04 24             	mov    %eax,(%esp)
c0109d9a:	e8 2b b5 ff ff       	call   c01052ca <kmalloc>
c0109d9f:	8b 55 08             	mov    0x8(%ebp),%edx
c0109da2:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c0109da5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109da8:	8b 40 1c             	mov    0x1c(%eax),%eax
c0109dab:	85 c0                	test   %eax,%eax
c0109dad:	75 24                	jne    c0109dd3 <monitor_init+0xb6>
c0109daf:	c7 44 24 0c 9e f9 10 	movl   $0xc010f99e,0xc(%esp)
c0109db6:	c0 
c0109db7:	c7 44 24 08 75 f9 10 	movl   $0xc010f975,0x8(%esp)
c0109dbe:	c0 
c0109dbf:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c0109dc6:	00 
c0109dc7:	c7 04 24 8a f9 10 c0 	movl   $0xc010f98a,(%esp)
c0109dce:	e8 32 66 ff ff       	call   c0100405 <__panic>
    for(i=0; i<num_cv; i++){
c0109dd3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109dda:	eb 61                	jmp    c0109e3d <monitor_init+0x120>
        mtp->cv[i].count=0;
c0109ddc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ddf:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109de2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109de5:	89 d0                	mov    %edx,%eax
c0109de7:	c1 e0 02             	shl    $0x2,%eax
c0109dea:	01 d0                	add    %edx,%eax
c0109dec:	c1 e0 02             	shl    $0x2,%eax
c0109def:	01 c8                	add    %ecx,%eax
c0109df1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c0109df8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dfb:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109dfe:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109e01:	89 d0                	mov    %edx,%eax
c0109e03:	c1 e0 02             	shl    $0x2,%eax
c0109e06:	01 d0                	add    %edx,%eax
c0109e08:	c1 e0 02             	shl    $0x2,%eax
c0109e0b:	01 c8                	add    %ecx,%eax
c0109e0d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109e14:	00 
c0109e15:	89 04 24             	mov    %eax,(%esp)
c0109e18:	e8 e8 fc ff ff       	call   c0109b05 <sem_init>
        mtp->cv[i].owner=mtp;
c0109e1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e20:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109e23:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109e26:	89 d0                	mov    %edx,%eax
c0109e28:	c1 e0 02             	shl    $0x2,%eax
c0109e2b:	01 d0                	add    %edx,%eax
c0109e2d:	c1 e0 02             	shl    $0x2,%eax
c0109e30:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0109e33:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e36:	89 42 10             	mov    %eax,0x10(%edx)
    for(i=0; i<num_cv; i++){
c0109e39:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109e3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e40:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109e43:	72 97                	jb     c0109ddc <monitor_init+0xbf>
    }
}
c0109e45:	c9                   	leave  
c0109e46:	c3                   	ret    

c0109e47 <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c0109e47:	55                   	push   %ebp
c0109e48:	89 e5                	mov    %esp,%ebp
c0109e4a:	83 ec 18             	sub    $0x18,%esp
   //LAB7 EXERCISE1: YOUR CODE
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c0109e4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e50:	8b 40 10             	mov    0x10(%eax),%eax
c0109e53:	8b 50 18             	mov    0x18(%eax),%edx
c0109e56:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e59:	8b 40 0c             	mov    0xc(%eax),%eax
c0109e5c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109e60:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109e64:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e67:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e6b:	c7 04 24 ac f9 10 c0 	movl   $0xc010f9ac,(%esp)
c0109e72:	e8 37 64 ff ff       	call   c01002ae <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
   if(cvp->count>0) { //当前存在执行cond_wait而睡眠的进程 
c0109e77:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e7a:	8b 40 0c             	mov    0xc(%eax),%eax
c0109e7d:	85 c0                	test   %eax,%eax
c0109e7f:	7e 3a                	jle    c0109ebb <cond_signal+0x74>
        cvp->owner->next_count ++; //睡眠的进程总个数加一  
c0109e81:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e84:	8b 40 10             	mov    0x10(%eax),%eax
c0109e87:	8b 50 18             	mov    0x18(%eax),%edx
c0109e8a:	83 c2 01             	add    $0x1,%edx
c0109e8d:	89 50 18             	mov    %edx,0x18(%eax)
        up(&(cvp->sem)); //唤醒等待在cv.sem上睡眠的进程 
c0109e90:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e93:	89 04 24             	mov    %eax,(%esp)
c0109e96:	e8 dd fd ff ff       	call   c0109c78 <up>
        down(&(cvp->owner->next)); //自己需要睡眠
c0109e9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e9e:	8b 40 10             	mov    0x10(%eax),%eax
c0109ea1:	83 c0 0c             	add    $0xc,%eax
c0109ea4:	89 04 24             	mov    %eax,(%esp)
c0109ea7:	e8 e7 fd ff ff       	call   c0109c93 <down>
        cvp->owner->next_count --; //睡醒后等待此条件的睡眠进程个数减一
c0109eac:	8b 45 08             	mov    0x8(%ebp),%eax
c0109eaf:	8b 40 10             	mov    0x10(%eax),%eax
c0109eb2:	8b 50 18             	mov    0x18(%eax),%edx
c0109eb5:	83 ea 01             	sub    $0x1,%edx
c0109eb8:	89 50 18             	mov    %edx,0x18(%eax)
    }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109ebb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ebe:	8b 40 10             	mov    0x10(%eax),%eax
c0109ec1:	8b 50 18             	mov    0x18(%eax),%edx
c0109ec4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ec7:	8b 40 0c             	mov    0xc(%eax),%eax
c0109eca:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109ece:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109ed2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ed5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ed9:	c7 04 24 f4 f9 10 c0 	movl   $0xc010f9f4,(%esp)
c0109ee0:	e8 c9 63 ff ff       	call   c01002ae <cprintf>
}
c0109ee5:	c9                   	leave  
c0109ee6:	c3                   	ret    

c0109ee7 <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c0109ee7:	55                   	push   %ebp
c0109ee8:	89 e5                	mov    %esp,%ebp
c0109eea:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: YOUR CODE
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109eed:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ef0:	8b 40 10             	mov    0x10(%eax),%eax
c0109ef3:	8b 50 18             	mov    0x18(%eax),%edx
c0109ef6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ef9:	8b 40 0c             	mov    0xc(%eax),%eax
c0109efc:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109f00:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109f04:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f07:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109f0b:	c7 04 24 38 fa 10 c0 	movl   $0xc010fa38,(%esp)
c0109f12:	e8 97 63 ff ff       	call   c01002ae <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
    cvp->count++; //需要睡眠的进程个数加一
c0109f17:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f1a:	8b 40 0c             	mov    0xc(%eax),%eax
c0109f1d:	8d 50 01             	lea    0x1(%eax),%edx
c0109f20:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f23:	89 50 0c             	mov    %edx,0xc(%eax)
      if(cvp->owner->next_count > 0) 
c0109f26:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f29:	8b 40 10             	mov    0x10(%eax),%eax
c0109f2c:	8b 40 18             	mov    0x18(%eax),%eax
c0109f2f:	85 c0                	test   %eax,%eax
c0109f31:	7e 13                	jle    c0109f46 <cond_wait+0x5f>
         up(&(cvp->owner->next)); //唤醒进程链表中的下一个进程
c0109f33:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f36:	8b 40 10             	mov    0x10(%eax),%eax
c0109f39:	83 c0 0c             	add    $0xc,%eax
c0109f3c:	89 04 24             	mov    %eax,(%esp)
c0109f3f:	e8 34 fd ff ff       	call   c0109c78 <up>
c0109f44:	eb 0e                	jmp    c0109f54 <cond_wait+0x6d>
      else
         up(&(cvp->owner->mutex)); //唤醒睡在monitor.mutex上的进程 
c0109f46:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f49:	8b 40 10             	mov    0x10(%eax),%eax
c0109f4c:	89 04 24             	mov    %eax,(%esp)
c0109f4f:	e8 24 fd ff ff       	call   c0109c78 <up>
      down(&(cvp->sem));  //将此进程等待  
c0109f54:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f57:	89 04 24             	mov    %eax,(%esp)
c0109f5a:	e8 34 fd ff ff       	call   c0109c93 <down>
      cvp->count --;  //睡醒后等待此条件的睡眠进程个数减一
c0109f5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f62:	8b 40 0c             	mov    0xc(%eax),%eax
c0109f65:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109f68:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f6b:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109f6e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f71:	8b 40 10             	mov    0x10(%eax),%eax
c0109f74:	8b 50 18             	mov    0x18(%eax),%edx
c0109f77:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f7a:	8b 40 0c             	mov    0xc(%eax),%eax
c0109f7d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109f81:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109f85:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f88:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109f8c:	c7 04 24 7c fa 10 c0 	movl   $0xc010fa7c,(%esp)
c0109f93:	e8 16 63 ff ff       	call   c01002ae <cprintf>
}
c0109f98:	c9                   	leave  
c0109f99:	c3                   	ret    

c0109f9a <page2ppn>:
page2ppn(struct Page *page) {
c0109f9a:	55                   	push   %ebp
c0109f9b:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0109f9d:	8b 55 08             	mov    0x8(%ebp),%edx
c0109fa0:	a1 b8 71 1c c0       	mov    0xc01c71b8,%eax
c0109fa5:	29 c2                	sub    %eax,%edx
c0109fa7:	89 d0                	mov    %edx,%eax
c0109fa9:	c1 f8 05             	sar    $0x5,%eax
}
c0109fac:	5d                   	pop    %ebp
c0109fad:	c3                   	ret    

c0109fae <page2pa>:
page2pa(struct Page *page) {
c0109fae:	55                   	push   %ebp
c0109faf:	89 e5                	mov    %esp,%ebp
c0109fb1:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0109fb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fb7:	89 04 24             	mov    %eax,(%esp)
c0109fba:	e8 db ff ff ff       	call   c0109f9a <page2ppn>
c0109fbf:	c1 e0 0c             	shl    $0xc,%eax
}
c0109fc2:	c9                   	leave  
c0109fc3:	c3                   	ret    

c0109fc4 <page2kva>:
page2kva(struct Page *page) {
c0109fc4:	55                   	push   %ebp
c0109fc5:	89 e5                	mov    %esp,%ebp
c0109fc7:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0109fca:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fcd:	89 04 24             	mov    %eax,(%esp)
c0109fd0:	e8 d9 ff ff ff       	call   c0109fae <page2pa>
c0109fd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109fd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fdb:	c1 e8 0c             	shr    $0xc,%eax
c0109fde:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109fe1:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0109fe6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109fe9:	72 23                	jb     c010a00e <page2kva+0x4a>
c0109feb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fee:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109ff2:	c7 44 24 08 c0 fa 10 	movl   $0xc010fac0,0x8(%esp)
c0109ff9:	c0 
c0109ffa:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010a001:	00 
c010a002:	c7 04 24 e3 fa 10 c0 	movl   $0xc010fae3,(%esp)
c010a009:	e8 f7 63 ff ff       	call   c0100405 <__panic>
c010a00e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a011:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a016:	c9                   	leave  
c010a017:	c3                   	ret    

c010a018 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010a018:	55                   	push   %ebp
c010a019:	89 e5                	mov    %esp,%ebp
c010a01b:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010a01e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a025:	e8 06 72 ff ff       	call   c0101230 <ide_device_valid>
c010a02a:	85 c0                	test   %eax,%eax
c010a02c:	75 1c                	jne    c010a04a <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010a02e:	c7 44 24 08 f1 fa 10 	movl   $0xc010faf1,0x8(%esp)
c010a035:	c0 
c010a036:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010a03d:	00 
c010a03e:	c7 04 24 0b fb 10 c0 	movl   $0xc010fb0b,(%esp)
c010a045:	e8 bb 63 ff ff       	call   c0100405 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010a04a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a051:	e8 19 72 ff ff       	call   c010126f <ide_device_size>
c010a056:	c1 e8 03             	shr    $0x3,%eax
c010a059:	a3 7c 71 1c c0       	mov    %eax,0xc01c717c
}
c010a05e:	c9                   	leave  
c010a05f:	c3                   	ret    

c010a060 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010a060:	55                   	push   %ebp
c010a061:	89 e5                	mov    %esp,%ebp
c010a063:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a066:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a069:	89 04 24             	mov    %eax,(%esp)
c010a06c:	e8 53 ff ff ff       	call   c0109fc4 <page2kva>
c010a071:	8b 55 08             	mov    0x8(%ebp),%edx
c010a074:	c1 ea 08             	shr    $0x8,%edx
c010a077:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a07a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a07e:	74 0b                	je     c010a08b <swapfs_read+0x2b>
c010a080:	8b 15 7c 71 1c c0    	mov    0xc01c717c,%edx
c010a086:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a089:	72 23                	jb     c010a0ae <swapfs_read+0x4e>
c010a08b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a08e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a092:	c7 44 24 08 1c fb 10 	movl   $0xc010fb1c,0x8(%esp)
c010a099:	c0 
c010a09a:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010a0a1:	00 
c010a0a2:	c7 04 24 0b fb 10 c0 	movl   $0xc010fb0b,(%esp)
c010a0a9:	e8 57 63 ff ff       	call   c0100405 <__panic>
c010a0ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a0b1:	c1 e2 03             	shl    $0x3,%edx
c010a0b4:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a0bb:	00 
c010a0bc:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a0c0:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a0c4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a0cb:	e8 de 71 ff ff       	call   c01012ae <ide_read_secs>
}
c010a0d0:	c9                   	leave  
c010a0d1:	c3                   	ret    

c010a0d2 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010a0d2:	55                   	push   %ebp
c010a0d3:	89 e5                	mov    %esp,%ebp
c010a0d5:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a0d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0db:	89 04 24             	mov    %eax,(%esp)
c010a0de:	e8 e1 fe ff ff       	call   c0109fc4 <page2kva>
c010a0e3:	8b 55 08             	mov    0x8(%ebp),%edx
c010a0e6:	c1 ea 08             	shr    $0x8,%edx
c010a0e9:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a0ec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a0f0:	74 0b                	je     c010a0fd <swapfs_write+0x2b>
c010a0f2:	8b 15 7c 71 1c c0    	mov    0xc01c717c,%edx
c010a0f8:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a0fb:	72 23                	jb     c010a120 <swapfs_write+0x4e>
c010a0fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a100:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a104:	c7 44 24 08 1c fb 10 	movl   $0xc010fb1c,0x8(%esp)
c010a10b:	c0 
c010a10c:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010a113:	00 
c010a114:	c7 04 24 0b fb 10 c0 	movl   $0xc010fb0b,(%esp)
c010a11b:	e8 e5 62 ff ff       	call   c0100405 <__panic>
c010a120:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a123:	c1 e2 03             	shl    $0x3,%edx
c010a126:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a12d:	00 
c010a12e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a132:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a136:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a13d:	e8 ae 73 ff ff       	call   c01014f0 <ide_write_secs>
}
c010a142:	c9                   	leave  
c010a143:	c3                   	ret    

c010a144 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010a144:	52                   	push   %edx
    call *%ebx              # call fn
c010a145:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010a147:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010a148:	e8 14 0d 00 00       	call   c010ae61 <do_exit>

c010a14d <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010a14d:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010a151:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010a153:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010a156:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010a159:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010a15c:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010a15f:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010a162:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010a165:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010a168:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010a16c:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010a16f:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010a172:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010a175:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010a178:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010a17b:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010a17e:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010a181:	ff 30                	pushl  (%eax)

    ret
c010a183:	c3                   	ret    

c010a184 <timer_init>:
#define le2timer(le, member)            \
to_struct((le), timer_t, member)

// init a timer
static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010a184:	55                   	push   %ebp
c010a185:	89 e5                	mov    %esp,%ebp
c010a187:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010a18a:	8b 55 10             	mov    0x10(%ebp),%edx
c010a18d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a190:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010a192:	8b 45 08             	mov    0x8(%ebp),%eax
c010a195:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a198:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010a19b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a19e:	83 c0 08             	add    $0x8,%eax
c010a1a1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    elm->prev = elm->next = elm;
c010a1a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a1a7:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a1aa:	89 50 04             	mov    %edx,0x4(%eax)
c010a1ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a1b0:	8b 50 04             	mov    0x4(%eax),%edx
c010a1b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a1b6:	89 10                	mov    %edx,(%eax)
    return timer;
c010a1b8:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010a1bb:	c9                   	leave  
c010a1bc:	c3                   	ret    

c010a1bd <__intr_save>:
__intr_save(void) {
c010a1bd:	55                   	push   %ebp
c010a1be:	89 e5                	mov    %esp,%ebp
c010a1c0:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010a1c3:	9c                   	pushf  
c010a1c4:	58                   	pop    %eax
c010a1c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010a1c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010a1cb:	25 00 02 00 00       	and    $0x200,%eax
c010a1d0:	85 c0                	test   %eax,%eax
c010a1d2:	74 0c                	je     c010a1e0 <__intr_save+0x23>
        intr_disable();
c010a1d4:	e8 41 80 ff ff       	call   c010221a <intr_disable>
        return 1;
c010a1d9:	b8 01 00 00 00       	mov    $0x1,%eax
c010a1de:	eb 05                	jmp    c010a1e5 <__intr_save+0x28>
    return 0;
c010a1e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a1e5:	c9                   	leave  
c010a1e6:	c3                   	ret    

c010a1e7 <__intr_restore>:
__intr_restore(bool flag) {
c010a1e7:	55                   	push   %ebp
c010a1e8:	89 e5                	mov    %esp,%ebp
c010a1ea:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010a1ed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a1f1:	74 05                	je     c010a1f8 <__intr_restore+0x11>
        intr_enable();
c010a1f3:	e8 1c 80 ff ff       	call   c0102214 <intr_enable>
}
c010a1f8:	c9                   	leave  
c010a1f9:	c3                   	ret    

c010a1fa <page2ppn>:
page2ppn(struct Page *page) {
c010a1fa:	55                   	push   %ebp
c010a1fb:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a1fd:	8b 55 08             	mov    0x8(%ebp),%edx
c010a200:	a1 b8 71 1c c0       	mov    0xc01c71b8,%eax
c010a205:	29 c2                	sub    %eax,%edx
c010a207:	89 d0                	mov    %edx,%eax
c010a209:	c1 f8 05             	sar    $0x5,%eax
}
c010a20c:	5d                   	pop    %ebp
c010a20d:	c3                   	ret    

c010a20e <page2pa>:
page2pa(struct Page *page) {
c010a20e:	55                   	push   %ebp
c010a20f:	89 e5                	mov    %esp,%ebp
c010a211:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a214:	8b 45 08             	mov    0x8(%ebp),%eax
c010a217:	89 04 24             	mov    %eax,(%esp)
c010a21a:	e8 db ff ff ff       	call   c010a1fa <page2ppn>
c010a21f:	c1 e0 0c             	shl    $0xc,%eax
}
c010a222:	c9                   	leave  
c010a223:	c3                   	ret    

c010a224 <pa2page>:
pa2page(uintptr_t pa) {
c010a224:	55                   	push   %ebp
c010a225:	89 e5                	mov    %esp,%ebp
c010a227:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010a22a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a22d:	c1 e8 0c             	shr    $0xc,%eax
c010a230:	89 c2                	mov    %eax,%edx
c010a232:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c010a237:	39 c2                	cmp    %eax,%edx
c010a239:	72 1c                	jb     c010a257 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010a23b:	c7 44 24 08 3c fb 10 	movl   $0xc010fb3c,0x8(%esp)
c010a242:	c0 
c010a243:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010a24a:	00 
c010a24b:	c7 04 24 5b fb 10 c0 	movl   $0xc010fb5b,(%esp)
c010a252:	e8 ae 61 ff ff       	call   c0100405 <__panic>
    return &pages[PPN(pa)];
c010a257:	a1 b8 71 1c c0       	mov    0xc01c71b8,%eax
c010a25c:	8b 55 08             	mov    0x8(%ebp),%edx
c010a25f:	c1 ea 0c             	shr    $0xc,%edx
c010a262:	c1 e2 05             	shl    $0x5,%edx
c010a265:	01 d0                	add    %edx,%eax
}
c010a267:	c9                   	leave  
c010a268:	c3                   	ret    

c010a269 <page2kva>:
page2kva(struct Page *page) {
c010a269:	55                   	push   %ebp
c010a26a:	89 e5                	mov    %esp,%ebp
c010a26c:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a26f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a272:	89 04 24             	mov    %eax,(%esp)
c010a275:	e8 94 ff ff ff       	call   c010a20e <page2pa>
c010a27a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a27d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a280:	c1 e8 0c             	shr    $0xc,%eax
c010a283:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a286:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c010a28b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a28e:	72 23                	jb     c010a2b3 <page2kva+0x4a>
c010a290:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a293:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a297:	c7 44 24 08 6c fb 10 	movl   $0xc010fb6c,0x8(%esp)
c010a29e:	c0 
c010a29f:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010a2a6:	00 
c010a2a7:	c7 04 24 5b fb 10 c0 	movl   $0xc010fb5b,(%esp)
c010a2ae:	e8 52 61 ff ff       	call   c0100405 <__panic>
c010a2b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2b6:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a2bb:	c9                   	leave  
c010a2bc:	c3                   	ret    

c010a2bd <kva2page>:
kva2page(void *kva) {
c010a2bd:	55                   	push   %ebp
c010a2be:	89 e5                	mov    %esp,%ebp
c010a2c0:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010a2c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a2c9:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010a2d0:	77 23                	ja     c010a2f5 <kva2page+0x38>
c010a2d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2d5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a2d9:	c7 44 24 08 90 fb 10 	movl   $0xc010fb90,0x8(%esp)
c010a2e0:	c0 
c010a2e1:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010a2e8:	00 
c010a2e9:	c7 04 24 5b fb 10 c0 	movl   $0xc010fb5b,(%esp)
c010a2f0:	e8 10 61 ff ff       	call   c0100405 <__panic>
c010a2f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2f8:	05 00 00 00 40       	add    $0x40000000,%eax
c010a2fd:	89 04 24             	mov    %eax,(%esp)
c010a300:	e8 1f ff ff ff       	call   c010a224 <pa2page>
}
c010a305:	c9                   	leave  
c010a306:	c3                   	ret    

c010a307 <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c010a307:	55                   	push   %ebp
c010a308:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010a30a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a30d:	8b 40 18             	mov    0x18(%eax),%eax
c010a310:	8d 50 01             	lea    0x1(%eax),%edx
c010a313:	8b 45 08             	mov    0x8(%ebp),%eax
c010a316:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a319:	8b 45 08             	mov    0x8(%ebp),%eax
c010a31c:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a31f:	5d                   	pop    %ebp
c010a320:	c3                   	ret    

c010a321 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010a321:	55                   	push   %ebp
c010a322:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010a324:	8b 45 08             	mov    0x8(%ebp),%eax
c010a327:	8b 40 18             	mov    0x18(%eax),%eax
c010a32a:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a32d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a330:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a333:	8b 45 08             	mov    0x8(%ebp),%eax
c010a336:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a339:	5d                   	pop    %ebp
c010a33a:	c3                   	ret    

c010a33b <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010a33b:	55                   	push   %ebp
c010a33c:	89 e5                	mov    %esp,%ebp
c010a33e:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a341:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a345:	74 25                	je     c010a36c <lock_mm+0x31>
        down(&(mm->mm_sem));
c010a347:	8b 45 08             	mov    0x8(%ebp),%eax
c010a34a:	83 c0 1c             	add    $0x1c,%eax
c010a34d:	89 04 24             	mov    %eax,(%esp)
c010a350:	e8 3e f9 ff ff       	call   c0109c93 <down>
        if (current != NULL) {
c010a355:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a35a:	85 c0                	test   %eax,%eax
c010a35c:	74 0e                	je     c010a36c <lock_mm+0x31>
            mm->locked_by = current->pid;
c010a35e:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a363:	8b 50 04             	mov    0x4(%eax),%edx
c010a366:	8b 45 08             	mov    0x8(%ebp),%eax
c010a369:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010a36c:	c9                   	leave  
c010a36d:	c3                   	ret    

c010a36e <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010a36e:	55                   	push   %ebp
c010a36f:	89 e5                	mov    %esp,%ebp
c010a371:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a374:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a378:	74 18                	je     c010a392 <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010a37a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a37d:	83 c0 1c             	add    $0x1c,%eax
c010a380:	89 04 24             	mov    %eax,(%esp)
c010a383:	e8 f0 f8 ff ff       	call   c0109c78 <up>
        mm->locked_by = 0;
c010a388:	8b 45 08             	mov    0x8(%ebp),%eax
c010a38b:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010a392:	c9                   	leave  
c010a393:	c3                   	ret    

c010a394 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010a394:	55                   	push   %ebp
c010a395:	89 e5                	mov    %esp,%ebp
c010a397:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010a39a:	c7 04 24 c4 00 00 00 	movl   $0xc4,(%esp)
c010a3a1:	e8 24 af ff ff       	call   c01052ca <kmalloc>
c010a3a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010a3a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a3ad:	0f 84 63 01 00 00    	je     c010a516 <alloc_proc+0x182>
     *     int time_slice;                             // time slice for occupying the CPU
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
        proc->state = PROC_UNINIT;//设置进程为未初始化状态
c010a3b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3b6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1; //未初始化的的进程id为-1
c010a3bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3bf:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;//初始化时间片
c010a3c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3c9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0; //内存栈的地址
c010a3d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3d3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;//不需要调度
c010a3da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3dd:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;  //父节点null
c010a3e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3e7:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;      //内核线程常驻内存
c010a3ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3f1:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context));//上下文初始化0
c010a3f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3fb:	83 c0 1c             	add    $0x1c,%eax
c010a3fe:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010a405:	00 
c010a406:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a40d:	00 
c010a40e:	89 04 24             	mov    %eax,(%esp)
c010a411:	e8 3d 29 00 00       	call   c010cd53 <memset>
        proc->tf = NULL; //中断帧指针null
c010a416:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a419:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;//页目录设为内核页目录表的基址
c010a420:	8b 15 b4 71 1c c0    	mov    0xc01c71b4,%edx
c010a426:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a429:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;//标志位0
c010a42c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a42f:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN);//进程名设为0
c010a436:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a439:	83 c0 48             	add    $0x48,%eax
c010a43c:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a443:	00 
c010a444:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a44b:	00 
c010a44c:	89 04 24             	mov    %eax,(%esp)
c010a44f:	e8 ff 28 00 00       	call   c010cd53 <memset>
        proc->wait_state = 0;//初始化进程等待状态
c010a454:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a457:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010a45e:	00 00 00 
        proc->cptr = proc->optr = proc->yptr = NULL;//进程相关指针初始化:孩子/旧兄弟/新兄弟
c010a461:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a464:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010a46b:	00 00 00 
c010a46e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a471:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010a477:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a47a:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010a480:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a483:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
c010a489:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a48c:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
        proc->rq = NULL; //初始化运行队列为空
c010a492:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a495:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c010a49c:	00 00 00 
        list_init(&(proc->run_link)); 
c010a49f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4a2:	05 a4 00 00 00       	add    $0xa4,%eax
c010a4a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a4aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4ad:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a4b0:	89 50 04             	mov    %edx,0x4(%eax)
c010a4b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4b6:	8b 50 04             	mov    0x4(%eax),%edx
c010a4b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4bc:	89 10                	mov    %edx,(%eax)
        proc->time_slice = 0; //初始化时间片
c010a4be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4c1:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c010a4c8:	00 00 00 
        //初始化指针为空
        proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
c010a4cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4ce:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
c010a4d5:	00 00 00 
c010a4d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4db:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
c010a4e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4e4:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
c010a4ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4ed:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
c010a4f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4f6:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
        proc->lab6_stride = 0;    //设置步长为0
c010a4fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4ff:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
c010a506:	00 00 00 
        proc->lab6_priority = 0;  //设置优先级为0
c010a509:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a50c:	c7 80 c0 00 00 00 00 	movl   $0x0,0xc0(%eax)
c010a513:	00 00 00 
    }
    return proc;
c010a516:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a519:	c9                   	leave  
c010a51a:	c3                   	ret    

c010a51b <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010a51b:	55                   	push   %ebp
c010a51c:	89 e5                	mov    %esp,%ebp
c010a51e:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010a521:	8b 45 08             	mov    0x8(%ebp),%eax
c010a524:	83 c0 48             	add    $0x48,%eax
c010a527:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010a52e:	00 
c010a52f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a536:	00 
c010a537:	89 04 24             	mov    %eax,(%esp)
c010a53a:	e8 14 28 00 00       	call   c010cd53 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010a53f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a542:	8d 50 48             	lea    0x48(%eax),%edx
c010a545:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a54c:	00 
c010a54d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a550:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a554:	89 14 24             	mov    %edx,(%esp)
c010a557:	e8 d9 28 00 00       	call   c010ce35 <memcpy>
}
c010a55c:	c9                   	leave  
c010a55d:	c3                   	ret    

c010a55e <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010a55e:	55                   	push   %ebp
c010a55f:	89 e5                	mov    %esp,%ebp
c010a561:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010a564:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010a56b:	00 
c010a56c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a573:	00 
c010a574:	c7 04 24 60 70 1c c0 	movl   $0xc01c7060,(%esp)
c010a57b:	e8 d3 27 00 00       	call   c010cd53 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010a580:	8b 45 08             	mov    0x8(%ebp),%eax
c010a583:	83 c0 48             	add    $0x48,%eax
c010a586:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a58d:	00 
c010a58e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a592:	c7 04 24 60 70 1c c0 	movl   $0xc01c7060,(%esp)
c010a599:	e8 97 28 00 00       	call   c010ce35 <memcpy>
}
c010a59e:	c9                   	leave  
c010a59f:	c3                   	ret    

c010a5a0 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010a5a0:	55                   	push   %ebp
c010a5a1:	89 e5                	mov    %esp,%ebp
c010a5a3:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010a5a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5a9:	83 c0 7c             	add    $0x7c,%eax
c010a5ac:	c7 45 fc 9c 72 1c c0 	movl   $0xc01c729c,-0x4(%ebp)
c010a5b3:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010a5b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a5b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a5bc:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a5bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    __list_add(elm, listelm, listelm->next);
c010a5c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5c5:	8b 40 04             	mov    0x4(%eax),%eax
c010a5c8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a5cb:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010a5ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a5d1:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010a5d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    prev->next = next->prev = elm;
c010a5d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a5da:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a5dd:	89 10                	mov    %edx,(%eax)
c010a5df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a5e2:	8b 10                	mov    (%eax),%edx
c010a5e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a5e7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a5ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a5ed:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a5f0:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a5f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a5f6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a5f9:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010a5fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5fe:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010a605:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010a608:	8b 45 08             	mov    0x8(%ebp),%eax
c010a60b:	8b 40 14             	mov    0x14(%eax),%eax
c010a60e:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010a614:	8b 45 08             	mov    0x8(%ebp),%eax
c010a617:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010a61d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a620:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a626:	85 c0                	test   %eax,%eax
c010a628:	74 12                	je     c010a63c <set_links+0x9c>
        proc->optr->yptr = proc;
c010a62a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a62d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a633:	8b 55 08             	mov    0x8(%ebp),%edx
c010a636:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010a63c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a63f:	8b 40 14             	mov    0x14(%eax),%eax
c010a642:	8b 55 08             	mov    0x8(%ebp),%edx
c010a645:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010a64b:	a1 40 70 1c c0       	mov    0xc01c7040,%eax
c010a650:	83 c0 01             	add    $0x1,%eax
c010a653:	a3 40 70 1c c0       	mov    %eax,0xc01c7040
}
c010a658:	c9                   	leave  
c010a659:	c3                   	ret    

c010a65a <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010a65a:	55                   	push   %ebp
c010a65b:	89 e5                	mov    %esp,%ebp
c010a65d:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010a660:	8b 45 08             	mov    0x8(%ebp),%eax
c010a663:	83 c0 7c             	add    $0x7c,%eax
c010a666:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __list_del(listelm->prev, listelm->next);
c010a669:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a66c:	8b 40 04             	mov    0x4(%eax),%eax
c010a66f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a672:	8b 12                	mov    (%edx),%edx
c010a674:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010a677:	89 45 f4             	mov    %eax,-0xc(%ebp)
    prev->next = next;
c010a67a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a67d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a680:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a683:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a686:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010a689:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010a68b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a68e:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a694:	85 c0                	test   %eax,%eax
c010a696:	74 18                	je     c010a6b0 <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010a698:	8b 45 08             	mov    0x8(%ebp),%eax
c010a69b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a6a1:	8b 55 08             	mov    0x8(%ebp),%edx
c010a6a4:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010a6aa:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010a6b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6b3:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010a6b9:	85 c0                	test   %eax,%eax
c010a6bb:	74 1a                	je     c010a6d7 <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010a6bd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6c0:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010a6c6:	8b 55 08             	mov    0x8(%ebp),%edx
c010a6c9:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010a6cf:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010a6d5:	eb 15                	jmp    c010a6ec <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010a6d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6da:	8b 40 14             	mov    0x14(%eax),%eax
c010a6dd:	8b 55 08             	mov    0x8(%ebp),%edx
c010a6e0:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010a6e6:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010a6ec:	a1 40 70 1c c0       	mov    0xc01c7040,%eax
c010a6f1:	83 e8 01             	sub    $0x1,%eax
c010a6f4:	a3 40 70 1c c0       	mov    %eax,0xc01c7040
}
c010a6f9:	c9                   	leave  
c010a6fa:	c3                   	ret    

c010a6fb <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010a6fb:	55                   	push   %ebp
c010a6fc:	89 e5                	mov    %esp,%ebp
c010a6fe:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010a701:	c7 45 f8 9c 72 1c c0 	movl   $0xc01c729c,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010a708:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
c010a70d:	83 c0 01             	add    $0x1,%eax
c010a710:	a3 7c 1a 13 c0       	mov    %eax,0xc0131a7c
c010a715:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
c010a71a:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010a71f:	7e 0c                	jle    c010a72d <get_pid+0x32>
        last_pid = 1;
c010a721:	c7 05 7c 1a 13 c0 01 	movl   $0x1,0xc0131a7c
c010a728:	00 00 00 
        goto inside;
c010a72b:	eb 13                	jmp    c010a740 <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010a72d:	8b 15 7c 1a 13 c0    	mov    0xc0131a7c,%edx
c010a733:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c010a738:	39 c2                	cmp    %eax,%edx
c010a73a:	0f 8c ac 00 00 00    	jl     c010a7ec <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010a740:	c7 05 80 1a 13 c0 00 	movl   $0x2000,0xc0131a80
c010a747:	20 00 00 
    repeat:
        le = list;
c010a74a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a74d:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010a750:	eb 7f                	jmp    c010a7d1 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010a752:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a755:	83 e8 7c             	sub    $0x7c,%eax
c010a758:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010a75b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a75e:	8b 50 04             	mov    0x4(%eax),%edx
c010a761:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
c010a766:	39 c2                	cmp    %eax,%edx
c010a768:	75 3e                	jne    c010a7a8 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010a76a:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
c010a76f:	83 c0 01             	add    $0x1,%eax
c010a772:	a3 7c 1a 13 c0       	mov    %eax,0xc0131a7c
c010a777:	8b 15 7c 1a 13 c0    	mov    0xc0131a7c,%edx
c010a77d:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c010a782:	39 c2                	cmp    %eax,%edx
c010a784:	7c 4b                	jl     c010a7d1 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010a786:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
c010a78b:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010a790:	7e 0a                	jle    c010a79c <get_pid+0xa1>
                        last_pid = 1;
c010a792:	c7 05 7c 1a 13 c0 01 	movl   $0x1,0xc0131a7c
c010a799:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010a79c:	c7 05 80 1a 13 c0 00 	movl   $0x2000,0xc0131a80
c010a7a3:	20 00 00 
                    goto repeat;
c010a7a6:	eb a2                	jmp    c010a74a <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010a7a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7ab:	8b 50 04             	mov    0x4(%eax),%edx
c010a7ae:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
c010a7b3:	39 c2                	cmp    %eax,%edx
c010a7b5:	7e 1a                	jle    c010a7d1 <get_pid+0xd6>
c010a7b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7ba:	8b 50 04             	mov    0x4(%eax),%edx
c010a7bd:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c010a7c2:	39 c2                	cmp    %eax,%edx
c010a7c4:	7d 0b                	jge    c010a7d1 <get_pid+0xd6>
                next_safe = proc->pid;
c010a7c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7c9:	8b 40 04             	mov    0x4(%eax),%eax
c010a7cc:	a3 80 1a 13 c0       	mov    %eax,0xc0131a80
c010a7d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a7d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return listelm->next;
c010a7d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a7da:	8b 40 04             	mov    0x4(%eax),%eax
        while ((le = list_next(le)) != list) {
c010a7dd:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a7e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a7e3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010a7e6:	0f 85 66 ff ff ff    	jne    c010a752 <get_pid+0x57>
            }
        }
    }
    return last_pid;
c010a7ec:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
}
c010a7f1:	c9                   	leave  
c010a7f2:	c3                   	ret    

c010a7f3 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010a7f3:	55                   	push   %ebp
c010a7f4:	89 e5                	mov    %esp,%ebp
c010a7f6:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010a7f9:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a7fe:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a801:	74 63                	je     c010a866 <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010a803:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a808:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a80b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a80e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010a811:	e8 a7 f9 ff ff       	call   c010a1bd <__intr_save>
c010a816:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010a819:	8b 45 08             	mov    0x8(%ebp),%eax
c010a81c:	a3 28 50 1c c0       	mov    %eax,0xc01c5028
            load_esp0(next->kstack + KSTACKSIZE);
c010a821:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a824:	8b 40 0c             	mov    0xc(%eax),%eax
c010a827:	05 00 20 00 00       	add    $0x2000,%eax
c010a82c:	89 04 24             	mov    %eax,(%esp)
c010a82f:	e8 2d cb ff ff       	call   c0107361 <load_esp0>
            lcr3(next->cr3);
c010a834:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a837:	8b 40 40             	mov    0x40(%eax),%eax
c010a83a:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010a83d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a840:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010a843:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a846:	8d 50 1c             	lea    0x1c(%eax),%edx
c010a849:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a84c:	83 c0 1c             	add    $0x1c,%eax
c010a84f:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a853:	89 04 24             	mov    %eax,(%esp)
c010a856:	e8 f2 f8 ff ff       	call   c010a14d <switch_to>
        }
        local_intr_restore(intr_flag);
c010a85b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a85e:	89 04 24             	mov    %eax,(%esp)
c010a861:	e8 81 f9 ff ff       	call   c010a1e7 <__intr_restore>
    }
}
c010a866:	c9                   	leave  
c010a867:	c3                   	ret    

c010a868 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010a868:	55                   	push   %ebp
c010a869:	89 e5                	mov    %esp,%ebp
c010a86b:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010a86e:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a873:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a876:	89 04 24             	mov    %eax,(%esp)
c010a879:	e8 a7 8c ff ff       	call   c0103525 <forkrets>
}
c010a87e:	c9                   	leave  
c010a87f:	c3                   	ret    

c010a880 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010a880:	55                   	push   %ebp
c010a881:	89 e5                	mov    %esp,%ebp
c010a883:	53                   	push   %ebx
c010a884:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010a887:	8b 45 08             	mov    0x8(%ebp),%eax
c010a88a:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010a890:	8b 45 08             	mov    0x8(%ebp),%eax
c010a893:	8b 40 04             	mov    0x4(%eax),%eax
c010a896:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010a89d:	00 
c010a89e:	89 04 24             	mov    %eax,(%esp)
c010a8a1:	e8 b7 2c 00 00       	call   c010d55d <hash32>
c010a8a6:	c1 e0 03             	shl    $0x3,%eax
c010a8a9:	05 40 50 1c c0       	add    $0xc01c5040,%eax
c010a8ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a8b1:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010a8b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a8ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    __list_add(elm, listelm, listelm->next);
c010a8c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a8c3:	8b 40 04             	mov    0x4(%eax),%eax
c010a8c6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a8c9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010a8cc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a8cf:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010a8d2:	89 45 dc             	mov    %eax,-0x24(%ebp)
    prev->next = next->prev = elm;
c010a8d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a8d8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a8db:	89 10                	mov    %edx,(%eax)
c010a8dd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a8e0:	8b 10                	mov    (%eax),%edx
c010a8e2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a8e5:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a8e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a8eb:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a8ee:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a8f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a8f4:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a8f7:	89 10                	mov    %edx,(%eax)
}
c010a8f9:	83 c4 34             	add    $0x34,%esp
c010a8fc:	5b                   	pop    %ebx
c010a8fd:	5d                   	pop    %ebp
c010a8fe:	c3                   	ret    

c010a8ff <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010a8ff:	55                   	push   %ebp
c010a900:	89 e5                	mov    %esp,%ebp
c010a902:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010a905:	8b 45 08             	mov    0x8(%ebp),%eax
c010a908:	05 84 00 00 00       	add    $0x84,%eax
c010a90d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __list_del(listelm->prev, listelm->next);
c010a910:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a913:	8b 40 04             	mov    0x4(%eax),%eax
c010a916:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a919:	8b 12                	mov    (%edx),%edx
c010a91b:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010a91e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    prev->next = next;
c010a921:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a924:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a927:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a92a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a92d:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010a930:	89 10                	mov    %edx,(%eax)
}
c010a932:	c9                   	leave  
c010a933:	c3                   	ret    

c010a934 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010a934:	55                   	push   %ebp
c010a935:	89 e5                	mov    %esp,%ebp
c010a937:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010a93a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a93e:	7e 61                	jle    c010a9a1 <find_proc+0x6d>
c010a940:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010a947:	7f 58                	jg     c010a9a1 <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010a949:	8b 45 08             	mov    0x8(%ebp),%eax
c010a94c:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010a953:	00 
c010a954:	89 04 24             	mov    %eax,(%esp)
c010a957:	e8 01 2c 00 00       	call   c010d55d <hash32>
c010a95c:	c1 e0 03             	shl    $0x3,%eax
c010a95f:	05 40 50 1c c0       	add    $0xc01c5040,%eax
c010a964:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a967:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a96a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010a96d:	eb 1b                	jmp    c010a98a <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010a96f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a972:	2d 84 00 00 00       	sub    $0x84,%eax
c010a977:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010a97a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a97d:	8b 40 04             	mov    0x4(%eax),%eax
c010a980:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a983:	75 05                	jne    c010a98a <find_proc+0x56>
                return proc;
c010a985:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a988:	eb 1c                	jmp    c010a9a6 <find_proc+0x72>
c010a98a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a98d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return listelm->next;
c010a990:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a993:	8b 40 04             	mov    0x4(%eax),%eax
        while ((le = list_next(le)) != list) {
c010a996:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a999:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a99c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010a99f:	75 ce                	jne    c010a96f <find_proc+0x3b>
            }
        }
    }
    return NULL;
c010a9a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a9a6:	c9                   	leave  
c010a9a7:	c3                   	ret    

c010a9a8 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010a9a8:	55                   	push   %ebp
c010a9a9:	89 e5                	mov    %esp,%ebp
c010a9ab:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010a9ae:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010a9b5:	00 
c010a9b6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a9bd:	00 
c010a9be:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010a9c1:	89 04 24             	mov    %eax,(%esp)
c010a9c4:	e8 8a 23 00 00       	call   c010cd53 <memset>
    tf.tf_cs = KERNEL_CS;
c010a9c9:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010a9cf:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010a9d5:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010a9d9:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010a9dd:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010a9e1:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010a9e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9e8:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010a9eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a9ee:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010a9f1:	b8 44 a1 10 c0       	mov    $0xc010a144,%eax
c010a9f6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010a9f9:	8b 45 10             	mov    0x10(%ebp),%eax
c010a9fc:	80 cc 01             	or     $0x1,%ah
c010a9ff:	89 c2                	mov    %eax,%edx
c010aa01:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010aa04:	89 44 24 08          	mov    %eax,0x8(%esp)
c010aa08:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010aa0f:	00 
c010aa10:	89 14 24             	mov    %edx,(%esp)
c010aa13:	e8 25 03 00 00       	call   c010ad3d <do_fork>
}
c010aa18:	c9                   	leave  
c010aa19:	c3                   	ret    

c010aa1a <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010aa1a:	55                   	push   %ebp
c010aa1b:	89 e5                	mov    %esp,%ebp
c010aa1d:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010aa20:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010aa27:	e8 83 ca ff ff       	call   c01074af <alloc_pages>
c010aa2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010aa2f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aa33:	74 1a                	je     c010aa4f <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010aa35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa38:	89 04 24             	mov    %eax,(%esp)
c010aa3b:	e8 29 f8 ff ff       	call   c010a269 <page2kva>
c010aa40:	89 c2                	mov    %eax,%edx
c010aa42:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa45:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010aa48:	b8 00 00 00 00       	mov    $0x0,%eax
c010aa4d:	eb 05                	jmp    c010aa54 <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010aa4f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010aa54:	c9                   	leave  
c010aa55:	c3                   	ret    

c010aa56 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010aa56:	55                   	push   %ebp
c010aa57:	89 e5                	mov    %esp,%ebp
c010aa59:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010aa5c:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa5f:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa62:	89 04 24             	mov    %eax,(%esp)
c010aa65:	e8 53 f8 ff ff       	call   c010a2bd <kva2page>
c010aa6a:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010aa71:	00 
c010aa72:	89 04 24             	mov    %eax,(%esp)
c010aa75:	e8 a0 ca ff ff       	call   c010751a <free_pages>
}
c010aa7a:	c9                   	leave  
c010aa7b:	c3                   	ret    

c010aa7c <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010aa7c:	55                   	push   %ebp
c010aa7d:	89 e5                	mov    %esp,%ebp
c010aa7f:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010aa82:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010aa89:	e8 21 ca ff ff       	call   c01074af <alloc_pages>
c010aa8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aa91:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aa95:	75 0a                	jne    c010aaa1 <setup_pgdir+0x25>
        return -E_NO_MEM;
c010aa97:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010aa9c:	e9 80 00 00 00       	jmp    c010ab21 <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010aaa1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aaa4:	89 04 24             	mov    %eax,(%esp)
c010aaa7:	e8 bd f7 ff ff       	call   c010a269 <page2kva>
c010aaac:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010aaaf:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c010aab4:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010aabb:	00 
c010aabc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aac0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aac3:	89 04 24             	mov    %eax,(%esp)
c010aac6:	e8 6a 23 00 00       	call   c010ce35 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010aacb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aace:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010aad4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aad7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010aada:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010aae1:	77 23                	ja     c010ab06 <setup_pgdir+0x8a>
c010aae3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aae6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010aaea:	c7 44 24 08 90 fb 10 	movl   $0xc010fb90,0x8(%esp)
c010aaf1:	c0 
c010aaf2:	c7 44 24 04 3f 01 00 	movl   $0x13f,0x4(%esp)
c010aaf9:	00 
c010aafa:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010ab01:	e8 ff 58 ff ff       	call   c0100405 <__panic>
c010ab06:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab09:	05 00 00 00 40       	add    $0x40000000,%eax
c010ab0e:	83 c8 03             	or     $0x3,%eax
c010ab11:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010ab13:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab16:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ab19:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010ab1c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ab21:	c9                   	leave  
c010ab22:	c3                   	ret    

c010ab23 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010ab23:	55                   	push   %ebp
c010ab24:	89 e5                	mov    %esp,%ebp
c010ab26:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010ab29:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab2c:	8b 40 0c             	mov    0xc(%eax),%eax
c010ab2f:	89 04 24             	mov    %eax,(%esp)
c010ab32:	e8 86 f7 ff ff       	call   c010a2bd <kva2page>
c010ab37:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010ab3e:	00 
c010ab3f:	89 04 24             	mov    %eax,(%esp)
c010ab42:	e8 d3 c9 ff ff       	call   c010751a <free_pages>
}
c010ab47:	c9                   	leave  
c010ab48:	c3                   	ret    

c010ab49 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010ab49:	55                   	push   %ebp
c010ab4a:	89 e5                	mov    %esp,%ebp
c010ab4c:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010ab4f:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010ab54:	8b 40 18             	mov    0x18(%eax),%eax
c010ab57:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010ab5a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ab5e:	75 0a                	jne    c010ab6a <copy_mm+0x21>
        return 0;
c010ab60:	b8 00 00 00 00       	mov    $0x0,%eax
c010ab65:	e9 f9 00 00 00       	jmp    c010ac63 <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c010ab6a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab6d:	25 00 01 00 00       	and    $0x100,%eax
c010ab72:	85 c0                	test   %eax,%eax
c010ab74:	74 08                	je     c010ab7e <copy_mm+0x35>
        mm = oldmm;
c010ab76:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab79:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010ab7c:	eb 78                	jmp    c010abf6 <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c010ab7e:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010ab85:	e8 17 8a ff ff       	call   c01035a1 <mm_create>
c010ab8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ab8d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ab91:	75 05                	jne    c010ab98 <copy_mm+0x4f>
        goto bad_mm;
c010ab93:	e9 c8 00 00 00       	jmp    c010ac60 <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c010ab98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab9b:	89 04 24             	mov    %eax,(%esp)
c010ab9e:	e8 d9 fe ff ff       	call   c010aa7c <setup_pgdir>
c010aba3:	85 c0                	test   %eax,%eax
c010aba5:	74 05                	je     c010abac <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c010aba7:	e9 a9 00 00 00       	jmp    c010ac55 <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c010abac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abaf:	89 04 24             	mov    %eax,(%esp)
c010abb2:	e8 84 f7 ff ff       	call   c010a33b <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010abb7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abba:	89 44 24 04          	mov    %eax,0x4(%esp)
c010abbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abc1:	89 04 24             	mov    %eax,(%esp)
c010abc4:	e8 fb 8e ff ff       	call   c0103ac4 <dup_mmap>
c010abc9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010abcc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abcf:	89 04 24             	mov    %eax,(%esp)
c010abd2:	e8 97 f7 ff ff       	call   c010a36e <unlock_mm>

    if (ret != 0) {
c010abd7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010abdb:	74 19                	je     c010abf6 <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c010abdd:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010abde:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abe1:	89 04 24             	mov    %eax,(%esp)
c010abe4:	e8 dc 8f ff ff       	call   c0103bc5 <exit_mmap>
    put_pgdir(mm);
c010abe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abec:	89 04 24             	mov    %eax,(%esp)
c010abef:	e8 2f ff ff ff       	call   c010ab23 <put_pgdir>
c010abf4:	eb 5f                	jmp    c010ac55 <copy_mm+0x10c>
    mm_count_inc(mm);
c010abf6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abf9:	89 04 24             	mov    %eax,(%esp)
c010abfc:	e8 06 f7 ff ff       	call   c010a307 <mm_count_inc>
    proc->mm = mm;
c010ac01:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ac04:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ac07:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010ac0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac0d:	8b 40 0c             	mov    0xc(%eax),%eax
c010ac10:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ac13:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010ac1a:	77 23                	ja     c010ac3f <copy_mm+0xf6>
c010ac1c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ac1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ac23:	c7 44 24 08 90 fb 10 	movl   $0xc010fb90,0x8(%esp)
c010ac2a:	c0 
c010ac2b:	c7 44 24 04 6e 01 00 	movl   $0x16e,0x4(%esp)
c010ac32:	00 
c010ac33:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010ac3a:	e8 c6 57 ff ff       	call   c0100405 <__panic>
c010ac3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ac42:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010ac48:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ac4b:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010ac4e:	b8 00 00 00 00       	mov    $0x0,%eax
c010ac53:	eb 0e                	jmp    c010ac63 <copy_mm+0x11a>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010ac55:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac58:	89 04 24             	mov    %eax,(%esp)
c010ac5b:	e8 a6 8c ff ff       	call   c0103906 <mm_destroy>
bad_mm:
    return ret;
c010ac60:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010ac63:	c9                   	leave  
c010ac64:	c3                   	ret    

c010ac65 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010ac65:	55                   	push   %ebp
c010ac66:	89 e5                	mov    %esp,%ebp
c010ac68:	57                   	push   %edi
c010ac69:	56                   	push   %esi
c010ac6a:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010ac6b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac6e:	8b 40 0c             	mov    0xc(%eax),%eax
c010ac71:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010ac76:	89 c2                	mov    %eax,%edx
c010ac78:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac7b:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010ac7e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac81:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac84:	8b 55 10             	mov    0x10(%ebp),%edx
c010ac87:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010ac8c:	89 c1                	mov    %eax,%ecx
c010ac8e:	83 e1 01             	and    $0x1,%ecx
c010ac91:	85 c9                	test   %ecx,%ecx
c010ac93:	74 0e                	je     c010aca3 <copy_thread+0x3e>
c010ac95:	0f b6 0a             	movzbl (%edx),%ecx
c010ac98:	88 08                	mov    %cl,(%eax)
c010ac9a:	83 c0 01             	add    $0x1,%eax
c010ac9d:	83 c2 01             	add    $0x1,%edx
c010aca0:	83 eb 01             	sub    $0x1,%ebx
c010aca3:	89 c1                	mov    %eax,%ecx
c010aca5:	83 e1 02             	and    $0x2,%ecx
c010aca8:	85 c9                	test   %ecx,%ecx
c010acaa:	74 0f                	je     c010acbb <copy_thread+0x56>
c010acac:	0f b7 0a             	movzwl (%edx),%ecx
c010acaf:	66 89 08             	mov    %cx,(%eax)
c010acb2:	83 c0 02             	add    $0x2,%eax
c010acb5:	83 c2 02             	add    $0x2,%edx
c010acb8:	83 eb 02             	sub    $0x2,%ebx
c010acbb:	89 d9                	mov    %ebx,%ecx
c010acbd:	c1 e9 02             	shr    $0x2,%ecx
c010acc0:	89 c7                	mov    %eax,%edi
c010acc2:	89 d6                	mov    %edx,%esi
c010acc4:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010acc6:	89 f2                	mov    %esi,%edx
c010acc8:	89 f8                	mov    %edi,%eax
c010acca:	b9 00 00 00 00       	mov    $0x0,%ecx
c010accf:	89 de                	mov    %ebx,%esi
c010acd1:	83 e6 02             	and    $0x2,%esi
c010acd4:	85 f6                	test   %esi,%esi
c010acd6:	74 0b                	je     c010ace3 <copy_thread+0x7e>
c010acd8:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010acdc:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010ace0:	83 c1 02             	add    $0x2,%ecx
c010ace3:	83 e3 01             	and    $0x1,%ebx
c010ace6:	85 db                	test   %ebx,%ebx
c010ace8:	74 07                	je     c010acf1 <copy_thread+0x8c>
c010acea:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010acee:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010acf1:	8b 45 08             	mov    0x8(%ebp),%eax
c010acf4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010acf7:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010acfe:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad01:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad04:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ad07:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010ad0a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad0d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad10:	8b 55 08             	mov    0x8(%ebp),%edx
c010ad13:	8b 52 3c             	mov    0x3c(%edx),%edx
c010ad16:	8b 52 40             	mov    0x40(%edx),%edx
c010ad19:	80 ce 02             	or     $0x2,%dh
c010ad1c:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010ad1f:	ba 68 a8 10 c0       	mov    $0xc010a868,%edx
c010ad24:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad27:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010ad2a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad2d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad30:	89 c2                	mov    %eax,%edx
c010ad32:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad35:	89 50 20             	mov    %edx,0x20(%eax)
}
c010ad38:	5b                   	pop    %ebx
c010ad39:	5e                   	pop    %esi
c010ad3a:	5f                   	pop    %edi
c010ad3b:	5d                   	pop    %ebp
c010ad3c:	c3                   	ret    

c010ad3d <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010ad3d:	55                   	push   %ebp
c010ad3e:	89 e5                	mov    %esp,%ebp
c010ad40:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010ad43:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010ad4a:	a1 40 70 1c c0       	mov    0xc01c7040,%eax
c010ad4f:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010ad54:	7e 05                	jle    c010ad5b <do_fork+0x1e>
        goto fork_out;
c010ad56:	e9 f2 00 00 00       	jmp    c010ae4d <do_fork+0x110>
    }
    ret = -E_NO_MEM;
c010ad5b:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    if ((proc = alloc_proc()) == NULL) {
c010ad62:	e8 2d f6 ff ff       	call   c010a394 <alloc_proc>
c010ad67:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ad6a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ad6e:	75 05                	jne    c010ad75 <do_fork+0x38>
        goto fork_out;
c010ad70:	e9 d8 00 00 00       	jmp    c010ae4d <do_fork+0x110>
    }

    proc->parent = current;
c010ad75:	8b 15 28 50 1c c0    	mov    0xc01c5028,%edx
c010ad7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad7e:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c010ad81:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010ad86:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ad8c:	85 c0                	test   %eax,%eax
c010ad8e:	74 24                	je     c010adb4 <do_fork+0x77>
c010ad90:	c7 44 24 0c c8 fb 10 	movl   $0xc010fbc8,0xc(%esp)
c010ad97:	c0 
c010ad98:	c7 44 24 08 e1 fb 10 	movl   $0xc010fbe1,0x8(%esp)
c010ad9f:	c0 
c010ada0:	c7 44 24 04 ba 01 00 	movl   $0x1ba,0x4(%esp)
c010ada7:	00 
c010ada8:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010adaf:	e8 51 56 ff ff       	call   c0100405 <__panic>

    if (setup_kstack(proc) != 0) {
c010adb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010adb7:	89 04 24             	mov    %eax,(%esp)
c010adba:	e8 5b fc ff ff       	call   c010aa1a <setup_kstack>
c010adbf:	85 c0                	test   %eax,%eax
c010adc1:	74 05                	je     c010adc8 <do_fork+0x8b>
        goto bad_fork_cleanup_proc;
c010adc3:	e9 8a 00 00 00       	jmp    c010ae52 <do_fork+0x115>
    }
    if (copy_mm(clone_flags, proc) != 0) {
c010adc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010adcb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010adcf:	8b 45 08             	mov    0x8(%ebp),%eax
c010add2:	89 04 24             	mov    %eax,(%esp)
c010add5:	e8 6f fd ff ff       	call   c010ab49 <copy_mm>
c010adda:	85 c0                	test   %eax,%eax
c010addc:	74 0e                	je     c010adec <do_fork+0xaf>
        goto bad_fork_cleanup_kstack;
c010adde:	90                   	nop
    ret = proc->pid;
fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c010addf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ade2:	89 04 24             	mov    %eax,(%esp)
c010ade5:	e8 6c fc ff ff       	call   c010aa56 <put_kstack>
c010adea:	eb 66                	jmp    c010ae52 <do_fork+0x115>
    copy_thread(proc, stack, tf);
c010adec:	8b 45 10             	mov    0x10(%ebp),%eax
c010adef:	89 44 24 08          	mov    %eax,0x8(%esp)
c010adf3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010adf6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010adfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010adfd:	89 04 24             	mov    %eax,(%esp)
c010ae00:	e8 60 fe ff ff       	call   c010ac65 <copy_thread>
    local_intr_save(intr_flag);
c010ae05:	e8 b3 f3 ff ff       	call   c010a1bd <__intr_save>
c010ae0a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        proc->pid = get_pid();
c010ae0d:	e8 e9 f8 ff ff       	call   c010a6fb <get_pid>
c010ae12:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ae15:	89 42 04             	mov    %eax,0x4(%edx)
        hash_proc(proc);
c010ae18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae1b:	89 04 24             	mov    %eax,(%esp)
c010ae1e:	e8 5d fa ff ff       	call   c010a880 <hash_proc>
        set_links(proc);
c010ae23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae26:	89 04 24             	mov    %eax,(%esp)
c010ae29:	e8 72 f7 ff ff       	call   c010a5a0 <set_links>
    local_intr_restore(intr_flag);
c010ae2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae31:	89 04 24             	mov    %eax,(%esp)
c010ae34:	e8 ae f3 ff ff       	call   c010a1e7 <__intr_restore>
    wakeup_proc(proc);
c010ae39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae3c:	89 04 24             	mov    %eax,(%esp)
c010ae3f:	e8 c6 11 00 00       	call   c010c00a <wakeup_proc>
    ret = proc->pid;
c010ae44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae47:	8b 40 04             	mov    0x4(%eax),%eax
c010ae4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c010ae4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae50:	eb 0d                	jmp    c010ae5f <do_fork+0x122>
bad_fork_cleanup_proc:
    kfree(proc);
c010ae52:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae55:	89 04 24             	mov    %eax,(%esp)
c010ae58:	e8 88 a4 ff ff       	call   c01052e5 <kfree>
    goto fork_out;
c010ae5d:	eb ee                	jmp    c010ae4d <do_fork+0x110>
}
c010ae5f:	c9                   	leave  
c010ae60:	c3                   	ret    

c010ae61 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010ae61:	55                   	push   %ebp
c010ae62:	89 e5                	mov    %esp,%ebp
c010ae64:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010ae67:	8b 15 28 50 1c c0    	mov    0xc01c5028,%edx
c010ae6d:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010ae72:	39 c2                	cmp    %eax,%edx
c010ae74:	75 1c                	jne    c010ae92 <do_exit+0x31>
        panic("idleproc exit.\n");
c010ae76:	c7 44 24 08 f6 fb 10 	movl   $0xc010fbf6,0x8(%esp)
c010ae7d:	c0 
c010ae7e:	c7 44 24 04 e2 01 00 	movl   $0x1e2,0x4(%esp)
c010ae85:	00 
c010ae86:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010ae8d:	e8 73 55 ff ff       	call   c0100405 <__panic>
    }
    if (current == initproc) {
c010ae92:	8b 15 28 50 1c c0    	mov    0xc01c5028,%edx
c010ae98:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010ae9d:	39 c2                	cmp    %eax,%edx
c010ae9f:	75 1c                	jne    c010aebd <do_exit+0x5c>
        panic("initproc exit.\n");
c010aea1:	c7 44 24 08 06 fc 10 	movl   $0xc010fc06,0x8(%esp)
c010aea8:	c0 
c010aea9:	c7 44 24 04 e5 01 00 	movl   $0x1e5,0x4(%esp)
c010aeb0:	00 
c010aeb1:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010aeb8:	e8 48 55 ff ff       	call   c0100405 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010aebd:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010aec2:	8b 40 18             	mov    0x18(%eax),%eax
c010aec5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010aec8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aecc:	74 4a                	je     c010af18 <do_exit+0xb7>
        lcr3(boot_cr3);
c010aece:	a1 b4 71 1c c0       	mov    0xc01c71b4,%eax
c010aed3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010aed6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aed9:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010aedc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aedf:	89 04 24             	mov    %eax,(%esp)
c010aee2:	e8 3a f4 ff ff       	call   c010a321 <mm_count_dec>
c010aee7:	85 c0                	test   %eax,%eax
c010aee9:	75 21                	jne    c010af0c <do_exit+0xab>
            exit_mmap(mm);
c010aeeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aeee:	89 04 24             	mov    %eax,(%esp)
c010aef1:	e8 cf 8c ff ff       	call   c0103bc5 <exit_mmap>
            put_pgdir(mm);
c010aef6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aef9:	89 04 24             	mov    %eax,(%esp)
c010aefc:	e8 22 fc ff ff       	call   c010ab23 <put_pgdir>
            mm_destroy(mm);
c010af01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af04:	89 04 24             	mov    %eax,(%esp)
c010af07:	e8 fa 89 ff ff       	call   c0103906 <mm_destroy>
        }
        current->mm = NULL;
c010af0c:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010af11:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c010af18:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010af1d:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010af23:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010af28:	8b 55 08             	mov    0x8(%ebp),%edx
c010af2b:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010af31:	e8 87 f2 ff ff       	call   c010a1bd <__intr_save>
c010af36:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010af39:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010af3e:	8b 40 14             	mov    0x14(%eax),%eax
c010af41:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010af44:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af47:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010af4d:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010af52:	75 10                	jne    c010af64 <do_exit+0x103>
            wakeup_proc(proc);
c010af54:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af57:	89 04 24             	mov    %eax,(%esp)
c010af5a:	e8 ab 10 00 00       	call   c010c00a <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010af5f:	e9 ac 00 00 00       	jmp    c010b010 <do_exit+0x1af>
c010af64:	e9 a7 00 00 00       	jmp    c010b010 <do_exit+0x1af>
            proc = current->cptr;
c010af69:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010af6e:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010af74:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010af77:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010af7c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010af7f:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010af85:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010af8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af8e:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010af95:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010af98:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010af9d:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010afa3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afa6:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010afac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afaf:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010afb5:	85 c0                	test   %eax,%eax
c010afb7:	74 14                	je     c010afcd <do_exit+0x16c>
                initproc->cptr->yptr = proc;
c010afb9:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010afbe:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010afc4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010afc7:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010afcd:	8b 15 24 50 1c c0    	mov    0xc01c5024,%edx
c010afd3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afd6:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010afd9:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010afde:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010afe1:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010afe7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afea:	8b 00                	mov    (%eax),%eax
c010afec:	83 f8 03             	cmp    $0x3,%eax
c010afef:	75 1f                	jne    c010b010 <do_exit+0x1af>
                if (initproc->wait_state == WT_CHILD) {
c010aff1:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010aff6:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010affc:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010b001:	75 0d                	jne    c010b010 <do_exit+0x1af>
                    wakeup_proc(initproc);
c010b003:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010b008:	89 04 24             	mov    %eax,(%esp)
c010b00b:	e8 fa 0f 00 00       	call   c010c00a <wakeup_proc>
        while (current->cptr != NULL) {
c010b010:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b015:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b01b:	85 c0                	test   %eax,%eax
c010b01d:	0f 85 46 ff ff ff    	jne    c010af69 <do_exit+0x108>
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010b023:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b026:	89 04 24             	mov    %eax,(%esp)
c010b029:	e8 b9 f1 ff ff       	call   c010a1e7 <__intr_restore>
    
    schedule();
c010b02e:	e8 73 10 00 00       	call   c010c0a6 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010b033:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b038:	8b 40 04             	mov    0x4(%eax),%eax
c010b03b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b03f:	c7 44 24 08 18 fc 10 	movl   $0xc010fc18,0x8(%esp)
c010b046:	c0 
c010b047:	c7 44 24 04 11 02 00 	movl   $0x211,0x4(%esp)
c010b04e:	00 
c010b04f:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010b056:	e8 aa 53 ff ff       	call   c0100405 <__panic>

c010b05b <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010b05b:	55                   	push   %ebp
c010b05c:	89 e5                	mov    %esp,%ebp
c010b05e:	83 ec 78             	sub    $0x78,%esp
    if (current->mm != NULL) {
c010b061:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b066:	8b 40 18             	mov    0x18(%eax),%eax
c010b069:	85 c0                	test   %eax,%eax
c010b06b:	74 1c                	je     c010b089 <load_icode+0x2e>
        panic("load_icode: current->mm must be empty.\n");
c010b06d:	c7 44 24 08 38 fc 10 	movl   $0xc010fc38,0x8(%esp)
c010b074:	c0 
c010b075:	c7 44 24 04 1b 02 00 	movl   $0x21b,0x4(%esp)
c010b07c:	00 
c010b07d:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010b084:	e8 7c 53 ff ff       	call   c0100405 <__panic>
    }

    int ret = -E_NO_MEM;
c010b089:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010b090:	e8 0c 85 ff ff       	call   c01035a1 <mm_create>
c010b095:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b098:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010b09c:	75 06                	jne    c010b0a4 <load_icode+0x49>
        goto bad_mm;
c010b09e:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010b09f:	e9 ef 05 00 00       	jmp    c010b693 <load_icode+0x638>
    if (setup_pgdir(mm) != 0) {
c010b0a4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b0a7:	89 04 24             	mov    %eax,(%esp)
c010b0aa:	e8 cd f9 ff ff       	call   c010aa7c <setup_pgdir>
c010b0af:	85 c0                	test   %eax,%eax
c010b0b1:	74 05                	je     c010b0b8 <load_icode+0x5d>
        goto bad_pgdir_cleanup_mm;
c010b0b3:	e9 f6 05 00 00       	jmp    c010b6ae <load_icode+0x653>
    struct elfhdr *elf = (struct elfhdr *)binary;
c010b0b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0bb:	89 45 cc             	mov    %eax,-0x34(%ebp)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010b0be:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b0c1:	8b 50 1c             	mov    0x1c(%eax),%edx
c010b0c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0c7:	01 d0                	add    %edx,%eax
c010b0c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (elf->e_magic != ELF_MAGIC) {
c010b0cc:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b0cf:	8b 00                	mov    (%eax),%eax
c010b0d1:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010b0d6:	74 0c                	je     c010b0e4 <load_icode+0x89>
        ret = -E_INVAL_ELF;
c010b0d8:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010b0df:	e9 bf 05 00 00       	jmp    c010b6a3 <load_icode+0x648>
    struct proghdr *ph_end = ph + elf->e_phnum;
c010b0e4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b0e7:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010b0eb:	0f b7 c0             	movzwl %ax,%eax
c010b0ee:	c1 e0 05             	shl    $0x5,%eax
c010b0f1:	89 c2                	mov    %eax,%edx
c010b0f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b0f6:	01 d0                	add    %edx,%eax
c010b0f8:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010b0fb:	e9 13 03 00 00       	jmp    c010b413 <load_icode+0x3b8>
        if (ph->p_type != ELF_PT_LOAD) {
c010b100:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b103:	8b 00                	mov    (%eax),%eax
c010b105:	83 f8 01             	cmp    $0x1,%eax
c010b108:	74 05                	je     c010b10f <load_icode+0xb4>
            continue ;
c010b10a:	e9 00 03 00 00       	jmp    c010b40f <load_icode+0x3b4>
        if (ph->p_filesz > ph->p_memsz) {
c010b10f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b112:	8b 50 10             	mov    0x10(%eax),%edx
c010b115:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b118:	8b 40 14             	mov    0x14(%eax),%eax
c010b11b:	39 c2                	cmp    %eax,%edx
c010b11d:	76 0c                	jbe    c010b12b <load_icode+0xd0>
            ret = -E_INVAL_ELF;
c010b11f:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010b126:	e9 6d 05 00 00       	jmp    c010b698 <load_icode+0x63d>
        if (ph->p_filesz == 0) {
c010b12b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b12e:	8b 40 10             	mov    0x10(%eax),%eax
c010b131:	85 c0                	test   %eax,%eax
c010b133:	75 05                	jne    c010b13a <load_icode+0xdf>
            continue ;
c010b135:	e9 d5 02 00 00       	jmp    c010b40f <load_icode+0x3b4>
        vm_flags = 0, perm = PTE_U;
c010b13a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010b141:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010b148:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b14b:	8b 40 18             	mov    0x18(%eax),%eax
c010b14e:	83 e0 01             	and    $0x1,%eax
c010b151:	85 c0                	test   %eax,%eax
c010b153:	74 04                	je     c010b159 <load_icode+0xfe>
c010b155:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010b159:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b15c:	8b 40 18             	mov    0x18(%eax),%eax
c010b15f:	83 e0 02             	and    $0x2,%eax
c010b162:	85 c0                	test   %eax,%eax
c010b164:	74 04                	je     c010b16a <load_icode+0x10f>
c010b166:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010b16a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b16d:	8b 40 18             	mov    0x18(%eax),%eax
c010b170:	83 e0 04             	and    $0x4,%eax
c010b173:	85 c0                	test   %eax,%eax
c010b175:	74 04                	je     c010b17b <load_icode+0x120>
c010b177:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010b17b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b17e:	83 e0 02             	and    $0x2,%eax
c010b181:	85 c0                	test   %eax,%eax
c010b183:	74 04                	je     c010b189 <load_icode+0x12e>
c010b185:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010b189:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b18c:	8b 50 14             	mov    0x14(%eax),%edx
c010b18f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b192:	8b 40 08             	mov    0x8(%eax),%eax
c010b195:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b19c:	00 
c010b19d:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010b1a0:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010b1a4:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b1a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b1ac:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b1af:	89 04 24             	mov    %eax,(%esp)
c010b1b2:	e8 f1 87 ff ff       	call   c01039a8 <mm_map>
c010b1b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b1ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b1be:	74 05                	je     c010b1c5 <load_icode+0x16a>
            goto bad_cleanup_mmap;
c010b1c0:	e9 d3 04 00 00       	jmp    c010b698 <load_icode+0x63d>
        unsigned char *from = binary + ph->p_offset;
c010b1c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1c8:	8b 50 04             	mov    0x4(%eax),%edx
c010b1cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1ce:	01 d0                	add    %edx,%eax
c010b1d0:	89 45 e0             	mov    %eax,-0x20(%ebp)
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010b1d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1d6:	8b 40 08             	mov    0x8(%eax),%eax
c010b1d9:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010b1dc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b1df:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010b1e2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010b1e5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010b1ea:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        ret = -E_NO_MEM;
c010b1ed:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
        end = ph->p_va + ph->p_filesz;
c010b1f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1f7:	8b 50 08             	mov    0x8(%eax),%edx
c010b1fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1fd:	8b 40 10             	mov    0x10(%eax),%eax
c010b200:	01 d0                	add    %edx,%eax
c010b202:	89 45 c0             	mov    %eax,-0x40(%ebp)
        while (start < end) {
c010b205:	e9 90 00 00 00       	jmp    c010b29a <load_icode+0x23f>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b20a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b20d:	8b 40 0c             	mov    0xc(%eax),%eax
c010b210:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b213:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b217:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b21a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b21e:	89 04 24             	mov    %eax,(%esp)
c010b221:	e8 dd d0 ff ff       	call   c0108303 <pgdir_alloc_page>
c010b226:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b229:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b22d:	75 05                	jne    c010b234 <load_icode+0x1d9>
                goto bad_cleanup_mmap;
c010b22f:	e9 64 04 00 00       	jmp    c010b698 <load_icode+0x63d>
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b234:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b237:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b23a:	29 c2                	sub    %eax,%edx
c010b23c:	89 d0                	mov    %edx,%eax
c010b23e:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b241:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b246:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b249:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b24c:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b253:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b256:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b259:	73 0d                	jae    c010b268 <load_icode+0x20d>
                size -= la - end;
c010b25b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b25e:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b261:	29 c2                	sub    %eax,%edx
c010b263:	89 d0                	mov    %edx,%eax
c010b265:	01 45 dc             	add    %eax,-0x24(%ebp)
            memcpy(page2kva(page) + off, from, size);
c010b268:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b26b:	89 04 24             	mov    %eax,(%esp)
c010b26e:	e8 f6 ef ff ff       	call   c010a269 <page2kva>
c010b273:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b276:	01 c2                	add    %eax,%edx
c010b278:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b27b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b27f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b282:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b286:	89 14 24             	mov    %edx,(%esp)
c010b289:	e8 a7 1b 00 00       	call   c010ce35 <memcpy>
            start += size, from += size;
c010b28e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b291:	01 45 d8             	add    %eax,-0x28(%ebp)
c010b294:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b297:	01 45 e0             	add    %eax,-0x20(%ebp)
        while (start < end) {
c010b29a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b29d:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b2a0:	0f 82 64 ff ff ff    	jb     c010b20a <load_icode+0x1af>
        end = ph->p_va + ph->p_memsz;
c010b2a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b2a9:	8b 50 08             	mov    0x8(%eax),%edx
c010b2ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b2af:	8b 40 14             	mov    0x14(%eax),%eax
c010b2b2:	01 d0                	add    %edx,%eax
c010b2b4:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010b2b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b2ba:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b2bd:	0f 83 b0 00 00 00    	jae    c010b373 <load_icode+0x318>
            if (start == end) {
c010b2c3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b2c6:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b2c9:	75 05                	jne    c010b2d0 <load_icode+0x275>
                continue ;
c010b2cb:	e9 3f 01 00 00       	jmp    c010b40f <load_icode+0x3b4>
            off = start + PGSIZE - la, size = PGSIZE - off;
c010b2d0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b2d3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b2d6:	29 c2                	sub    %eax,%edx
c010b2d8:	89 d0                	mov    %edx,%eax
c010b2da:	05 00 10 00 00       	add    $0x1000,%eax
c010b2df:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b2e2:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b2e7:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b2ea:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010b2ed:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b2f0:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b2f3:	73 0d                	jae    c010b302 <load_icode+0x2a7>
                size -= la - end;
c010b2f5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b2f8:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b2fb:	29 c2                	sub    %eax,%edx
c010b2fd:	89 d0                	mov    %edx,%eax
c010b2ff:	01 45 dc             	add    %eax,-0x24(%ebp)
            memset(page2kva(page) + off, 0, size);
c010b302:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b305:	89 04 24             	mov    %eax,(%esp)
c010b308:	e8 5c ef ff ff       	call   c010a269 <page2kva>
c010b30d:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b310:	01 c2                	add    %eax,%edx
c010b312:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b315:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b319:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b320:	00 
c010b321:	89 14 24             	mov    %edx,(%esp)
c010b324:	e8 2a 1a 00 00       	call   c010cd53 <memset>
            start += size;
c010b329:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b32c:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010b32f:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b332:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b335:	73 08                	jae    c010b33f <load_icode+0x2e4>
c010b337:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b33a:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b33d:	74 34                	je     c010b373 <load_icode+0x318>
c010b33f:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b342:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b345:	72 08                	jb     c010b34f <load_icode+0x2f4>
c010b347:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b34a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b34d:	74 24                	je     c010b373 <load_icode+0x318>
c010b34f:	c7 44 24 0c 60 fc 10 	movl   $0xc010fc60,0xc(%esp)
c010b356:	c0 
c010b357:	c7 44 24 08 e1 fb 10 	movl   $0xc010fbe1,0x8(%esp)
c010b35e:	c0 
c010b35f:	c7 44 24 04 6d 02 00 	movl   $0x26d,0x4(%esp)
c010b366:	00 
c010b367:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010b36e:	e8 92 50 ff ff       	call   c0100405 <__panic>
        while (start < end) {
c010b373:	e9 8b 00 00 00       	jmp    c010b403 <load_icode+0x3a8>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b378:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b37b:	8b 40 0c             	mov    0xc(%eax),%eax
c010b37e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b381:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b385:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b388:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b38c:	89 04 24             	mov    %eax,(%esp)
c010b38f:	e8 6f cf ff ff       	call   c0108303 <pgdir_alloc_page>
c010b394:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b397:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b39b:	75 05                	jne    c010b3a2 <load_icode+0x347>
                goto bad_cleanup_mmap;
c010b39d:	e9 f6 02 00 00       	jmp    c010b698 <load_icode+0x63d>
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b3a2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b3a5:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b3a8:	29 c2                	sub    %eax,%edx
c010b3aa:	89 d0                	mov    %edx,%eax
c010b3ac:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b3af:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b3b4:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b3b7:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b3ba:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b3c1:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b3c4:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b3c7:	73 0d                	jae    c010b3d6 <load_icode+0x37b>
                size -= la - end;
c010b3c9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b3cc:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b3cf:	29 c2                	sub    %eax,%edx
c010b3d1:	89 d0                	mov    %edx,%eax
c010b3d3:	01 45 dc             	add    %eax,-0x24(%ebp)
            memset(page2kva(page) + off, 0, size);
c010b3d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3d9:	89 04 24             	mov    %eax,(%esp)
c010b3dc:	e8 88 ee ff ff       	call   c010a269 <page2kva>
c010b3e1:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b3e4:	01 c2                	add    %eax,%edx
c010b3e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b3e9:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b3ed:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b3f4:	00 
c010b3f5:	89 14 24             	mov    %edx,(%esp)
c010b3f8:	e8 56 19 00 00       	call   c010cd53 <memset>
            start += size;
c010b3fd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b400:	01 45 d8             	add    %eax,-0x28(%ebp)
        while (start < end) {
c010b403:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b406:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b409:	0f 82 69 ff ff ff    	jb     c010b378 <load_icode+0x31d>
    for (; ph < ph_end; ph ++) {
c010b40f:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010b413:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b416:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010b419:	0f 82 e1 fc ff ff    	jb     c010b100 <load_icode+0xa5>
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010b41f:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010b426:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b42d:	00 
c010b42e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b431:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b435:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010b43c:	00 
c010b43d:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010b444:	af 
c010b445:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b448:	89 04 24             	mov    %eax,(%esp)
c010b44b:	e8 58 85 ff ff       	call   c01039a8 <mm_map>
c010b450:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b453:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b457:	74 05                	je     c010b45e <load_icode+0x403>
        goto bad_cleanup_mmap;
c010b459:	e9 3a 02 00 00       	jmp    c010b698 <load_icode+0x63d>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010b45e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b461:	8b 40 0c             	mov    0xc(%eax),%eax
c010b464:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b46b:	00 
c010b46c:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010b473:	af 
c010b474:	89 04 24             	mov    %eax,(%esp)
c010b477:	e8 87 ce ff ff       	call   c0108303 <pgdir_alloc_page>
c010b47c:	85 c0                	test   %eax,%eax
c010b47e:	75 24                	jne    c010b4a4 <load_icode+0x449>
c010b480:	c7 44 24 0c 9c fc 10 	movl   $0xc010fc9c,0xc(%esp)
c010b487:	c0 
c010b488:	c7 44 24 08 e1 fb 10 	movl   $0xc010fbe1,0x8(%esp)
c010b48f:	c0 
c010b490:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
c010b497:	00 
c010b498:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010b49f:	e8 61 4f ff ff       	call   c0100405 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010b4a4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b4a7:	8b 40 0c             	mov    0xc(%eax),%eax
c010b4aa:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b4b1:	00 
c010b4b2:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010b4b9:	af 
c010b4ba:	89 04 24             	mov    %eax,(%esp)
c010b4bd:	e8 41 ce ff ff       	call   c0108303 <pgdir_alloc_page>
c010b4c2:	85 c0                	test   %eax,%eax
c010b4c4:	75 24                	jne    c010b4ea <load_icode+0x48f>
c010b4c6:	c7 44 24 0c e0 fc 10 	movl   $0xc010fce0,0xc(%esp)
c010b4cd:	c0 
c010b4ce:	c7 44 24 08 e1 fb 10 	movl   $0xc010fbe1,0x8(%esp)
c010b4d5:	c0 
c010b4d6:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
c010b4dd:	00 
c010b4de:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010b4e5:	e8 1b 4f ff ff       	call   c0100405 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010b4ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b4ed:	8b 40 0c             	mov    0xc(%eax),%eax
c010b4f0:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b4f7:	00 
c010b4f8:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010b4ff:	af 
c010b500:	89 04 24             	mov    %eax,(%esp)
c010b503:	e8 fb cd ff ff       	call   c0108303 <pgdir_alloc_page>
c010b508:	85 c0                	test   %eax,%eax
c010b50a:	75 24                	jne    c010b530 <load_icode+0x4d5>
c010b50c:	c7 44 24 0c 24 fd 10 	movl   $0xc010fd24,0xc(%esp)
c010b513:	c0 
c010b514:	c7 44 24 08 e1 fb 10 	movl   $0xc010fbe1,0x8(%esp)
c010b51b:	c0 
c010b51c:	c7 44 24 04 82 02 00 	movl   $0x282,0x4(%esp)
c010b523:	00 
c010b524:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010b52b:	e8 d5 4e ff ff       	call   c0100405 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010b530:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b533:	8b 40 0c             	mov    0xc(%eax),%eax
c010b536:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b53d:	00 
c010b53e:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010b545:	af 
c010b546:	89 04 24             	mov    %eax,(%esp)
c010b549:	e8 b5 cd ff ff       	call   c0108303 <pgdir_alloc_page>
c010b54e:	85 c0                	test   %eax,%eax
c010b550:	75 24                	jne    c010b576 <load_icode+0x51b>
c010b552:	c7 44 24 0c 68 fd 10 	movl   $0xc010fd68,0xc(%esp)
c010b559:	c0 
c010b55a:	c7 44 24 08 e1 fb 10 	movl   $0xc010fbe1,0x8(%esp)
c010b561:	c0 
c010b562:	c7 44 24 04 83 02 00 	movl   $0x283,0x4(%esp)
c010b569:	00 
c010b56a:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010b571:	e8 8f 4e ff ff       	call   c0100405 <__panic>
    mm_count_inc(mm);
c010b576:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b579:	89 04 24             	mov    %eax,(%esp)
c010b57c:	e8 86 ed ff ff       	call   c010a307 <mm_count_inc>
    current->mm = mm;
c010b581:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b586:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b589:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010b58c:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b591:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b594:	8b 52 0c             	mov    0xc(%edx),%edx
c010b597:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010b59a:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010b5a1:	77 23                	ja     c010b5c6 <load_icode+0x56b>
c010b5a3:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010b5a6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b5aa:	c7 44 24 08 90 fb 10 	movl   $0xc010fb90,0x8(%esp)
c010b5b1:	c0 
c010b5b2:	c7 44 24 04 88 02 00 	movl   $0x288,0x4(%esp)
c010b5b9:	00 
c010b5ba:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010b5c1:	e8 3f 4e ff ff       	call   c0100405 <__panic>
c010b5c6:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010b5c9:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010b5cf:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010b5d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b5d5:	8b 40 0c             	mov    0xc(%eax),%eax
c010b5d8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010b5db:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010b5e2:	77 23                	ja     c010b607 <load_icode+0x5ac>
c010b5e4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b5e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b5eb:	c7 44 24 08 90 fb 10 	movl   $0xc010fb90,0x8(%esp)
c010b5f2:	c0 
c010b5f3:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
c010b5fa:	00 
c010b5fb:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010b602:	e8 fe 4d ff ff       	call   c0100405 <__panic>
c010b607:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b60a:	05 00 00 00 40       	add    $0x40000000,%eax
c010b60f:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010b612:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010b615:	0f 22 d8             	mov    %eax,%cr3
    struct trapframe *tf = current->tf;
c010b618:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b61d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b620:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010b623:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010b62a:	00 
c010b62b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b632:	00 
c010b633:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b636:	89 04 24             	mov    %eax,(%esp)
c010b639:	e8 15 17 00 00       	call   c010cd53 <memset>
    tf->tf_cs = USER_CS;
c010b63e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b641:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010b647:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b64a:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010b650:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b653:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010b657:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b65a:	66 89 50 28          	mov    %dx,0x28(%eax)
c010b65e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b661:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010b665:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b668:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = USTACKTOP;
c010b66c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b66f:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010b676:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b679:	8b 50 18             	mov    0x18(%eax),%edx
c010b67c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b67f:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010b682:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b685:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010b68c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    return ret;
c010b693:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b696:	eb 23                	jmp    c010b6bb <load_icode+0x660>
    exit_mmap(mm);
c010b698:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b69b:	89 04 24             	mov    %eax,(%esp)
c010b69e:	e8 22 85 ff ff       	call   c0103bc5 <exit_mmap>
    put_pgdir(mm);
c010b6a3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b6a6:	89 04 24             	mov    %eax,(%esp)
c010b6a9:	e8 75 f4 ff ff       	call   c010ab23 <put_pgdir>
    mm_destroy(mm);
c010b6ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b6b1:	89 04 24             	mov    %eax,(%esp)
c010b6b4:	e8 4d 82 ff ff       	call   c0103906 <mm_destroy>
    goto out;
c010b6b9:	eb d8                	jmp    c010b693 <load_icode+0x638>
}
c010b6bb:	c9                   	leave  
c010b6bc:	c3                   	ret    

c010b6bd <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010b6bd:	55                   	push   %ebp
c010b6be:	89 e5                	mov    %esp,%ebp
c010b6c0:	83 ec 58             	sub    $0x58,%esp
    struct mm_struct *mm = current->mm;
c010b6c3:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b6c8:	8b 40 18             	mov    0x18(%eax),%eax
c010b6cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010b6ce:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6d1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010b6d8:	00 
c010b6d9:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b6dc:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b6e0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b6e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6e7:	89 04 24             	mov    %eax,(%esp)
c010b6ea:	e8 7a 8f ff ff       	call   c0104669 <user_mem_check>
c010b6ef:	85 c0                	test   %eax,%eax
c010b6f1:	75 0a                	jne    c010b6fd <do_execve+0x40>
        return -E_INVAL;
c010b6f3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b6f8:	e9 f4 00 00 00       	jmp    c010b7f1 <do_execve+0x134>
    }
    if (len > PROC_NAME_LEN) {
c010b6fd:	83 7d 0c 32          	cmpl   $0x32,0xc(%ebp)
c010b701:	76 07                	jbe    c010b70a <do_execve+0x4d>
        len = PROC_NAME_LEN;
c010b703:	c7 45 0c 32 00 00 00 	movl   $0x32,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010b70a:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010b711:	00 
c010b712:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b719:	00 
c010b71a:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010b71d:	89 04 24             	mov    %eax,(%esp)
c010b720:	e8 2e 16 00 00       	call   c010cd53 <memset>
    memcpy(local_name, name, len);
c010b725:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b728:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b72c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b72f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b733:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010b736:	89 04 24             	mov    %eax,(%esp)
c010b739:	e8 f7 16 00 00       	call   c010ce35 <memcpy>

    if (mm != NULL) {
c010b73e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b742:	74 4a                	je     c010b78e <do_execve+0xd1>
        lcr3(boot_cr3);
c010b744:	a1 b4 71 1c c0       	mov    0xc01c71b4,%eax
c010b749:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b74c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b74f:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010b752:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b755:	89 04 24             	mov    %eax,(%esp)
c010b758:	e8 c4 eb ff ff       	call   c010a321 <mm_count_dec>
c010b75d:	85 c0                	test   %eax,%eax
c010b75f:	75 21                	jne    c010b782 <do_execve+0xc5>
            exit_mmap(mm);
c010b761:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b764:	89 04 24             	mov    %eax,(%esp)
c010b767:	e8 59 84 ff ff       	call   c0103bc5 <exit_mmap>
            put_pgdir(mm);
c010b76c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b76f:	89 04 24             	mov    %eax,(%esp)
c010b772:	e8 ac f3 ff ff       	call   c010ab23 <put_pgdir>
            mm_destroy(mm);
c010b777:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b77a:	89 04 24             	mov    %eax,(%esp)
c010b77d:	e8 84 81 ff ff       	call   c0103906 <mm_destroy>
        }
        current->mm = NULL;
c010b782:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b787:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010b78e:	8b 45 14             	mov    0x14(%ebp),%eax
c010b791:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b795:	8b 45 10             	mov    0x10(%ebp),%eax
c010b798:	89 04 24             	mov    %eax,(%esp)
c010b79b:	e8 bb f8 ff ff       	call   c010b05b <load_icode>
c010b7a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b7a3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b7a7:	74 2f                	je     c010b7d8 <do_execve+0x11b>
        goto execve_exit;
c010b7a9:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010b7aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7ad:	89 04 24             	mov    %eax,(%esp)
c010b7b0:	e8 ac f6 ff ff       	call   c010ae61 <do_exit>
    panic("already exit: %e.\n", ret);
c010b7b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7b8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b7bc:	c7 44 24 08 ab fd 10 	movl   $0xc010fdab,0x8(%esp)
c010b7c3:	c0 
c010b7c4:	c7 44 24 04 cb 02 00 	movl   $0x2cb,0x4(%esp)
c010b7cb:	00 
c010b7cc:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010b7d3:	e8 2d 4c ff ff       	call   c0100405 <__panic>
    set_proc_name(current, local_name);
c010b7d8:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b7dd:	8d 55 b9             	lea    -0x47(%ebp),%edx
c010b7e0:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b7e4:	89 04 24             	mov    %eax,(%esp)
c010b7e7:	e8 2f ed ff ff       	call   c010a51b <set_proc_name>
    return 0;
c010b7ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b7f1:	c9                   	leave  
c010b7f2:	c3                   	ret    

c010b7f3 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010b7f3:	55                   	push   %ebp
c010b7f4:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010b7f6:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b7fb:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010b802:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b807:	5d                   	pop    %ebp
c010b808:	c3                   	ret    

c010b809 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010b809:	55                   	push   %ebp
c010b80a:	89 e5                	mov    %esp,%ebp
c010b80c:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010b80f:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b814:	8b 40 18             	mov    0x18(%eax),%eax
c010b817:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010b81a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b81e:	74 30                	je     c010b850 <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010b820:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b823:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010b82a:	00 
c010b82b:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010b832:	00 
c010b833:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b837:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b83a:	89 04 24             	mov    %eax,(%esp)
c010b83d:	e8 27 8e ff ff       	call   c0104669 <user_mem_check>
c010b842:	85 c0                	test   %eax,%eax
c010b844:	75 0a                	jne    c010b850 <do_wait+0x47>
            return -E_INVAL;
c010b846:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b84b:	e9 57 01 00 00       	jmp    c010b9a7 <do_wait+0x19e>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010b850:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010b857:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b85b:	74 39                	je     c010b896 <do_wait+0x8d>
        proc = find_proc(pid);
c010b85d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b860:	89 04 24             	mov    %eax,(%esp)
c010b863:	e8 cc f0 ff ff       	call   c010a934 <find_proc>
c010b868:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010b86b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b86f:	74 5a                	je     c010b8cb <do_wait+0xc2>
c010b871:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b874:	8b 50 14             	mov    0x14(%eax),%edx
c010b877:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b87c:	39 c2                	cmp    %eax,%edx
c010b87e:	75 4b                	jne    c010b8cb <do_wait+0xc2>
            haskid = 1;
c010b880:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010b887:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b88a:	8b 00                	mov    (%eax),%eax
c010b88c:	83 f8 03             	cmp    $0x3,%eax
c010b88f:	75 3a                	jne    c010b8cb <do_wait+0xc2>
                goto found;
c010b891:	e9 89 00 00 00       	jmp    c010b91f <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
c010b896:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b89b:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b8a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010b8a4:	eb 1f                	jmp    c010b8c5 <do_wait+0xbc>
            haskid = 1;
c010b8a6:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010b8ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8b0:	8b 00                	mov    (%eax),%eax
c010b8b2:	83 f8 03             	cmp    $0x3,%eax
c010b8b5:	75 02                	jne    c010b8b9 <do_wait+0xb0>
                goto found;
c010b8b7:	eb 66                	jmp    c010b91f <do_wait+0x116>
        for (; proc != NULL; proc = proc->optr) {
c010b8b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8bc:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b8c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b8c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b8c9:	75 db                	jne    c010b8a6 <do_wait+0x9d>
            }
        }
    }
    if (haskid) {
c010b8cb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b8cf:	74 44                	je     c010b915 <do_wait+0x10c>
        current->state = PROC_SLEEPING;
c010b8d1:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b8d6:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010b8dc:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b8e1:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010b8e8:	00 00 80 
        schedule();
c010b8eb:	e8 b6 07 00 00       	call   c010c0a6 <schedule>
        if (current->flags & PF_EXITING) {
c010b8f0:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b8f5:	8b 40 44             	mov    0x44(%eax),%eax
c010b8f8:	83 e0 01             	and    $0x1,%eax
c010b8fb:	85 c0                	test   %eax,%eax
c010b8fd:	74 11                	je     c010b910 <do_wait+0x107>
            do_exit(-E_KILLED);
c010b8ff:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010b906:	e8 56 f5 ff ff       	call   c010ae61 <do_exit>
        }
        goto repeat;
c010b90b:	e9 40 ff ff ff       	jmp    c010b850 <do_wait+0x47>
c010b910:	e9 3b ff ff ff       	jmp    c010b850 <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010b915:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010b91a:	e9 88 00 00 00       	jmp    c010b9a7 <do_wait+0x19e>

found:
    if (proc == idleproc || proc == initproc) {
c010b91f:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b924:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b927:	74 0a                	je     c010b933 <do_wait+0x12a>
c010b929:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010b92e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b931:	75 1c                	jne    c010b94f <do_wait+0x146>
        panic("wait idleproc or initproc.\n");
c010b933:	c7 44 24 08 be fd 10 	movl   $0xc010fdbe,0x8(%esp)
c010b93a:	c0 
c010b93b:	c7 44 24 04 04 03 00 	movl   $0x304,0x4(%esp)
c010b942:	00 
c010b943:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010b94a:	e8 b6 4a ff ff       	call   c0100405 <__panic>
    }
    if (code_store != NULL) {
c010b94f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b953:	74 0e                	je     c010b963 <do_wait+0x15a>
        *code_store = proc->exit_code;
c010b955:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b958:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010b95e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b961:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010b963:	e8 55 e8 ff ff       	call   c010a1bd <__intr_save>
c010b968:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010b96b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b96e:	89 04 24             	mov    %eax,(%esp)
c010b971:	e8 89 ef ff ff       	call   c010a8ff <unhash_proc>
        remove_links(proc);
c010b976:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b979:	89 04 24             	mov    %eax,(%esp)
c010b97c:	e8 d9 ec ff ff       	call   c010a65a <remove_links>
    }
    local_intr_restore(intr_flag);
c010b981:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b984:	89 04 24             	mov    %eax,(%esp)
c010b987:	e8 5b e8 ff ff       	call   c010a1e7 <__intr_restore>
    put_kstack(proc);
c010b98c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b98f:	89 04 24             	mov    %eax,(%esp)
c010b992:	e8 bf f0 ff ff       	call   c010aa56 <put_kstack>
    kfree(proc);
c010b997:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b99a:	89 04 24             	mov    %eax,(%esp)
c010b99d:	e8 43 99 ff ff       	call   c01052e5 <kfree>
    return 0;
c010b9a2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b9a7:	c9                   	leave  
c010b9a8:	c3                   	ret    

c010b9a9 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010b9a9:	55                   	push   %ebp
c010b9aa:	89 e5                	mov    %esp,%ebp
c010b9ac:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010b9af:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9b2:	89 04 24             	mov    %eax,(%esp)
c010b9b5:	e8 7a ef ff ff       	call   c010a934 <find_proc>
c010b9ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b9bd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b9c1:	74 44                	je     c010ba07 <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010b9c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9c6:	8b 40 44             	mov    0x44(%eax),%eax
c010b9c9:	83 e0 01             	and    $0x1,%eax
c010b9cc:	85 c0                	test   %eax,%eax
c010b9ce:	75 30                	jne    c010ba00 <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010b9d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9d3:	8b 40 44             	mov    0x44(%eax),%eax
c010b9d6:	83 c8 01             	or     $0x1,%eax
c010b9d9:	89 c2                	mov    %eax,%edx
c010b9db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9de:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010b9e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9e4:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b9ea:	85 c0                	test   %eax,%eax
c010b9ec:	79 0b                	jns    c010b9f9 <do_kill+0x50>
                wakeup_proc(proc);
c010b9ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9f1:	89 04 24             	mov    %eax,(%esp)
c010b9f4:	e8 11 06 00 00       	call   c010c00a <wakeup_proc>
            }
            return 0;
c010b9f9:	b8 00 00 00 00       	mov    $0x0,%eax
c010b9fe:	eb 0c                	jmp    c010ba0c <do_kill+0x63>
        }
        return -E_KILLED;
c010ba00:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010ba05:	eb 05                	jmp    c010ba0c <do_kill+0x63>
    }
    return -E_INVAL;
c010ba07:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010ba0c:	c9                   	leave  
c010ba0d:	c3                   	ret    

c010ba0e <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010ba0e:	55                   	push   %ebp
c010ba0f:	89 e5                	mov    %esp,%ebp
c010ba11:	57                   	push   %edi
c010ba12:	56                   	push   %esi
c010ba13:	53                   	push   %ebx
c010ba14:	83 ec 2c             	sub    $0x2c,%esp
    int ret, len = strlen(name);
c010ba17:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba1a:	89 04 24             	mov    %eax,(%esp)
c010ba1d:	e8 02 10 00 00       	call   c010ca24 <strlen>
c010ba22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010ba25:	b8 04 00 00 00       	mov    $0x4,%eax
c010ba2a:	8b 55 08             	mov    0x8(%ebp),%edx
c010ba2d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010ba30:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010ba33:	8b 75 10             	mov    0x10(%ebp),%esi
c010ba36:	89 f7                	mov    %esi,%edi
c010ba38:	cd 80                	int    $0x80
c010ba3a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010ba3d:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010ba40:	83 c4 2c             	add    $0x2c,%esp
c010ba43:	5b                   	pop    %ebx
c010ba44:	5e                   	pop    %esi
c010ba45:	5f                   	pop    %edi
c010ba46:	5d                   	pop    %ebp
c010ba47:	c3                   	ret    

c010ba48 <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010ba48:	55                   	push   %ebp
c010ba49:	89 e5                	mov    %esp,%ebp
c010ba4b:	83 ec 18             	sub    $0x18,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010ba4e:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010ba53:	8b 40 04             	mov    0x4(%eax),%eax
c010ba56:	c7 44 24 08 da fd 10 	movl   $0xc010fdda,0x8(%esp)
c010ba5d:	c0 
c010ba5e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba62:	c7 04 24 e4 fd 10 c0 	movl   $0xc010fde4,(%esp)
c010ba69:	e8 40 48 ff ff       	call   c01002ae <cprintf>
c010ba6e:	b8 98 79 00 00       	mov    $0x7998,%eax
c010ba73:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ba77:	c7 44 24 04 28 29 1b 	movl   $0xc01b2928,0x4(%esp)
c010ba7e:	c0 
c010ba7f:	c7 04 24 da fd 10 c0 	movl   $0xc010fdda,(%esp)
c010ba86:	e8 83 ff ff ff       	call   c010ba0e <kernel_execve>
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
c010ba8b:	c7 44 24 08 0b fe 10 	movl   $0xc010fe0b,0x8(%esp)
c010ba92:	c0 
c010ba93:	c7 44 24 04 4d 03 00 	movl   $0x34d,0x4(%esp)
c010ba9a:	00 
c010ba9b:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010baa2:	e8 5e 49 ff ff       	call   c0100405 <__panic>

c010baa7 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010baa7:	55                   	push   %ebp
c010baa8:	89 e5                	mov    %esp,%ebp
c010baaa:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010baad:	e8 9a ba ff ff       	call   c010754c <nr_free_pages>
c010bab2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010bab5:	e8 f3 96 ff ff       	call   c01051ad <kallocated>
c010baba:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010babd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010bac4:	00 
c010bac5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bacc:	00 
c010bacd:	c7 04 24 48 ba 10 c0 	movl   $0xc010ba48,(%esp)
c010bad4:	e8 cf ee ff ff       	call   c010a9a8 <kernel_thread>
c010bad9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010badc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010bae0:	7f 1c                	jg     c010bafe <init_main+0x57>
        panic("create user_main failed.\n");
c010bae2:	c7 44 24 08 25 fe 10 	movl   $0xc010fe25,0x8(%esp)
c010bae9:	c0 
c010baea:	c7 44 24 04 58 03 00 	movl   $0x358,0x4(%esp)
c010baf1:	00 
c010baf2:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010baf9:	e8 07 49 ff ff       	call   c0100405 <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010bafe:	e8 b2 d9 ff ff       	call   c01094b5 <check_sync>

    while (do_wait(0, NULL) == 0) {
c010bb03:	eb 05                	jmp    c010bb0a <init_main+0x63>
        schedule();
c010bb05:	e8 9c 05 00 00       	call   c010c0a6 <schedule>
    while (do_wait(0, NULL) == 0) {
c010bb0a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bb11:	00 
c010bb12:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010bb19:	e8 eb fc ff ff       	call   c010b809 <do_wait>
c010bb1e:	85 c0                	test   %eax,%eax
c010bb20:	74 e3                	je     c010bb05 <init_main+0x5e>
    }

    cprintf("all user-mode processes have quit.\n");
c010bb22:	c7 04 24 40 fe 10 c0 	movl   $0xc010fe40,(%esp)
c010bb29:	e8 80 47 ff ff       	call   c01002ae <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010bb2e:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010bb33:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010bb39:	85 c0                	test   %eax,%eax
c010bb3b:	75 1e                	jne    c010bb5b <init_main+0xb4>
c010bb3d:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010bb42:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010bb48:	85 c0                	test   %eax,%eax
c010bb4a:	75 0f                	jne    c010bb5b <init_main+0xb4>
c010bb4c:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010bb51:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bb57:	85 c0                	test   %eax,%eax
c010bb59:	74 24                	je     c010bb7f <init_main+0xd8>
c010bb5b:	c7 44 24 0c 64 fe 10 	movl   $0xc010fe64,0xc(%esp)
c010bb62:	c0 
c010bb63:	c7 44 24 08 e1 fb 10 	movl   $0xc010fbe1,0x8(%esp)
c010bb6a:	c0 
c010bb6b:	c7 44 24 04 62 03 00 	movl   $0x362,0x4(%esp)
c010bb72:	00 
c010bb73:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010bb7a:	e8 86 48 ff ff       	call   c0100405 <__panic>
    assert(nr_process == 2);
c010bb7f:	a1 40 70 1c c0       	mov    0xc01c7040,%eax
c010bb84:	83 f8 02             	cmp    $0x2,%eax
c010bb87:	74 24                	je     c010bbad <init_main+0x106>
c010bb89:	c7 44 24 0c af fe 10 	movl   $0xc010feaf,0xc(%esp)
c010bb90:	c0 
c010bb91:	c7 44 24 08 e1 fb 10 	movl   $0xc010fbe1,0x8(%esp)
c010bb98:	c0 
c010bb99:	c7 44 24 04 63 03 00 	movl   $0x363,0x4(%esp)
c010bba0:	00 
c010bba1:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010bba8:	e8 58 48 ff ff       	call   c0100405 <__panic>
c010bbad:	c7 45 e8 9c 72 1c c0 	movl   $0xc01c729c,-0x18(%ebp)
c010bbb4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bbb7:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010bbba:	8b 15 24 50 1c c0    	mov    0xc01c5024,%edx
c010bbc0:	83 c2 7c             	add    $0x7c,%edx
c010bbc3:	39 d0                	cmp    %edx,%eax
c010bbc5:	74 24                	je     c010bbeb <init_main+0x144>
c010bbc7:	c7 44 24 0c c0 fe 10 	movl   $0xc010fec0,0xc(%esp)
c010bbce:	c0 
c010bbcf:	c7 44 24 08 e1 fb 10 	movl   $0xc010fbe1,0x8(%esp)
c010bbd6:	c0 
c010bbd7:	c7 44 24 04 64 03 00 	movl   $0x364,0x4(%esp)
c010bbde:	00 
c010bbdf:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010bbe6:	e8 1a 48 ff ff       	call   c0100405 <__panic>
c010bbeb:	c7 45 e4 9c 72 1c c0 	movl   $0xc01c729c,-0x1c(%ebp)
    return listelm->prev;
c010bbf2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bbf5:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010bbf7:	8b 15 24 50 1c c0    	mov    0xc01c5024,%edx
c010bbfd:	83 c2 7c             	add    $0x7c,%edx
c010bc00:	39 d0                	cmp    %edx,%eax
c010bc02:	74 24                	je     c010bc28 <init_main+0x181>
c010bc04:	c7 44 24 0c f0 fe 10 	movl   $0xc010fef0,0xc(%esp)
c010bc0b:	c0 
c010bc0c:	c7 44 24 08 e1 fb 10 	movl   $0xc010fbe1,0x8(%esp)
c010bc13:	c0 
c010bc14:	c7 44 24 04 65 03 00 	movl   $0x365,0x4(%esp)
c010bc1b:	00 
c010bc1c:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010bc23:	e8 dd 47 ff ff       	call   c0100405 <__panic>

    cprintf("init check memory pass.\n");
c010bc28:	c7 04 24 20 ff 10 c0 	movl   $0xc010ff20,(%esp)
c010bc2f:	e8 7a 46 ff ff       	call   c01002ae <cprintf>
    return 0;
c010bc34:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bc39:	c9                   	leave  
c010bc3a:	c3                   	ret    

c010bc3b <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010bc3b:	55                   	push   %ebp
c010bc3c:	89 e5                	mov    %esp,%ebp
c010bc3e:	83 ec 28             	sub    $0x28,%esp
c010bc41:	c7 45 ec 9c 72 1c c0 	movl   $0xc01c729c,-0x14(%ebp)
    elm->prev = elm->next = elm;
c010bc48:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc4b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bc4e:	89 50 04             	mov    %edx,0x4(%eax)
c010bc51:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc54:	8b 50 04             	mov    0x4(%eax),%edx
c010bc57:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc5a:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010bc5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010bc63:	eb 26                	jmp    c010bc8b <proc_init+0x50>
        list_init(hash_list + i);
c010bc65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc68:	c1 e0 03             	shl    $0x3,%eax
c010bc6b:	05 40 50 1c c0       	add    $0xc01c5040,%eax
c010bc70:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010bc73:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bc76:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010bc79:	89 50 04             	mov    %edx,0x4(%eax)
c010bc7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bc7f:	8b 50 04             	mov    0x4(%eax),%edx
c010bc82:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bc85:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010bc87:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010bc8b:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010bc92:	7e d1                	jle    c010bc65 <proc_init+0x2a>
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010bc94:	e8 fb e6 ff ff       	call   c010a394 <alloc_proc>
c010bc99:	a3 20 50 1c c0       	mov    %eax,0xc01c5020
c010bc9e:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010bca3:	85 c0                	test   %eax,%eax
c010bca5:	75 1c                	jne    c010bcc3 <proc_init+0x88>
        panic("cannot alloc idleproc.\n");
c010bca7:	c7 44 24 08 39 ff 10 	movl   $0xc010ff39,0x8(%esp)
c010bcae:	c0 
c010bcaf:	c7 44 24 04 77 03 00 	movl   $0x377,0x4(%esp)
c010bcb6:	00 
c010bcb7:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010bcbe:	e8 42 47 ff ff       	call   c0100405 <__panic>
    }

    idleproc->pid = 0;
c010bcc3:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010bcc8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010bccf:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010bcd4:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010bcda:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010bcdf:	ba 00 f0 12 c0       	mov    $0xc012f000,%edx
c010bce4:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010bce7:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010bcec:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010bcf3:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010bcf8:	c7 44 24 04 51 ff 10 	movl   $0xc010ff51,0x4(%esp)
c010bcff:	c0 
c010bd00:	89 04 24             	mov    %eax,(%esp)
c010bd03:	e8 13 e8 ff ff       	call   c010a51b <set_proc_name>
    nr_process ++;
c010bd08:	a1 40 70 1c c0       	mov    0xc01c7040,%eax
c010bd0d:	83 c0 01             	add    $0x1,%eax
c010bd10:	a3 40 70 1c c0       	mov    %eax,0xc01c7040

    current = idleproc;
c010bd15:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010bd1a:	a3 28 50 1c c0       	mov    %eax,0xc01c5028

    int pid = kernel_thread(init_main, NULL, 0);
c010bd1f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010bd26:	00 
c010bd27:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bd2e:	00 
c010bd2f:	c7 04 24 a7 ba 10 c0 	movl   $0xc010baa7,(%esp)
c010bd36:	e8 6d ec ff ff       	call   c010a9a8 <kernel_thread>
c010bd3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010bd3e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bd42:	7f 1c                	jg     c010bd60 <proc_init+0x125>
        panic("create init_main failed.\n");
c010bd44:	c7 44 24 08 56 ff 10 	movl   $0xc010ff56,0x8(%esp)
c010bd4b:	c0 
c010bd4c:	c7 44 24 04 85 03 00 	movl   $0x385,0x4(%esp)
c010bd53:	00 
c010bd54:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010bd5b:	e8 a5 46 ff ff       	call   c0100405 <__panic>
    }

    initproc = find_proc(pid);
c010bd60:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd63:	89 04 24             	mov    %eax,(%esp)
c010bd66:	e8 c9 eb ff ff       	call   c010a934 <find_proc>
c010bd6b:	a3 24 50 1c c0       	mov    %eax,0xc01c5024
    set_proc_name(initproc, "init");
c010bd70:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010bd75:	c7 44 24 04 70 ff 10 	movl   $0xc010ff70,0x4(%esp)
c010bd7c:	c0 
c010bd7d:	89 04 24             	mov    %eax,(%esp)
c010bd80:	e8 96 e7 ff ff       	call   c010a51b <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010bd85:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010bd8a:	85 c0                	test   %eax,%eax
c010bd8c:	74 0c                	je     c010bd9a <proc_init+0x15f>
c010bd8e:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010bd93:	8b 40 04             	mov    0x4(%eax),%eax
c010bd96:	85 c0                	test   %eax,%eax
c010bd98:	74 24                	je     c010bdbe <proc_init+0x183>
c010bd9a:	c7 44 24 0c 78 ff 10 	movl   $0xc010ff78,0xc(%esp)
c010bda1:	c0 
c010bda2:	c7 44 24 08 e1 fb 10 	movl   $0xc010fbe1,0x8(%esp)
c010bda9:	c0 
c010bdaa:	c7 44 24 04 8b 03 00 	movl   $0x38b,0x4(%esp)
c010bdb1:	00 
c010bdb2:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010bdb9:	e8 47 46 ff ff       	call   c0100405 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010bdbe:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010bdc3:	85 c0                	test   %eax,%eax
c010bdc5:	74 0d                	je     c010bdd4 <proc_init+0x199>
c010bdc7:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010bdcc:	8b 40 04             	mov    0x4(%eax),%eax
c010bdcf:	83 f8 01             	cmp    $0x1,%eax
c010bdd2:	74 24                	je     c010bdf8 <proc_init+0x1bd>
c010bdd4:	c7 44 24 0c a0 ff 10 	movl   $0xc010ffa0,0xc(%esp)
c010bddb:	c0 
c010bddc:	c7 44 24 08 e1 fb 10 	movl   $0xc010fbe1,0x8(%esp)
c010bde3:	c0 
c010bde4:	c7 44 24 04 8c 03 00 	movl   $0x38c,0x4(%esp)
c010bdeb:	00 
c010bdec:	c7 04 24 b4 fb 10 c0 	movl   $0xc010fbb4,(%esp)
c010bdf3:	e8 0d 46 ff ff       	call   c0100405 <__panic>
}
c010bdf8:	c9                   	leave  
c010bdf9:	c3                   	ret    

c010bdfa <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010bdfa:	55                   	push   %ebp
c010bdfb:	89 e5                	mov    %esp,%ebp
c010bdfd:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010be00:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010be05:	8b 40 10             	mov    0x10(%eax),%eax
c010be08:	85 c0                	test   %eax,%eax
c010be0a:	74 07                	je     c010be13 <cpu_idle+0x19>
            schedule();
c010be0c:	e8 95 02 00 00       	call   c010c0a6 <schedule>
        }
    }
c010be11:	eb ed                	jmp    c010be00 <cpu_idle+0x6>
c010be13:	eb eb                	jmp    c010be00 <cpu_idle+0x6>

c010be15 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010be15:	55                   	push   %ebp
c010be16:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010be18:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010be1c:	75 11                	jne    c010be2f <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010be1e:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010be23:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010be2a:	00 00 00 
c010be2d:	eb 0e                	jmp    c010be3d <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010be2f:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010be34:	8b 55 08             	mov    0x8(%ebp),%edx
c010be37:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010be3d:	5d                   	pop    %ebp
c010be3e:	c3                   	ret    

c010be3f <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010be3f:	55                   	push   %ebp
c010be40:	89 e5                	mov    %esp,%ebp
c010be42:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010be45:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010be49:	75 07                	jne    c010be52 <do_sleep+0x13>
        return 0;
c010be4b:	b8 00 00 00 00       	mov    $0x0,%eax
c010be50:	eb 6b                	jmp    c010bebd <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010be52:	e8 66 e3 ff ff       	call   c010a1bd <__intr_save>
c010be57:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010be5a:	8b 55 08             	mov    0x8(%ebp),%edx
c010be5d:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010be62:	89 54 24 08          	mov    %edx,0x8(%esp)
c010be66:	89 44 24 04          	mov    %eax,0x4(%esp)
c010be6a:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010be6d:	89 04 24             	mov    %eax,(%esp)
c010be70:	e8 0f e3 ff ff       	call   c010a184 <timer_init>
c010be75:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010be78:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010be7d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010be83:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010be88:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010be8f:	00 00 80 
    add_timer(timer);
c010be92:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be95:	89 04 24             	mov    %eax,(%esp)
c010be98:	e8 94 02 00 00       	call   c010c131 <add_timer>
    local_intr_restore(intr_flag);
c010be9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bea0:	89 04 24             	mov    %eax,(%esp)
c010bea3:	e8 3f e3 ff ff       	call   c010a1e7 <__intr_restore>

    schedule();
c010bea8:	e8 f9 01 00 00       	call   c010c0a6 <schedule>

    del_timer(timer);
c010bead:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010beb0:	89 04 24             	mov    %eax,(%esp)
c010beb3:	e8 b7 03 00 00       	call   c010c26f <del_timer>
    return 0;
c010beb8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bebd:	c9                   	leave  
c010bebe:	c3                   	ret    

c010bebf <__intr_save>:
__intr_save(void) {
c010bebf:	55                   	push   %ebp
c010bec0:	89 e5                	mov    %esp,%ebp
c010bec2:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010bec5:	9c                   	pushf  
c010bec6:	58                   	pop    %eax
c010bec7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010beca:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010becd:	25 00 02 00 00       	and    $0x200,%eax
c010bed2:	85 c0                	test   %eax,%eax
c010bed4:	74 0c                	je     c010bee2 <__intr_save+0x23>
        intr_disable();
c010bed6:	e8 3f 63 ff ff       	call   c010221a <intr_disable>
        return 1;
c010bedb:	b8 01 00 00 00       	mov    $0x1,%eax
c010bee0:	eb 05                	jmp    c010bee7 <__intr_save+0x28>
    return 0;
c010bee2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bee7:	c9                   	leave  
c010bee8:	c3                   	ret    

c010bee9 <__intr_restore>:
__intr_restore(bool flag) {
c010bee9:	55                   	push   %ebp
c010beea:	89 e5                	mov    %esp,%ebp
c010beec:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010beef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bef3:	74 05                	je     c010befa <__intr_restore+0x11>
        intr_enable();
c010bef5:	e8 1a 63 ff ff       	call   c0102214 <intr_enable>
}
c010befa:	c9                   	leave  
c010befb:	c3                   	ret    

c010befc <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010befc:	55                   	push   %ebp
c010befd:	89 e5                	mov    %esp,%ebp
c010beff:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010bf02:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010bf07:	39 45 08             	cmp    %eax,0x8(%ebp)
c010bf0a:	74 1a                	je     c010bf26 <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010bf0c:	a1 9c 70 1c c0       	mov    0xc01c709c,%eax
c010bf11:	8b 40 08             	mov    0x8(%eax),%eax
c010bf14:	8b 15 a0 70 1c c0    	mov    0xc01c70a0,%edx
c010bf1a:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010bf1d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010bf21:	89 14 24             	mov    %edx,(%esp)
c010bf24:	ff d0                	call   *%eax
    }
}
c010bf26:	c9                   	leave  
c010bf27:	c3                   	ret    

c010bf28 <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010bf28:	55                   	push   %ebp
c010bf29:	89 e5                	mov    %esp,%ebp
c010bf2b:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010bf2e:	a1 9c 70 1c c0       	mov    0xc01c709c,%eax
c010bf33:	8b 40 0c             	mov    0xc(%eax),%eax
c010bf36:	8b 15 a0 70 1c c0    	mov    0xc01c70a0,%edx
c010bf3c:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010bf3f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010bf43:	89 14 24             	mov    %edx,(%esp)
c010bf46:	ff d0                	call   *%eax
}
c010bf48:	c9                   	leave  
c010bf49:	c3                   	ret    

c010bf4a <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010bf4a:	55                   	push   %ebp
c010bf4b:	89 e5                	mov    %esp,%ebp
c010bf4d:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010bf50:	a1 9c 70 1c c0       	mov    0xc01c709c,%eax
c010bf55:	8b 40 10             	mov    0x10(%eax),%eax
c010bf58:	8b 15 a0 70 1c c0    	mov    0xc01c70a0,%edx
c010bf5e:	89 14 24             	mov    %edx,(%esp)
c010bf61:	ff d0                	call   *%eax
}
c010bf63:	c9                   	leave  
c010bf64:	c3                   	ret    

c010bf65 <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010bf65:	55                   	push   %ebp
c010bf66:	89 e5                	mov    %esp,%ebp
c010bf68:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010bf6b:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010bf70:	39 45 08             	cmp    %eax,0x8(%ebp)
c010bf73:	74 1c                	je     c010bf91 <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010bf75:	a1 9c 70 1c c0       	mov    0xc01c709c,%eax
c010bf7a:	8b 40 14             	mov    0x14(%eax),%eax
c010bf7d:	8b 15 a0 70 1c c0    	mov    0xc01c70a0,%edx
c010bf83:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010bf86:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010bf8a:	89 14 24             	mov    %edx,(%esp)
c010bf8d:	ff d0                	call   *%eax
c010bf8f:	eb 0a                	jmp    c010bf9b <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010bf91:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf94:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010bf9b:	c9                   	leave  
c010bf9c:	c3                   	ret    

c010bf9d <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010bf9d:	55                   	push   %ebp
c010bf9e:	89 e5                	mov    %esp,%ebp
c010bfa0:	83 ec 28             	sub    $0x28,%esp
c010bfa3:	c7 45 f4 94 70 1c c0 	movl   $0xc01c7094,-0xc(%ebp)
c010bfaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfad:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bfb0:	89 50 04             	mov    %edx,0x4(%eax)
c010bfb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfb6:	8b 50 04             	mov    0x4(%eax),%edx
c010bfb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfbc:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010bfbe:	c7 05 9c 70 1c c0 84 	movl   $0xc0131a84,0xc01c709c
c010bfc5:	1a 13 c0 

    rq = &__rq;
c010bfc8:	c7 05 a0 70 1c c0 a4 	movl   $0xc01c70a4,0xc01c70a0
c010bfcf:	70 1c c0 
    rq->max_time_slice = 5;
c010bfd2:	a1 a0 70 1c c0       	mov    0xc01c70a0,%eax
c010bfd7:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010bfde:	a1 9c 70 1c c0       	mov    0xc01c709c,%eax
c010bfe3:	8b 40 04             	mov    0x4(%eax),%eax
c010bfe6:	8b 15 a0 70 1c c0    	mov    0xc01c70a0,%edx
c010bfec:	89 14 24             	mov    %edx,(%esp)
c010bfef:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010bff1:	a1 9c 70 1c c0       	mov    0xc01c709c,%eax
c010bff6:	8b 00                	mov    (%eax),%eax
c010bff8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bffc:	c7 04 24 c8 ff 10 c0 	movl   $0xc010ffc8,(%esp)
c010c003:	e8 a6 42 ff ff       	call   c01002ae <cprintf>
}
c010c008:	c9                   	leave  
c010c009:	c3                   	ret    

c010c00a <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010c00a:	55                   	push   %ebp
c010c00b:	89 e5                	mov    %esp,%ebp
c010c00d:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010c010:	8b 45 08             	mov    0x8(%ebp),%eax
c010c013:	8b 00                	mov    (%eax),%eax
c010c015:	83 f8 03             	cmp    $0x3,%eax
c010c018:	75 24                	jne    c010c03e <wakeup_proc+0x34>
c010c01a:	c7 44 24 0c d9 ff 10 	movl   $0xc010ffd9,0xc(%esp)
c010c021:	c0 
c010c022:	c7 44 24 08 f4 ff 10 	movl   $0xc010fff4,0x8(%esp)
c010c029:	c0 
c010c02a:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010c031:	00 
c010c032:	c7 04 24 09 00 11 c0 	movl   $0xc0110009,(%esp)
c010c039:	e8 c7 43 ff ff       	call   c0100405 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010c03e:	e8 7c fe ff ff       	call   c010bebf <__intr_save>
c010c043:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010c046:	8b 45 08             	mov    0x8(%ebp),%eax
c010c049:	8b 00                	mov    (%eax),%eax
c010c04b:	83 f8 02             	cmp    $0x2,%eax
c010c04e:	74 2d                	je     c010c07d <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010c050:	8b 45 08             	mov    0x8(%ebp),%eax
c010c053:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010c059:	8b 45 08             	mov    0x8(%ebp),%eax
c010c05c:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010c063:	00 00 00 
            if (proc != current) {
c010c066:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010c06b:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c06e:	74 29                	je     c010c099 <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010c070:	8b 45 08             	mov    0x8(%ebp),%eax
c010c073:	89 04 24             	mov    %eax,(%esp)
c010c076:	e8 81 fe ff ff       	call   c010befc <sched_class_enqueue>
c010c07b:	eb 1c                	jmp    c010c099 <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010c07d:	c7 44 24 08 1f 00 11 	movl   $0xc011001f,0x8(%esp)
c010c084:	c0 
c010c085:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c010c08c:	00 
c010c08d:	c7 04 24 09 00 11 c0 	movl   $0xc0110009,(%esp)
c010c094:	e8 e9 43 ff ff       	call   c0100482 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010c099:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c09c:	89 04 24             	mov    %eax,(%esp)
c010c09f:	e8 45 fe ff ff       	call   c010bee9 <__intr_restore>
}
c010c0a4:	c9                   	leave  
c010c0a5:	c3                   	ret    

c010c0a6 <schedule>:

void
schedule(void) {
c010c0a6:	55                   	push   %ebp
c010c0a7:	89 e5                	mov    %esp,%ebp
c010c0a9:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010c0ac:	e8 0e fe ff ff       	call   c010bebf <__intr_save>
c010c0b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010c0b4:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010c0b9:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010c0c0:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010c0c5:	8b 00                	mov    (%eax),%eax
c010c0c7:	83 f8 02             	cmp    $0x2,%eax
c010c0ca:	75 0d                	jne    c010c0d9 <schedule+0x33>
            sched_class_enqueue(current);
c010c0cc:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010c0d1:	89 04 24             	mov    %eax,(%esp)
c010c0d4:	e8 23 fe ff ff       	call   c010befc <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010c0d9:	e8 6c fe ff ff       	call   c010bf4a <sched_class_pick_next>
c010c0de:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c0e1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c0e5:	74 0b                	je     c010c0f2 <schedule+0x4c>
            sched_class_dequeue(next);
c010c0e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0ea:	89 04 24             	mov    %eax,(%esp)
c010c0ed:	e8 36 fe ff ff       	call   c010bf28 <sched_class_dequeue>
        }
        if (next == NULL) {
c010c0f2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c0f6:	75 08                	jne    c010c100 <schedule+0x5a>
            next = idleproc;
c010c0f8:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010c0fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010c100:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c103:	8b 40 08             	mov    0x8(%eax),%eax
c010c106:	8d 50 01             	lea    0x1(%eax),%edx
c010c109:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c10c:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010c10f:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010c114:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010c117:	74 0b                	je     c010c124 <schedule+0x7e>
            proc_run(next);
c010c119:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c11c:	89 04 24             	mov    %eax,(%esp)
c010c11f:	e8 cf e6 ff ff       	call   c010a7f3 <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010c124:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c127:	89 04 24             	mov    %eax,(%esp)
c010c12a:	e8 ba fd ff ff       	call   c010bee9 <__intr_restore>
}
c010c12f:	c9                   	leave  
c010c130:	c3                   	ret    

c010c131 <add_timer>:

// add timer to timer_list
void
add_timer(timer_t *timer) {
c010c131:	55                   	push   %ebp
c010c132:	89 e5                	mov    %esp,%ebp
c010c134:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c137:	e8 83 fd ff ff       	call   c010bebf <__intr_save>
c010c13c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010c13f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c142:	8b 00                	mov    (%eax),%eax
c010c144:	85 c0                	test   %eax,%eax
c010c146:	74 0a                	je     c010c152 <add_timer+0x21>
c010c148:	8b 45 08             	mov    0x8(%ebp),%eax
c010c14b:	8b 40 04             	mov    0x4(%eax),%eax
c010c14e:	85 c0                	test   %eax,%eax
c010c150:	75 24                	jne    c010c176 <add_timer+0x45>
c010c152:	c7 44 24 0c 3c 00 11 	movl   $0xc011003c,0xc(%esp)
c010c159:	c0 
c010c15a:	c7 44 24 08 f4 ff 10 	movl   $0xc010fff4,0x8(%esp)
c010c161:	c0 
c010c162:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010c169:	00 
c010c16a:	c7 04 24 09 00 11 c0 	movl   $0xc0110009,(%esp)
c010c171:	e8 8f 42 ff ff       	call   c0100405 <__panic>
        assert(list_empty(&(timer->timer_link)));
c010c176:	8b 45 08             	mov    0x8(%ebp),%eax
c010c179:	83 c0 08             	add    $0x8,%eax
c010c17c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return list->next == list;
c010c17f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c182:	8b 40 04             	mov    0x4(%eax),%eax
c010c185:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010c188:	0f 94 c0             	sete   %al
c010c18b:	0f b6 c0             	movzbl %al,%eax
c010c18e:	85 c0                	test   %eax,%eax
c010c190:	75 24                	jne    c010c1b6 <add_timer+0x85>
c010c192:	c7 44 24 0c 68 00 11 	movl   $0xc0110068,0xc(%esp)
c010c199:	c0 
c010c19a:	c7 44 24 08 f4 ff 10 	movl   $0xc010fff4,0x8(%esp)
c010c1a1:	c0 
c010c1a2:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c010c1a9:	00 
c010c1aa:	c7 04 24 09 00 11 c0 	movl   $0xc0110009,(%esp)
c010c1b1:	e8 4f 42 ff ff       	call   c0100405 <__panic>
c010c1b6:	c7 45 e4 94 70 1c c0 	movl   $0xc01c7094,-0x1c(%ebp)
    return listelm->next;
c010c1bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c1c0:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010c1c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010c1c6:	eb 4a                	jmp    c010c212 <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010c1c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1cb:	83 e8 08             	sub    $0x8,%eax
c010c1ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010c1d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1d4:	8b 10                	mov    (%eax),%edx
c010c1d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c1d9:	8b 00                	mov    (%eax),%eax
c010c1db:	39 c2                	cmp    %eax,%edx
c010c1dd:	73 13                	jae    c010c1f2 <add_timer+0xc1>
                next->expires -= timer->expires;
c010c1df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c1e2:	8b 10                	mov    (%eax),%edx
c010c1e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1e7:	8b 00                	mov    (%eax),%eax
c010c1e9:	29 c2                	sub    %eax,%edx
c010c1eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c1ee:	89 10                	mov    %edx,(%eax)
                break;
c010c1f0:	eb 29                	jmp    c010c21b <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010c1f2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1f5:	8b 10                	mov    (%eax),%edx
c010c1f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c1fa:	8b 00                	mov    (%eax),%eax
c010c1fc:	29 c2                	sub    %eax,%edx
c010c1fe:	8b 45 08             	mov    0x8(%ebp),%eax
c010c201:	89 10                	mov    %edx,(%eax)
c010c203:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c206:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c209:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c20c:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010c20f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010c212:	81 7d f4 94 70 1c c0 	cmpl   $0xc01c7094,-0xc(%ebp)
c010c219:	75 ad                	jne    c010c1c8 <add_timer+0x97>
        }
        list_add_before(le, &(timer->timer_link));
c010c21b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c21e:	8d 50 08             	lea    0x8(%eax),%edx
c010c221:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c224:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010c227:	89 55 d8             	mov    %edx,-0x28(%ebp)
    __list_add(elm, listelm->prev, listelm);
c010c22a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c22d:	8b 00                	mov    (%eax),%eax
c010c22f:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010c232:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010c235:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c238:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c23b:	89 45 cc             	mov    %eax,-0x34(%ebp)
    prev->next = next->prev = elm;
c010c23e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c241:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c244:	89 10                	mov    %edx,(%eax)
c010c246:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c249:	8b 10                	mov    (%eax),%edx
c010c24b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c24e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c251:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c254:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010c257:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c25a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c25d:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010c260:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010c262:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c265:	89 04 24             	mov    %eax,(%esp)
c010c268:	e8 7c fc ff ff       	call   c010bee9 <__intr_restore>
}
c010c26d:	c9                   	leave  
c010c26e:	c3                   	ret    

c010c26f <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010c26f:	55                   	push   %ebp
c010c270:	89 e5                	mov    %esp,%ebp
c010c272:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c275:	e8 45 fc ff ff       	call   c010bebf <__intr_save>
c010c27a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010c27d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c280:	83 c0 08             	add    $0x8,%eax
c010c283:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return list->next == list;
c010c286:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c289:	8b 40 04             	mov    0x4(%eax),%eax
c010c28c:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010c28f:	0f 94 c0             	sete   %al
c010c292:	0f b6 c0             	movzbl %al,%eax
c010c295:	85 c0                	test   %eax,%eax
c010c297:	0f 85 89 00 00 00    	jne    c010c326 <del_timer+0xb7>
            if (timer->expires != 0) {
c010c29d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2a0:	8b 00                	mov    (%eax),%eax
c010c2a2:	85 c0                	test   %eax,%eax
c010c2a4:	74 35                	je     c010c2db <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010c2a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2a9:	83 c0 08             	add    $0x8,%eax
c010c2ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return listelm->next;
c010c2af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c2b2:	8b 40 04             	mov    0x4(%eax),%eax
c010c2b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010c2b8:	81 7d f0 94 70 1c c0 	cmpl   $0xc01c7094,-0x10(%ebp)
c010c2bf:	74 1a                	je     c010c2db <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010c2c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c2c4:	83 e8 08             	sub    $0x8,%eax
c010c2c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010c2ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c2cd:	8b 10                	mov    (%eax),%edx
c010c2cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2d2:	8b 00                	mov    (%eax),%eax
c010c2d4:	01 c2                	add    %eax,%edx
c010c2d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c2d9:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010c2db:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2de:	83 c0 08             	add    $0x8,%eax
c010c2e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c2e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c2e7:	89 45 dc             	mov    %eax,-0x24(%ebp)
    __list_del(listelm->prev, listelm->next);
c010c2ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c2ed:	8b 40 04             	mov    0x4(%eax),%eax
c010c2f0:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c2f3:	8b 12                	mov    (%edx),%edx
c010c2f5:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010c2f8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    prev->next = next;
c010c2fb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c2fe:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c301:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c304:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c307:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010c30a:	89 10                	mov    %edx,(%eax)
c010c30c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c30f:	89 45 d0             	mov    %eax,-0x30(%ebp)
    elm->prev = elm->next = elm;
c010c312:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c315:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010c318:	89 50 04             	mov    %edx,0x4(%eax)
c010c31b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c31e:	8b 50 04             	mov    0x4(%eax),%edx
c010c321:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c324:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010c326:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c329:	89 04 24             	mov    %eax,(%esp)
c010c32c:	e8 b8 fb ff ff       	call   c010bee9 <__intr_restore>
}
c010c331:	c9                   	leave  
c010c332:	c3                   	ret    

c010c333 <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010c333:	55                   	push   %ebp
c010c334:	89 e5                	mov    %esp,%ebp
c010c336:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c339:	e8 81 fb ff ff       	call   c010bebf <__intr_save>
c010c33e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c341:	c7 45 e4 94 70 1c c0 	movl   $0xc01c7094,-0x1c(%ebp)
    return listelm->next;
c010c348:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c34b:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010c34e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010c351:	81 7d f4 94 70 1c c0 	cmpl   $0xc01c7094,-0xc(%ebp)
c010c358:	0f 84 fb 00 00 00    	je     c010c459 <run_timer_list+0x126>
            timer_t *timer = le2timer(le, timer_link);
c010c35e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c361:	83 e8 08             	sub    $0x8,%eax
c010c364:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010c367:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c36a:	8b 00                	mov    (%eax),%eax
c010c36c:	85 c0                	test   %eax,%eax
c010c36e:	75 24                	jne    c010c394 <run_timer_list+0x61>
c010c370:	c7 44 24 0c 89 00 11 	movl   $0xc0110089,0xc(%esp)
c010c377:	c0 
c010c378:	c7 44 24 08 f4 ff 10 	movl   $0xc010fff4,0x8(%esp)
c010c37f:	c0 
c010c380:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010c387:	00 
c010c388:	c7 04 24 09 00 11 c0 	movl   $0xc0110009,(%esp)
c010c38f:	e8 71 40 ff ff       	call   c0100405 <__panic>
            timer->expires --;
c010c394:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c397:	8b 00                	mov    (%eax),%eax
c010c399:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c39c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c39f:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010c3a1:	e9 a6 00 00 00       	jmp    c010c44c <run_timer_list+0x119>
c010c3a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c3a9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c3ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c3af:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010c3b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010c3b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c3b8:	8b 40 04             	mov    0x4(%eax),%eax
c010c3bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010c3be:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c3c1:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c3c7:	85 c0                	test   %eax,%eax
c010c3c9:	74 31                	je     c010c3fc <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010c3cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c3ce:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c3d4:	85 c0                	test   %eax,%eax
c010c3d6:	78 4a                	js     c010c422 <run_timer_list+0xef>
c010c3d8:	c7 44 24 0c a0 00 11 	movl   $0xc01100a0,0xc(%esp)
c010c3df:	c0 
c010c3e0:	c7 44 24 08 f4 ff 10 	movl   $0xc010fff4,0x8(%esp)
c010c3e7:	c0 
c010c3e8:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010c3ef:	00 
c010c3f0:	c7 04 24 09 00 11 c0 	movl   $0xc0110009,(%esp)
c010c3f7:	e8 09 40 ff ff       	call   c0100405 <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010c3fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c3ff:	8b 40 04             	mov    0x4(%eax),%eax
c010c402:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c406:	c7 44 24 08 c4 00 11 	movl   $0xc01100c4,0x8(%esp)
c010c40d:	c0 
c010c40e:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c010c415:	00 
c010c416:	c7 04 24 09 00 11 c0 	movl   $0xc0110009,(%esp)
c010c41d:	e8 60 40 ff ff       	call   c0100482 <__warn>
                }
                wakeup_proc(proc);
c010c422:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c425:	89 04 24             	mov    %eax,(%esp)
c010c428:	e8 dd fb ff ff       	call   c010c00a <wakeup_proc>
                del_timer(timer);
c010c42d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c430:	89 04 24             	mov    %eax,(%esp)
c010c433:	e8 37 fe ff ff       	call   c010c26f <del_timer>
                if (le == &timer_list) {
c010c438:	81 7d f4 94 70 1c c0 	cmpl   $0xc01c7094,-0xc(%ebp)
c010c43f:	75 02                	jne    c010c443 <run_timer_list+0x110>
                    break;
c010c441:	eb 16                	jmp    c010c459 <run_timer_list+0x126>
                }
                timer = le2timer(le, timer_link);
c010c443:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c446:	83 e8 08             	sub    $0x8,%eax
c010c449:	89 45 f0             	mov    %eax,-0x10(%ebp)
            while (timer->expires == 0) {
c010c44c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c44f:	8b 00                	mov    (%eax),%eax
c010c451:	85 c0                	test   %eax,%eax
c010c453:	0f 84 4d ff ff ff    	je     c010c3a6 <run_timer_list+0x73>
            }
        }
        sched_class_proc_tick(current);
c010c459:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010c45e:	89 04 24             	mov    %eax,(%esp)
c010c461:	e8 ff fa ff ff       	call   c010bf65 <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010c466:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c469:	89 04 24             	mov    %eax,(%esp)
c010c46c:	e8 78 fa ff ff       	call   c010bee9 <__intr_restore>
}
c010c471:	c9                   	leave  
c010c472:	c3                   	ret    

c010c473 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010c473:	55                   	push   %ebp
c010c474:	89 e5                	mov    %esp,%ebp
c010c476:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010c479:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c47d:	75 08                	jne    c010c487 <skew_heap_merge+0x14>
c010c47f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c482:	e9 bd 00 00 00       	jmp    c010c544 <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010c487:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c48b:	75 08                	jne    c010c495 <skew_heap_merge+0x22>
c010c48d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c490:	e9 af 00 00 00       	jmp    c010c544 <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010c495:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c498:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c49c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c49f:	89 04 24             	mov    %eax,(%esp)
c010c4a2:	8b 45 10             	mov    0x10(%ebp),%eax
c010c4a5:	ff d0                	call   *%eax
c010c4a7:	83 f8 ff             	cmp    $0xffffffff,%eax
c010c4aa:	75 4d                	jne    c010c4f9 <skew_heap_merge+0x86>
     {
          r = a->left;
c010c4ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4af:	8b 40 04             	mov    0x4(%eax),%eax
c010c4b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010c4b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4b8:	8b 40 08             	mov    0x8(%eax),%eax
c010c4bb:	8b 55 10             	mov    0x10(%ebp),%edx
c010c4be:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c4c2:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c4c5:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c4c9:	89 04 24             	mov    %eax,(%esp)
c010c4cc:	e8 a2 ff ff ff       	call   c010c473 <skew_heap_merge>
c010c4d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010c4d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4d7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c4da:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010c4dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c4e3:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010c4e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c4ea:	74 08                	je     c010c4f4 <skew_heap_merge+0x81>
c010c4ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4ef:	8b 55 08             	mov    0x8(%ebp),%edx
c010c4f2:	89 10                	mov    %edx,(%eax)

          return a;
c010c4f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4f7:	eb 4b                	jmp    c010c544 <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010c4f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c4fc:	8b 40 04             	mov    0x4(%eax),%eax
c010c4ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010c502:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c505:	8b 40 08             	mov    0x8(%eax),%eax
c010c508:	8b 55 10             	mov    0x10(%ebp),%edx
c010c50b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c50f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c513:	8b 45 08             	mov    0x8(%ebp),%eax
c010c516:	89 04 24             	mov    %eax,(%esp)
c010c519:	e8 55 ff ff ff       	call   c010c473 <skew_heap_merge>
c010c51e:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010c521:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c524:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c527:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010c52a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c52d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c530:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010c533:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c537:	74 08                	je     c010c541 <skew_heap_merge+0xce>
c010c539:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c53c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c53f:	89 10                	mov    %edx,(%eax)

          return b;
c010c541:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010c544:	c9                   	leave  
c010c545:	c3                   	ret    

c010c546 <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010c546:	55                   	push   %ebp
c010c547:	89 e5                	mov    %esp,%ebp
c010c549:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010c54c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c54f:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c554:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010c557:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c55a:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c55f:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010c562:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c565:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010c56b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c56e:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010c574:	29 c2                	sub    %eax,%edx
c010c576:	89 d0                	mov    %edx,%eax
c010c578:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010c57b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c57f:	7e 07                	jle    c010c588 <proc_stride_comp_f+0x42>
c010c581:	b8 01 00 00 00       	mov    $0x1,%eax
c010c586:	eb 12                	jmp    c010c59a <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010c588:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c58c:	75 07                	jne    c010c595 <proc_stride_comp_f+0x4f>
c010c58e:	b8 00 00 00 00       	mov    $0x0,%eax
c010c593:	eb 05                	jmp    c010c59a <proc_stride_comp_f+0x54>
     else return -1;
c010c595:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010c59a:	c9                   	leave  
c010c59b:	c3                   	ret    

c010c59c <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010c59c:	55                   	push   %ebp
c010c59d:	89 e5                	mov    %esp,%ebp
c010c59f:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE 
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0       
      */
     list_init(&(rq->run_list)); //初始化调度器类   这是双向链表！！！
c010c5a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    elm->prev = elm->next = elm;
c010c5a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c5ab:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c5ae:	89 50 04             	mov    %edx,0x4(%eax)
c010c5b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c5b4:	8b 50 04             	mov    0x4(%eax),%edx
c010c5b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c5ba:	89 10                	mov    %edx,(%eax)
     rq->lab6_run_pool = NULL; //初始化当前进程运行的优先队列为空
c010c5bc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5bf:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
     rq->proc_num = 0; //设置运行队列为空
c010c5c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5c9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    //max_time_slice会被调度的函数初始化（shed.c) 
}
c010c5d0:	c9                   	leave  
c010c5d1:	c3                   	ret    

c010c5d2 <stride_enqueue>:
 * 
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010c5d2:	55                   	push   %ebp
c010c5d3:	89 e5                	mov    %esp,%ebp
c010c5d5:	83 ec 28             	sub    $0x28,%esp
      *         list_add_before: insert  a entry into the last of list   
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
     rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010c5d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c5db:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010c5e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5e4:	8b 40 10             	mov    0x10(%eax),%eax
c010c5e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c5ea:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c5ed:	c7 45 ec 46 c5 10 c0 	movl   $0xc010c546,-0x14(%ebp)
c010c5f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5f7:	89 45 e8             	mov    %eax,-0x18(%ebp)
     a->left = a->right = a->parent = NULL;
c010c5fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c5fd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010c603:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c606:	8b 10                	mov    (%eax),%edx
c010c608:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c60b:	89 50 08             	mov    %edx,0x8(%eax)
c010c60e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c611:	8b 50 08             	mov    0x8(%eax),%edx
c010c614:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c617:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010c61a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c61d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c621:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c624:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c628:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c62b:	89 04 24             	mov    %eax,(%esp)
c010c62e:	e8 40 fe ff ff       	call   c010c473 <skew_heap_merge>
c010c633:	89 c2                	mov    %eax,%edx
c010c635:	8b 45 08             	mov    0x8(%ebp),%eax
c010c638:	89 50 10             	mov    %edx,0x10(%eax)
    //斜堆将进程插入就绪队列
    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010c63b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c63e:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c644:	85 c0                	test   %eax,%eax
c010c646:	74 13                	je     c010c65b <stride_enqueue+0x89>
c010c648:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c64b:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010c651:	8b 45 08             	mov    0x8(%ebp),%eax
c010c654:	8b 40 0c             	mov    0xc(%eax),%eax
c010c657:	39 c2                	cmp    %eax,%edx
c010c659:	7e 0f                	jle    c010c66a <stride_enqueue+0x98>
          proc->time_slice = rq->max_time_slice;//重新指定时间片
c010c65b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c65e:	8b 50 0c             	mov    0xc(%eax),%edx
c010c661:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c664:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     proc->rq = rq;//更新就绪队列
c010c66a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c66d:	8b 55 08             	mov    0x8(%ebp),%edx
c010c670:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
     rq->proc_num ++;//就绪队列中进程数+1
c010c676:	8b 45 08             	mov    0x8(%ebp),%eax
c010c679:	8b 40 08             	mov    0x8(%eax),%eax
c010c67c:	8d 50 01             	lea    0x1(%eax),%edx
c010c67f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c682:	89 50 08             	mov    %edx,0x8(%eax)
}
c010c685:	c9                   	leave  
c010c686:	c3                   	ret    

c010c687 <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010c687:	55                   	push   %ebp
c010c688:	89 e5                	mov    %esp,%ebp
c010c68a:	83 ec 38             	sub    $0x38,%esp
      * (1) remove the proc from rq correctly
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
     rq->lab6_run_pool =skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010c68d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c690:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010c696:	8b 45 08             	mov    0x8(%ebp),%eax
c010c699:	8b 40 10             	mov    0x10(%eax),%eax
c010c69c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c69f:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c6a2:	c7 45 ec 46 c5 10 c0 	movl   $0xc010c546,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010c6a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6ac:	8b 00                	mov    (%eax),%eax
c010c6ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010c6b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6b4:	8b 50 08             	mov    0x8(%eax),%edx
c010c6b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6ba:	8b 40 04             	mov    0x4(%eax),%eax
c010c6bd:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010c6c0:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010c6c4:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c6c8:	89 04 24             	mov    %eax,(%esp)
c010c6cb:	e8 a3 fd ff ff       	call   c010c473 <skew_heap_merge>
c010c6d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010c6d3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010c6d7:	74 08                	je     c010c6e1 <stride_dequeue+0x5a>
c010c6d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c6dc:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c6df:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010c6e1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c6e5:	74 24                	je     c010c70b <stride_dequeue+0x84>
     {
          if (p->left == b)
c010c6e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c6ea:	8b 40 04             	mov    0x4(%eax),%eax
c010c6ed:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010c6f0:	75 0b                	jne    c010c6fd <stride_dequeue+0x76>
               p->left = rep;
c010c6f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c6f5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c6f8:	89 50 04             	mov    %edx,0x4(%eax)
c010c6fb:	eb 09                	jmp    c010c706 <stride_dequeue+0x7f>
          else p->right = rep;
c010c6fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c700:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c703:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010c706:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c709:	eb 03                	jmp    c010c70e <stride_dequeue+0x87>
     }
     else return rep;
c010c70b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c70e:	89 c2                	mov    %eax,%edx
c010c710:	8b 45 08             	mov    0x8(%ebp),%eax
c010c713:	89 50 10             	mov    %edx,0x10(%eax)
     rq->proc_num --;//就绪队列数目-1
c010c716:	8b 45 08             	mov    0x8(%ebp),%eax
c010c719:	8b 40 08             	mov    0x8(%eax),%eax
c010c71c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c71f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c722:	89 50 08             	mov    %edx,0x8(%eax)
}
c010c725:	c9                   	leave  
c010c726:	c3                   	ret    

c010c727 <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010c727:	55                   	push   %ebp
c010c728:	89 e5                	mov    %esp,%ebp
c010c72a:	53                   	push   %ebx
c010c72b:	83 ec 10             	sub    $0x10,%esp
             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
             (1.2) If using list, we have to search list to find the p with minimum stride value
      * (2) update p;s stride value: p->lab6_stride
      * (3) return p
      */
     if (rq->lab6_run_pool == NULL) return NULL; 
c010c72e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c731:	8b 40 10             	mov    0x10(%eax),%eax
c010c734:	85 c0                	test   %eax,%eax
c010c736:	75 07                	jne    c010c73f <stride_pick_next+0x18>
c010c738:	b8 00 00 00 00       	mov    $0x0,%eax
c010c73d:	eb 62                	jmp    c010c7a1 <stride_pick_next+0x7a>
	struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool); // 选择stride值最小的进程-----根节点最小
c010c73f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c742:	8b 40 10             	mov    0x10(%eax),%eax
c010c745:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c74a:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (p->lab6_priority == 0){      //   防止异常   优先级为0  
c010c74d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c750:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010c756:	85 c0                	test   %eax,%eax
c010c758:	75 1a                	jne    c010c774 <stride_pick_next+0x4d>
        p->lab6_stride += BIG_STRIDE;}//就设步长为最大值这样就不会被执行
c010c75a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c75d:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010c763:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c010c769:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c76c:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
c010c772:	eb 2a                	jmp    c010c79e <stride_pick_next+0x77>
     else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010c774:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c777:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010c77d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c780:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010c786:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010c78b:	ba 00 00 00 00       	mov    $0x0,%edx
c010c790:	f7 f3                	div    %ebx
c010c792:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010c795:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c798:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
     return p;
c010c79e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010c7a1:	83 c4 10             	add    $0x10,%esp
c010c7a4:	5b                   	pop    %ebx
c010c7a5:	5d                   	pop    %ebp
c010c7a6:	c3                   	ret    

c010c7a7 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010c7a7:	55                   	push   %ebp
c010c7a8:	89 e5                	mov    %esp,%ebp
     /* LAB6: YOUR CODE */
     if (proc->time_slice > 0) {
c010c7aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c7ad:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c7b3:	85 c0                	test   %eax,%eax
c010c7b5:	7e 15                	jle    c010c7cc <stride_proc_tick+0x25>
          proc->time_slice --;
c010c7b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c7ba:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c7c0:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c7c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c7c6:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     if (proc->time_slice == 0) {
c010c7cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c7cf:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c7d5:	85 c0                	test   %eax,%eax
c010c7d7:	75 0a                	jne    c010c7e3 <stride_proc_tick+0x3c>
          proc->need_resched = 1;
c010c7d9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c7dc:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
     }
}
c010c7e3:	5d                   	pop    %ebp
c010c7e4:	c3                   	ret    

c010c7e5 <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010c7e5:	55                   	push   %ebp
c010c7e6:	89 e5                	mov    %esp,%ebp
c010c7e8:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010c7eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7ee:	8b 00                	mov    (%eax),%eax
c010c7f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010c7f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7f6:	89 04 24             	mov    %eax,(%esp)
c010c7f9:	e8 63 e6 ff ff       	call   c010ae61 <do_exit>
}
c010c7fe:	c9                   	leave  
c010c7ff:	c3                   	ret    

c010c800 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010c800:	55                   	push   %ebp
c010c801:	89 e5                	mov    %esp,%ebp
c010c803:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010c806:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010c80b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c80e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010c811:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c814:	8b 40 44             	mov    0x44(%eax),%eax
c010c817:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010c81a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c81d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c821:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c824:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c828:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010c82f:	e8 09 e5 ff ff       	call   c010ad3d <do_fork>
}
c010c834:	c9                   	leave  
c010c835:	c3                   	ret    

c010c836 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010c836:	55                   	push   %ebp
c010c837:	89 e5                	mov    %esp,%ebp
c010c839:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010c83c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c83f:	8b 00                	mov    (%eax),%eax
c010c841:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010c844:	8b 45 08             	mov    0x8(%ebp),%eax
c010c847:	83 c0 04             	add    $0x4,%eax
c010c84a:	8b 00                	mov    (%eax),%eax
c010c84c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010c84f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c852:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c856:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c859:	89 04 24             	mov    %eax,(%esp)
c010c85c:	e8 a8 ef ff ff       	call   c010b809 <do_wait>
}
c010c861:	c9                   	leave  
c010c862:	c3                   	ret    

c010c863 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010c863:	55                   	push   %ebp
c010c864:	89 e5                	mov    %esp,%ebp
c010c866:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010c869:	8b 45 08             	mov    0x8(%ebp),%eax
c010c86c:	8b 00                	mov    (%eax),%eax
c010c86e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010c871:	8b 45 08             	mov    0x8(%ebp),%eax
c010c874:	8b 40 04             	mov    0x4(%eax),%eax
c010c877:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010c87a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c87d:	83 c0 08             	add    $0x8,%eax
c010c880:	8b 00                	mov    (%eax),%eax
c010c882:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010c885:	8b 45 08             	mov    0x8(%ebp),%eax
c010c888:	8b 40 0c             	mov    0xc(%eax),%eax
c010c88b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010c88e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c891:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c895:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c898:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c89c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c89f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c8a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8a6:	89 04 24             	mov    %eax,(%esp)
c010c8a9:	e8 0f ee ff ff       	call   c010b6bd <do_execve>
}
c010c8ae:	c9                   	leave  
c010c8af:	c3                   	ret    

c010c8b0 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010c8b0:	55                   	push   %ebp
c010c8b1:	89 e5                	mov    %esp,%ebp
c010c8b3:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010c8b6:	e8 38 ef ff ff       	call   c010b7f3 <do_yield>
}
c010c8bb:	c9                   	leave  
c010c8bc:	c3                   	ret    

c010c8bd <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010c8bd:	55                   	push   %ebp
c010c8be:	89 e5                	mov    %esp,%ebp
c010c8c0:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010c8c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8c6:	8b 00                	mov    (%eax),%eax
c010c8c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010c8cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8ce:	89 04 24             	mov    %eax,(%esp)
c010c8d1:	e8 d3 f0 ff ff       	call   c010b9a9 <do_kill>
}
c010c8d6:	c9                   	leave  
c010c8d7:	c3                   	ret    

c010c8d8 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010c8d8:	55                   	push   %ebp
c010c8d9:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010c8db:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010c8e0:	8b 40 04             	mov    0x4(%eax),%eax
}
c010c8e3:	5d                   	pop    %ebp
c010c8e4:	c3                   	ret    

c010c8e5 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010c8e5:	55                   	push   %ebp
c010c8e6:	89 e5                	mov    %esp,%ebp
c010c8e8:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010c8eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8ee:	8b 00                	mov    (%eax),%eax
c010c8f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010c8f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8f6:	89 04 24             	mov    %eax,(%esp)
c010c8f9:	e8 d6 39 ff ff       	call   c01002d4 <cputchar>
    return 0;
c010c8fe:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c903:	c9                   	leave  
c010c904:	c3                   	ret    

c010c905 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010c905:	55                   	push   %ebp
c010c906:	89 e5                	mov    %esp,%ebp
c010c908:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010c90b:	e8 0d c6 ff ff       	call   c0108f1d <print_pgdir>
    return 0;
c010c910:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c915:	c9                   	leave  
c010c916:	c3                   	ret    

c010c917 <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010c917:	55                   	push   %ebp
c010c918:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010c91a:	a1 b8 70 1c c0       	mov    0xc01c70b8,%eax
}
c010c91f:	5d                   	pop    %ebp
c010c920:	c3                   	ret    

c010c921 <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010c921:	55                   	push   %ebp
c010c922:	89 e5                	mov    %esp,%ebp
c010c924:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010c927:	8b 45 08             	mov    0x8(%ebp),%eax
c010c92a:	8b 00                	mov    (%eax),%eax
c010c92c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010c92f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c932:	89 04 24             	mov    %eax,(%esp)
c010c935:	e8 db f4 ff ff       	call   c010be15 <lab6_set_priority>
    return 0;
c010c93a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c93f:	c9                   	leave  
c010c940:	c3                   	ret    

c010c941 <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010c941:	55                   	push   %ebp
c010c942:	89 e5                	mov    %esp,%ebp
c010c944:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010c947:	8b 45 08             	mov    0x8(%ebp),%eax
c010c94a:	8b 00                	mov    (%eax),%eax
c010c94c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010c94f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c952:	89 04 24             	mov    %eax,(%esp)
c010c955:	e8 e5 f4 ff ff       	call   c010be3f <do_sleep>
}
c010c95a:	c9                   	leave  
c010c95b:	c3                   	ret    

c010c95c <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010c95c:	55                   	push   %ebp
c010c95d:	89 e5                	mov    %esp,%ebp
c010c95f:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010c962:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010c967:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c96a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010c96d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c970:	8b 40 1c             	mov    0x1c(%eax),%eax
c010c973:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010c976:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c97a:	78 60                	js     c010c9dc <syscall+0x80>
c010c97c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c97f:	3d ff 00 00 00       	cmp    $0xff,%eax
c010c984:	77 56                	ja     c010c9dc <syscall+0x80>
        if (syscalls[num] != NULL) {
c010c986:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c989:	8b 04 85 a0 1a 13 c0 	mov    -0x3fece560(,%eax,4),%eax
c010c990:	85 c0                	test   %eax,%eax
c010c992:	74 48                	je     c010c9dc <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010c994:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c997:	8b 40 14             	mov    0x14(%eax),%eax
c010c99a:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010c99d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9a0:	8b 40 18             	mov    0x18(%eax),%eax
c010c9a3:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010c9a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9a9:	8b 40 10             	mov    0x10(%eax),%eax
c010c9ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010c9af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9b2:	8b 00                	mov    (%eax),%eax
c010c9b4:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010c9b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9ba:	8b 40 04             	mov    0x4(%eax),%eax
c010c9bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010c9c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c9c3:	8b 04 85 a0 1a 13 c0 	mov    -0x3fece560(,%eax,4),%eax
c010c9ca:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010c9cd:	89 14 24             	mov    %edx,(%esp)
c010c9d0:	ff d0                	call   *%eax
c010c9d2:	89 c2                	mov    %eax,%edx
c010c9d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9d7:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010c9da:	eb 46                	jmp    c010ca22 <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010c9dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9df:	89 04 24             	mov    %eax,(%esp)
c010c9e2:	e8 30 5a ff ff       	call   c0102417 <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010c9e7:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010c9ec:	8d 50 48             	lea    0x48(%eax),%edx
c010c9ef:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010c9f4:	8b 40 04             	mov    0x4(%eax),%eax
c010c9f7:	89 54 24 14          	mov    %edx,0x14(%esp)
c010c9fb:	89 44 24 10          	mov    %eax,0x10(%esp)
c010c9ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca02:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ca06:	c7 44 24 08 f4 00 11 	movl   $0xc01100f4,0x8(%esp)
c010ca0d:	c0 
c010ca0e:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c010ca15:	00 
c010ca16:	c7 04 24 20 01 11 c0 	movl   $0xc0110120,(%esp)
c010ca1d:	e8 e3 39 ff ff       	call   c0100405 <__panic>
            num, current->pid, current->name);
}
c010ca22:	c9                   	leave  
c010ca23:	c3                   	ret    

c010ca24 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010ca24:	55                   	push   %ebp
c010ca25:	89 e5                	mov    %esp,%ebp
c010ca27:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010ca2a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010ca31:	eb 04                	jmp    c010ca37 <strlen+0x13>
        cnt ++;
c010ca33:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*s ++ != '\0') {
c010ca37:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca3a:	8d 50 01             	lea    0x1(%eax),%edx
c010ca3d:	89 55 08             	mov    %edx,0x8(%ebp)
c010ca40:	0f b6 00             	movzbl (%eax),%eax
c010ca43:	84 c0                	test   %al,%al
c010ca45:	75 ec                	jne    c010ca33 <strlen+0xf>
    }
    return cnt;
c010ca47:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010ca4a:	c9                   	leave  
c010ca4b:	c3                   	ret    

c010ca4c <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010ca4c:	55                   	push   %ebp
c010ca4d:	89 e5                	mov    %esp,%ebp
c010ca4f:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010ca52:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010ca59:	eb 04                	jmp    c010ca5f <strnlen+0x13>
        cnt ++;
c010ca5b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010ca5f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ca62:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010ca65:	73 10                	jae    c010ca77 <strnlen+0x2b>
c010ca67:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca6a:	8d 50 01             	lea    0x1(%eax),%edx
c010ca6d:	89 55 08             	mov    %edx,0x8(%ebp)
c010ca70:	0f b6 00             	movzbl (%eax),%eax
c010ca73:	84 c0                	test   %al,%al
c010ca75:	75 e4                	jne    c010ca5b <strnlen+0xf>
    }
    return cnt;
c010ca77:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010ca7a:	c9                   	leave  
c010ca7b:	c3                   	ret    

c010ca7c <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010ca7c:	55                   	push   %ebp
c010ca7d:	89 e5                	mov    %esp,%ebp
c010ca7f:	57                   	push   %edi
c010ca80:	56                   	push   %esi
c010ca81:	83 ec 20             	sub    $0x20,%esp
c010ca84:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca87:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ca8a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010ca90:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ca93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca96:	89 d1                	mov    %edx,%ecx
c010ca98:	89 c2                	mov    %eax,%edx
c010ca9a:	89 ce                	mov    %ecx,%esi
c010ca9c:	89 d7                	mov    %edx,%edi
c010ca9e:	ac                   	lods   %ds:(%esi),%al
c010ca9f:	aa                   	stos   %al,%es:(%edi)
c010caa0:	84 c0                	test   %al,%al
c010caa2:	75 fa                	jne    c010ca9e <strcpy+0x22>
c010caa4:	89 fa                	mov    %edi,%edx
c010caa6:	89 f1                	mov    %esi,%ecx
c010caa8:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010caab:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010caae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010cab1:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010cab4:	83 c4 20             	add    $0x20,%esp
c010cab7:	5e                   	pop    %esi
c010cab8:	5f                   	pop    %edi
c010cab9:	5d                   	pop    %ebp
c010caba:	c3                   	ret    

c010cabb <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010cabb:	55                   	push   %ebp
c010cabc:	89 e5                	mov    %esp,%ebp
c010cabe:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010cac1:	8b 45 08             	mov    0x8(%ebp),%eax
c010cac4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010cac7:	eb 21                	jmp    c010caea <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010cac9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cacc:	0f b6 10             	movzbl (%eax),%edx
c010cacf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010cad2:	88 10                	mov    %dl,(%eax)
c010cad4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010cad7:	0f b6 00             	movzbl (%eax),%eax
c010cada:	84 c0                	test   %al,%al
c010cadc:	74 04                	je     c010cae2 <strncpy+0x27>
            src ++;
c010cade:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010cae2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010cae6:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
    while (len > 0) {
c010caea:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010caee:	75 d9                	jne    c010cac9 <strncpy+0xe>
    }
    return dst;
c010caf0:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010caf3:	c9                   	leave  
c010caf4:	c3                   	ret    

c010caf5 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010caf5:	55                   	push   %ebp
c010caf6:	89 e5                	mov    %esp,%ebp
c010caf8:	57                   	push   %edi
c010caf9:	56                   	push   %esi
c010cafa:	83 ec 20             	sub    $0x20,%esp
c010cafd:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb00:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cb03:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb06:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile (
c010cb09:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010cb0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb0f:	89 d1                	mov    %edx,%ecx
c010cb11:	89 c2                	mov    %eax,%edx
c010cb13:	89 ce                	mov    %ecx,%esi
c010cb15:	89 d7                	mov    %edx,%edi
c010cb17:	ac                   	lods   %ds:(%esi),%al
c010cb18:	ae                   	scas   %es:(%edi),%al
c010cb19:	75 08                	jne    c010cb23 <strcmp+0x2e>
c010cb1b:	84 c0                	test   %al,%al
c010cb1d:	75 f8                	jne    c010cb17 <strcmp+0x22>
c010cb1f:	31 c0                	xor    %eax,%eax
c010cb21:	eb 04                	jmp    c010cb27 <strcmp+0x32>
c010cb23:	19 c0                	sbb    %eax,%eax
c010cb25:	0c 01                	or     $0x1,%al
c010cb27:	89 fa                	mov    %edi,%edx
c010cb29:	89 f1                	mov    %esi,%ecx
c010cb2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010cb2e:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010cb31:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return ret;
c010cb34:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010cb37:	83 c4 20             	add    $0x20,%esp
c010cb3a:	5e                   	pop    %esi
c010cb3b:	5f                   	pop    %edi
c010cb3c:	5d                   	pop    %ebp
c010cb3d:	c3                   	ret    

c010cb3e <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010cb3e:	55                   	push   %ebp
c010cb3f:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010cb41:	eb 0c                	jmp    c010cb4f <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010cb43:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010cb47:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010cb4b:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010cb4f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010cb53:	74 1a                	je     c010cb6f <strncmp+0x31>
c010cb55:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb58:	0f b6 00             	movzbl (%eax),%eax
c010cb5b:	84 c0                	test   %al,%al
c010cb5d:	74 10                	je     c010cb6f <strncmp+0x31>
c010cb5f:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb62:	0f b6 10             	movzbl (%eax),%edx
c010cb65:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb68:	0f b6 00             	movzbl (%eax),%eax
c010cb6b:	38 c2                	cmp    %al,%dl
c010cb6d:	74 d4                	je     c010cb43 <strncmp+0x5>
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010cb6f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010cb73:	74 18                	je     c010cb8d <strncmp+0x4f>
c010cb75:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb78:	0f b6 00             	movzbl (%eax),%eax
c010cb7b:	0f b6 d0             	movzbl %al,%edx
c010cb7e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb81:	0f b6 00             	movzbl (%eax),%eax
c010cb84:	0f b6 c0             	movzbl %al,%eax
c010cb87:	29 c2                	sub    %eax,%edx
c010cb89:	89 d0                	mov    %edx,%eax
c010cb8b:	eb 05                	jmp    c010cb92 <strncmp+0x54>
c010cb8d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cb92:	5d                   	pop    %ebp
c010cb93:	c3                   	ret    

c010cb94 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010cb94:	55                   	push   %ebp
c010cb95:	89 e5                	mov    %esp,%ebp
c010cb97:	83 ec 04             	sub    $0x4,%esp
c010cb9a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb9d:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010cba0:	eb 14                	jmp    c010cbb6 <strchr+0x22>
        if (*s == c) {
c010cba2:	8b 45 08             	mov    0x8(%ebp),%eax
c010cba5:	0f b6 00             	movzbl (%eax),%eax
c010cba8:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010cbab:	75 05                	jne    c010cbb2 <strchr+0x1e>
            return (char *)s;
c010cbad:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbb0:	eb 13                	jmp    c010cbc5 <strchr+0x31>
        }
        s ++;
c010cbb2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    while (*s != '\0') {
c010cbb6:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbb9:	0f b6 00             	movzbl (%eax),%eax
c010cbbc:	84 c0                	test   %al,%al
c010cbbe:	75 e2                	jne    c010cba2 <strchr+0xe>
    }
    return NULL;
c010cbc0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cbc5:	c9                   	leave  
c010cbc6:	c3                   	ret    

c010cbc7 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010cbc7:	55                   	push   %ebp
c010cbc8:	89 e5                	mov    %esp,%ebp
c010cbca:	83 ec 04             	sub    $0x4,%esp
c010cbcd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cbd0:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010cbd3:	eb 11                	jmp    c010cbe6 <strfind+0x1f>
        if (*s == c) {
c010cbd5:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbd8:	0f b6 00             	movzbl (%eax),%eax
c010cbdb:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010cbde:	75 02                	jne    c010cbe2 <strfind+0x1b>
            break;
c010cbe0:	eb 0e                	jmp    c010cbf0 <strfind+0x29>
        }
        s ++;
c010cbe2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    while (*s != '\0') {
c010cbe6:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbe9:	0f b6 00             	movzbl (%eax),%eax
c010cbec:	84 c0                	test   %al,%al
c010cbee:	75 e5                	jne    c010cbd5 <strfind+0xe>
    }
    return (char *)s;
c010cbf0:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010cbf3:	c9                   	leave  
c010cbf4:	c3                   	ret    

c010cbf5 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010cbf5:	55                   	push   %ebp
c010cbf6:	89 e5                	mov    %esp,%ebp
c010cbf8:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010cbfb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010cc02:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010cc09:	eb 04                	jmp    c010cc0f <strtol+0x1a>
        s ++;
c010cc0b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    while (*s == ' ' || *s == '\t') {
c010cc0f:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc12:	0f b6 00             	movzbl (%eax),%eax
c010cc15:	3c 20                	cmp    $0x20,%al
c010cc17:	74 f2                	je     c010cc0b <strtol+0x16>
c010cc19:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc1c:	0f b6 00             	movzbl (%eax),%eax
c010cc1f:	3c 09                	cmp    $0x9,%al
c010cc21:	74 e8                	je     c010cc0b <strtol+0x16>
    }

    // plus/minus sign
    if (*s == '+') {
c010cc23:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc26:	0f b6 00             	movzbl (%eax),%eax
c010cc29:	3c 2b                	cmp    $0x2b,%al
c010cc2b:	75 06                	jne    c010cc33 <strtol+0x3e>
        s ++;
c010cc2d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010cc31:	eb 15                	jmp    c010cc48 <strtol+0x53>
    }
    else if (*s == '-') {
c010cc33:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc36:	0f b6 00             	movzbl (%eax),%eax
c010cc39:	3c 2d                	cmp    $0x2d,%al
c010cc3b:	75 0b                	jne    c010cc48 <strtol+0x53>
        s ++, neg = 1;
c010cc3d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010cc41:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010cc48:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010cc4c:	74 06                	je     c010cc54 <strtol+0x5f>
c010cc4e:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010cc52:	75 24                	jne    c010cc78 <strtol+0x83>
c010cc54:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc57:	0f b6 00             	movzbl (%eax),%eax
c010cc5a:	3c 30                	cmp    $0x30,%al
c010cc5c:	75 1a                	jne    c010cc78 <strtol+0x83>
c010cc5e:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc61:	83 c0 01             	add    $0x1,%eax
c010cc64:	0f b6 00             	movzbl (%eax),%eax
c010cc67:	3c 78                	cmp    $0x78,%al
c010cc69:	75 0d                	jne    c010cc78 <strtol+0x83>
        s += 2, base = 16;
c010cc6b:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010cc6f:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010cc76:	eb 2a                	jmp    c010cca2 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010cc78:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010cc7c:	75 17                	jne    c010cc95 <strtol+0xa0>
c010cc7e:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc81:	0f b6 00             	movzbl (%eax),%eax
c010cc84:	3c 30                	cmp    $0x30,%al
c010cc86:	75 0d                	jne    c010cc95 <strtol+0xa0>
        s ++, base = 8;
c010cc88:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010cc8c:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010cc93:	eb 0d                	jmp    c010cca2 <strtol+0xad>
    }
    else if (base == 0) {
c010cc95:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010cc99:	75 07                	jne    c010cca2 <strtol+0xad>
        base = 10;
c010cc9b:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010cca2:	8b 45 08             	mov    0x8(%ebp),%eax
c010cca5:	0f b6 00             	movzbl (%eax),%eax
c010cca8:	3c 2f                	cmp    $0x2f,%al
c010ccaa:	7e 1b                	jle    c010ccc7 <strtol+0xd2>
c010ccac:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccaf:	0f b6 00             	movzbl (%eax),%eax
c010ccb2:	3c 39                	cmp    $0x39,%al
c010ccb4:	7f 11                	jg     c010ccc7 <strtol+0xd2>
            dig = *s - '0';
c010ccb6:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccb9:	0f b6 00             	movzbl (%eax),%eax
c010ccbc:	0f be c0             	movsbl %al,%eax
c010ccbf:	83 e8 30             	sub    $0x30,%eax
c010ccc2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ccc5:	eb 48                	jmp    c010cd0f <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010ccc7:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccca:	0f b6 00             	movzbl (%eax),%eax
c010cccd:	3c 60                	cmp    $0x60,%al
c010cccf:	7e 1b                	jle    c010ccec <strtol+0xf7>
c010ccd1:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccd4:	0f b6 00             	movzbl (%eax),%eax
c010ccd7:	3c 7a                	cmp    $0x7a,%al
c010ccd9:	7f 11                	jg     c010ccec <strtol+0xf7>
            dig = *s - 'a' + 10;
c010ccdb:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccde:	0f b6 00             	movzbl (%eax),%eax
c010cce1:	0f be c0             	movsbl %al,%eax
c010cce4:	83 e8 57             	sub    $0x57,%eax
c010cce7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ccea:	eb 23                	jmp    c010cd0f <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010ccec:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccef:	0f b6 00             	movzbl (%eax),%eax
c010ccf2:	3c 40                	cmp    $0x40,%al
c010ccf4:	7e 3d                	jle    c010cd33 <strtol+0x13e>
c010ccf6:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccf9:	0f b6 00             	movzbl (%eax),%eax
c010ccfc:	3c 5a                	cmp    $0x5a,%al
c010ccfe:	7f 33                	jg     c010cd33 <strtol+0x13e>
            dig = *s - 'A' + 10;
c010cd00:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd03:	0f b6 00             	movzbl (%eax),%eax
c010cd06:	0f be c0             	movsbl %al,%eax
c010cd09:	83 e8 37             	sub    $0x37,%eax
c010cd0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010cd0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd12:	3b 45 10             	cmp    0x10(%ebp),%eax
c010cd15:	7c 02                	jl     c010cd19 <strtol+0x124>
            break;
c010cd17:	eb 1a                	jmp    c010cd33 <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c010cd19:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010cd1d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010cd20:	0f af 45 10          	imul   0x10(%ebp),%eax
c010cd24:	89 c2                	mov    %eax,%edx
c010cd26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd29:	01 d0                	add    %edx,%eax
c010cd2b:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010cd2e:	e9 6f ff ff ff       	jmp    c010cca2 <strtol+0xad>

    if (endptr) {
c010cd33:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010cd37:	74 08                	je     c010cd41 <strtol+0x14c>
        *endptr = (char *) s;
c010cd39:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd3c:	8b 55 08             	mov    0x8(%ebp),%edx
c010cd3f:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010cd41:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010cd45:	74 07                	je     c010cd4e <strtol+0x159>
c010cd47:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010cd4a:	f7 d8                	neg    %eax
c010cd4c:	eb 03                	jmp    c010cd51 <strtol+0x15c>
c010cd4e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010cd51:	c9                   	leave  
c010cd52:	c3                   	ret    

c010cd53 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010cd53:	55                   	push   %ebp
c010cd54:	89 e5                	mov    %esp,%ebp
c010cd56:	57                   	push   %edi
c010cd57:	83 ec 24             	sub    $0x24,%esp
c010cd5a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd5d:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010cd60:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010cd64:	8b 55 08             	mov    0x8(%ebp),%edx
c010cd67:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010cd6a:	88 45 f7             	mov    %al,-0x9(%ebp)
c010cd6d:	8b 45 10             	mov    0x10(%ebp),%eax
c010cd70:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010cd73:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010cd76:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010cd7a:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010cd7d:	89 d7                	mov    %edx,%edi
c010cd7f:	f3 aa                	rep stos %al,%es:(%edi)
c010cd81:	89 fa                	mov    %edi,%edx
c010cd83:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010cd86:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010cd89:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010cd8c:	83 c4 24             	add    $0x24,%esp
c010cd8f:	5f                   	pop    %edi
c010cd90:	5d                   	pop    %ebp
c010cd91:	c3                   	ret    

c010cd92 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010cd92:	55                   	push   %ebp
c010cd93:	89 e5                	mov    %esp,%ebp
c010cd95:	57                   	push   %edi
c010cd96:	56                   	push   %esi
c010cd97:	53                   	push   %ebx
c010cd98:	83 ec 30             	sub    $0x30,%esp
c010cd9b:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cda1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cda4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010cda7:	8b 45 10             	mov    0x10(%ebp),%eax
c010cdaa:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010cdad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cdb0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010cdb3:	73 42                	jae    c010cdf7 <memmove+0x65>
c010cdb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cdb8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010cdbb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cdbe:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cdc1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cdc4:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010cdc7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cdca:	c1 e8 02             	shr    $0x2,%eax
c010cdcd:	89 c1                	mov    %eax,%ecx
    asm volatile (
c010cdcf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010cdd2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cdd5:	89 d7                	mov    %edx,%edi
c010cdd7:	89 c6                	mov    %eax,%esi
c010cdd9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010cddb:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010cdde:	83 e1 03             	and    $0x3,%ecx
c010cde1:	74 02                	je     c010cde5 <memmove+0x53>
c010cde3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010cde5:	89 f0                	mov    %esi,%eax
c010cde7:	89 fa                	mov    %edi,%edx
c010cde9:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010cdec:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010cdef:	89 45 d0             	mov    %eax,-0x30(%ebp)
        : "memory");
    return dst;
c010cdf2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010cdf5:	eb 36                	jmp    c010ce2d <memmove+0x9b>
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010cdf7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cdfa:	8d 50 ff             	lea    -0x1(%eax),%edx
c010cdfd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ce00:	01 c2                	add    %eax,%edx
c010ce02:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ce05:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010ce08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ce0b:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
    asm volatile (
c010ce0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ce11:	89 c1                	mov    %eax,%ecx
c010ce13:	89 d8                	mov    %ebx,%eax
c010ce15:	89 d6                	mov    %edx,%esi
c010ce17:	89 c7                	mov    %eax,%edi
c010ce19:	fd                   	std    
c010ce1a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010ce1c:	fc                   	cld    
c010ce1d:	89 f8                	mov    %edi,%eax
c010ce1f:	89 f2                	mov    %esi,%edx
c010ce21:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010ce24:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010ce27:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    return dst;
c010ce2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010ce2d:	83 c4 30             	add    $0x30,%esp
c010ce30:	5b                   	pop    %ebx
c010ce31:	5e                   	pop    %esi
c010ce32:	5f                   	pop    %edi
c010ce33:	5d                   	pop    %ebp
c010ce34:	c3                   	ret    

c010ce35 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010ce35:	55                   	push   %ebp
c010ce36:	89 e5                	mov    %esp,%ebp
c010ce38:	57                   	push   %edi
c010ce39:	56                   	push   %esi
c010ce3a:	83 ec 20             	sub    $0x20,%esp
c010ce3d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce40:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ce43:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce46:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ce49:	8b 45 10             	mov    0x10(%ebp),%eax
c010ce4c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010ce4f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ce52:	c1 e8 02             	shr    $0x2,%eax
c010ce55:	89 c1                	mov    %eax,%ecx
    asm volatile (
c010ce57:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ce5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ce5d:	89 d7                	mov    %edx,%edi
c010ce5f:	89 c6                	mov    %eax,%esi
c010ce61:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010ce63:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010ce66:	83 e1 03             	and    $0x3,%ecx
c010ce69:	74 02                	je     c010ce6d <memcpy+0x38>
c010ce6b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010ce6d:	89 f0                	mov    %esi,%eax
c010ce6f:	89 fa                	mov    %edi,%edx
c010ce71:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010ce74:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010ce77:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return dst;
c010ce7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010ce7d:	83 c4 20             	add    $0x20,%esp
c010ce80:	5e                   	pop    %esi
c010ce81:	5f                   	pop    %edi
c010ce82:	5d                   	pop    %ebp
c010ce83:	c3                   	ret    

c010ce84 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010ce84:	55                   	push   %ebp
c010ce85:	89 e5                	mov    %esp,%ebp
c010ce87:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010ce8a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce8d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010ce90:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce93:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010ce96:	eb 30                	jmp    c010cec8 <memcmp+0x44>
        if (*s1 != *s2) {
c010ce98:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ce9b:	0f b6 10             	movzbl (%eax),%edx
c010ce9e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010cea1:	0f b6 00             	movzbl (%eax),%eax
c010cea4:	38 c2                	cmp    %al,%dl
c010cea6:	74 18                	je     c010cec0 <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010cea8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ceab:	0f b6 00             	movzbl (%eax),%eax
c010ceae:	0f b6 d0             	movzbl %al,%edx
c010ceb1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ceb4:	0f b6 00             	movzbl (%eax),%eax
c010ceb7:	0f b6 c0             	movzbl %al,%eax
c010ceba:	29 c2                	sub    %eax,%edx
c010cebc:	89 d0                	mov    %edx,%eax
c010cebe:	eb 1a                	jmp    c010ceda <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010cec0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010cec4:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (n -- > 0) {
c010cec8:	8b 45 10             	mov    0x10(%ebp),%eax
c010cecb:	8d 50 ff             	lea    -0x1(%eax),%edx
c010cece:	89 55 10             	mov    %edx,0x10(%ebp)
c010ced1:	85 c0                	test   %eax,%eax
c010ced3:	75 c3                	jne    c010ce98 <memcmp+0x14>
    }
    return 0;
c010ced5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ceda:	c9                   	leave  
c010cedb:	c3                   	ret    

c010cedc <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010cedc:	55                   	push   %ebp
c010cedd:	89 e5                	mov    %esp,%ebp
c010cedf:	83 ec 58             	sub    $0x58,%esp
c010cee2:	8b 45 10             	mov    0x10(%ebp),%eax
c010cee5:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010cee8:	8b 45 14             	mov    0x14(%ebp),%eax
c010ceeb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010ceee:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010cef1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010cef4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cef7:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010cefa:	8b 45 18             	mov    0x18(%ebp),%eax
c010cefd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010cf00:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cf03:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cf06:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cf09:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010cf0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cf0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cf12:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cf16:	74 1c                	je     c010cf34 <printnum+0x58>
c010cf18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cf1b:	ba 00 00 00 00       	mov    $0x0,%edx
c010cf20:	f7 75 e4             	divl   -0x1c(%ebp)
c010cf23:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010cf26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cf29:	ba 00 00 00 00       	mov    $0x0,%edx
c010cf2e:	f7 75 e4             	divl   -0x1c(%ebp)
c010cf31:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cf34:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cf37:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010cf3a:	f7 75 e4             	divl   -0x1c(%ebp)
c010cf3d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cf40:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010cf43:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cf46:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010cf49:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cf4c:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010cf4f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cf52:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010cf55:	8b 45 18             	mov    0x18(%ebp),%eax
c010cf58:	ba 00 00 00 00       	mov    $0x0,%edx
c010cf5d:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010cf60:	77 56                	ja     c010cfb8 <printnum+0xdc>
c010cf62:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010cf65:	72 05                	jb     c010cf6c <printnum+0x90>
c010cf67:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010cf6a:	77 4c                	ja     c010cfb8 <printnum+0xdc>
        printnum(putch, putdat, result, base, width - 1, padc);
c010cf6c:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010cf6f:	8d 50 ff             	lea    -0x1(%eax),%edx
c010cf72:	8b 45 20             	mov    0x20(%ebp),%eax
c010cf75:	89 44 24 18          	mov    %eax,0x18(%esp)
c010cf79:	89 54 24 14          	mov    %edx,0x14(%esp)
c010cf7d:	8b 45 18             	mov    0x18(%ebp),%eax
c010cf80:	89 44 24 10          	mov    %eax,0x10(%esp)
c010cf84:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cf87:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cf8a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cf8e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010cf92:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf95:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf99:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf9c:	89 04 24             	mov    %eax,(%esp)
c010cf9f:	e8 38 ff ff ff       	call   c010cedc <printnum>
c010cfa4:	eb 1c                	jmp    c010cfc2 <printnum+0xe6>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010cfa6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cfa9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cfad:	8b 45 20             	mov    0x20(%ebp),%eax
c010cfb0:	89 04 24             	mov    %eax,(%esp)
c010cfb3:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfb6:	ff d0                	call   *%eax
        while (-- width > 0)
c010cfb8:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010cfbc:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010cfc0:	7f e4                	jg     c010cfa6 <printnum+0xca>
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010cfc2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cfc5:	05 44 02 11 c0       	add    $0xc0110244,%eax
c010cfca:	0f b6 00             	movzbl (%eax),%eax
c010cfcd:	0f be c0             	movsbl %al,%eax
c010cfd0:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cfd3:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cfd7:	89 04 24             	mov    %eax,(%esp)
c010cfda:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfdd:	ff d0                	call   *%eax
}
c010cfdf:	c9                   	leave  
c010cfe0:	c3                   	ret    

c010cfe1 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010cfe1:	55                   	push   %ebp
c010cfe2:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010cfe4:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010cfe8:	7e 14                	jle    c010cffe <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010cfea:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfed:	8b 00                	mov    (%eax),%eax
c010cfef:	8d 48 08             	lea    0x8(%eax),%ecx
c010cff2:	8b 55 08             	mov    0x8(%ebp),%edx
c010cff5:	89 0a                	mov    %ecx,(%edx)
c010cff7:	8b 50 04             	mov    0x4(%eax),%edx
c010cffa:	8b 00                	mov    (%eax),%eax
c010cffc:	eb 30                	jmp    c010d02e <getuint+0x4d>
    }
    else if (lflag) {
c010cffe:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d002:	74 16                	je     c010d01a <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010d004:	8b 45 08             	mov    0x8(%ebp),%eax
c010d007:	8b 00                	mov    (%eax),%eax
c010d009:	8d 48 04             	lea    0x4(%eax),%ecx
c010d00c:	8b 55 08             	mov    0x8(%ebp),%edx
c010d00f:	89 0a                	mov    %ecx,(%edx)
c010d011:	8b 00                	mov    (%eax),%eax
c010d013:	ba 00 00 00 00       	mov    $0x0,%edx
c010d018:	eb 14                	jmp    c010d02e <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010d01a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d01d:	8b 00                	mov    (%eax),%eax
c010d01f:	8d 48 04             	lea    0x4(%eax),%ecx
c010d022:	8b 55 08             	mov    0x8(%ebp),%edx
c010d025:	89 0a                	mov    %ecx,(%edx)
c010d027:	8b 00                	mov    (%eax),%eax
c010d029:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010d02e:	5d                   	pop    %ebp
c010d02f:	c3                   	ret    

c010d030 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010d030:	55                   	push   %ebp
c010d031:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010d033:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010d037:	7e 14                	jle    c010d04d <getint+0x1d>
        return va_arg(*ap, long long);
c010d039:	8b 45 08             	mov    0x8(%ebp),%eax
c010d03c:	8b 00                	mov    (%eax),%eax
c010d03e:	8d 48 08             	lea    0x8(%eax),%ecx
c010d041:	8b 55 08             	mov    0x8(%ebp),%edx
c010d044:	89 0a                	mov    %ecx,(%edx)
c010d046:	8b 50 04             	mov    0x4(%eax),%edx
c010d049:	8b 00                	mov    (%eax),%eax
c010d04b:	eb 28                	jmp    c010d075 <getint+0x45>
    }
    else if (lflag) {
c010d04d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d051:	74 12                	je     c010d065 <getint+0x35>
        return va_arg(*ap, long);
c010d053:	8b 45 08             	mov    0x8(%ebp),%eax
c010d056:	8b 00                	mov    (%eax),%eax
c010d058:	8d 48 04             	lea    0x4(%eax),%ecx
c010d05b:	8b 55 08             	mov    0x8(%ebp),%edx
c010d05e:	89 0a                	mov    %ecx,(%edx)
c010d060:	8b 00                	mov    (%eax),%eax
c010d062:	99                   	cltd   
c010d063:	eb 10                	jmp    c010d075 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010d065:	8b 45 08             	mov    0x8(%ebp),%eax
c010d068:	8b 00                	mov    (%eax),%eax
c010d06a:	8d 48 04             	lea    0x4(%eax),%ecx
c010d06d:	8b 55 08             	mov    0x8(%ebp),%edx
c010d070:	89 0a                	mov    %ecx,(%edx)
c010d072:	8b 00                	mov    (%eax),%eax
c010d074:	99                   	cltd   
    }
}
c010d075:	5d                   	pop    %ebp
c010d076:	c3                   	ret    

c010d077 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010d077:	55                   	push   %ebp
c010d078:	89 e5                	mov    %esp,%ebp
c010d07a:	83 ec 28             	sub    $0x28,%esp
    va_list ap;

    va_start(ap, fmt);
c010d07d:	8d 45 14             	lea    0x14(%ebp),%eax
c010d080:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010d083:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d086:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d08a:	8b 45 10             	mov    0x10(%ebp),%eax
c010d08d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d091:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d094:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d098:	8b 45 08             	mov    0x8(%ebp),%eax
c010d09b:	89 04 24             	mov    %eax,(%esp)
c010d09e:	e8 02 00 00 00       	call   c010d0a5 <vprintfmt>
    va_end(ap);
}
c010d0a3:	c9                   	leave  
c010d0a4:	c3                   	ret    

c010d0a5 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010d0a5:	55                   	push   %ebp
c010d0a6:	89 e5                	mov    %esp,%ebp
c010d0a8:	56                   	push   %esi
c010d0a9:	53                   	push   %ebx
c010d0aa:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010d0ad:	eb 18                	jmp    c010d0c7 <vprintfmt+0x22>
            if (ch == '\0') {
c010d0af:	85 db                	test   %ebx,%ebx
c010d0b1:	75 05                	jne    c010d0b8 <vprintfmt+0x13>
                return;
c010d0b3:	e9 d1 03 00 00       	jmp    c010d489 <vprintfmt+0x3e4>
            }
            putch(ch, putdat);
c010d0b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d0bb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d0bf:	89 1c 24             	mov    %ebx,(%esp)
c010d0c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0c5:	ff d0                	call   *%eax
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010d0c7:	8b 45 10             	mov    0x10(%ebp),%eax
c010d0ca:	8d 50 01             	lea    0x1(%eax),%edx
c010d0cd:	89 55 10             	mov    %edx,0x10(%ebp)
c010d0d0:	0f b6 00             	movzbl (%eax),%eax
c010d0d3:	0f b6 d8             	movzbl %al,%ebx
c010d0d6:	83 fb 25             	cmp    $0x25,%ebx
c010d0d9:	75 d4                	jne    c010d0af <vprintfmt+0xa>
        }

        // Process a %-escape sequence
        char padc = ' ';
c010d0db:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010d0df:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010d0e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d0e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010d0ec:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010d0f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d0f6:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010d0f9:	8b 45 10             	mov    0x10(%ebp),%eax
c010d0fc:	8d 50 01             	lea    0x1(%eax),%edx
c010d0ff:	89 55 10             	mov    %edx,0x10(%ebp)
c010d102:	0f b6 00             	movzbl (%eax),%eax
c010d105:	0f b6 d8             	movzbl %al,%ebx
c010d108:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010d10b:	83 f8 55             	cmp    $0x55,%eax
c010d10e:	0f 87 44 03 00 00    	ja     c010d458 <vprintfmt+0x3b3>
c010d114:	8b 04 85 68 02 11 c0 	mov    -0x3feefd98(,%eax,4),%eax
c010d11b:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010d11d:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010d121:	eb d6                	jmp    c010d0f9 <vprintfmt+0x54>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010d123:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010d127:	eb d0                	jmp    c010d0f9 <vprintfmt+0x54>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010d129:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010d130:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d133:	89 d0                	mov    %edx,%eax
c010d135:	c1 e0 02             	shl    $0x2,%eax
c010d138:	01 d0                	add    %edx,%eax
c010d13a:	01 c0                	add    %eax,%eax
c010d13c:	01 d8                	add    %ebx,%eax
c010d13e:	83 e8 30             	sub    $0x30,%eax
c010d141:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010d144:	8b 45 10             	mov    0x10(%ebp),%eax
c010d147:	0f b6 00             	movzbl (%eax),%eax
c010d14a:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010d14d:	83 fb 2f             	cmp    $0x2f,%ebx
c010d150:	7e 0b                	jle    c010d15d <vprintfmt+0xb8>
c010d152:	83 fb 39             	cmp    $0x39,%ebx
c010d155:	7f 06                	jg     c010d15d <vprintfmt+0xb8>
            for (precision = 0; ; ++ fmt) {
c010d157:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                    break;
                }
            }
c010d15b:	eb d3                	jmp    c010d130 <vprintfmt+0x8b>
            goto process_precision;
c010d15d:	eb 33                	jmp    c010d192 <vprintfmt+0xed>

        case '*':
            precision = va_arg(ap, int);
c010d15f:	8b 45 14             	mov    0x14(%ebp),%eax
c010d162:	8d 50 04             	lea    0x4(%eax),%edx
c010d165:	89 55 14             	mov    %edx,0x14(%ebp)
c010d168:	8b 00                	mov    (%eax),%eax
c010d16a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010d16d:	eb 23                	jmp    c010d192 <vprintfmt+0xed>

        case '.':
            if (width < 0)
c010d16f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d173:	79 0c                	jns    c010d181 <vprintfmt+0xdc>
                width = 0;
c010d175:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010d17c:	e9 78 ff ff ff       	jmp    c010d0f9 <vprintfmt+0x54>
c010d181:	e9 73 ff ff ff       	jmp    c010d0f9 <vprintfmt+0x54>

        case '#':
            altflag = 1;
c010d186:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010d18d:	e9 67 ff ff ff       	jmp    c010d0f9 <vprintfmt+0x54>

        process_precision:
            if (width < 0)
c010d192:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d196:	79 12                	jns    c010d1aa <vprintfmt+0x105>
                width = precision, precision = -1;
c010d198:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d19b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d19e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010d1a5:	e9 4f ff ff ff       	jmp    c010d0f9 <vprintfmt+0x54>
c010d1aa:	e9 4a ff ff ff       	jmp    c010d0f9 <vprintfmt+0x54>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010d1af:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010d1b3:	e9 41 ff ff ff       	jmp    c010d0f9 <vprintfmt+0x54>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010d1b8:	8b 45 14             	mov    0x14(%ebp),%eax
c010d1bb:	8d 50 04             	lea    0x4(%eax),%edx
c010d1be:	89 55 14             	mov    %edx,0x14(%ebp)
c010d1c1:	8b 00                	mov    (%eax),%eax
c010d1c3:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d1c6:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d1ca:	89 04 24             	mov    %eax,(%esp)
c010d1cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1d0:	ff d0                	call   *%eax
            break;
c010d1d2:	e9 ac 02 00 00       	jmp    c010d483 <vprintfmt+0x3de>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010d1d7:	8b 45 14             	mov    0x14(%ebp),%eax
c010d1da:	8d 50 04             	lea    0x4(%eax),%edx
c010d1dd:	89 55 14             	mov    %edx,0x14(%ebp)
c010d1e0:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010d1e2:	85 db                	test   %ebx,%ebx
c010d1e4:	79 02                	jns    c010d1e8 <vprintfmt+0x143>
                err = -err;
c010d1e6:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010d1e8:	83 fb 18             	cmp    $0x18,%ebx
c010d1eb:	7f 0b                	jg     c010d1f8 <vprintfmt+0x153>
c010d1ed:	8b 34 9d e0 01 11 c0 	mov    -0x3feefe20(,%ebx,4),%esi
c010d1f4:	85 f6                	test   %esi,%esi
c010d1f6:	75 23                	jne    c010d21b <vprintfmt+0x176>
                printfmt(putch, putdat, "error %d", err);
c010d1f8:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010d1fc:	c7 44 24 08 55 02 11 	movl   $0xc0110255,0x8(%esp)
c010d203:	c0 
c010d204:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d207:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d20b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d20e:	89 04 24             	mov    %eax,(%esp)
c010d211:	e8 61 fe ff ff       	call   c010d077 <printfmt>
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010d216:	e9 68 02 00 00       	jmp    c010d483 <vprintfmt+0x3de>
                printfmt(putch, putdat, "%s", p);
c010d21b:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d21f:	c7 44 24 08 5e 02 11 	movl   $0xc011025e,0x8(%esp)
c010d226:	c0 
c010d227:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d22a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d22e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d231:	89 04 24             	mov    %eax,(%esp)
c010d234:	e8 3e fe ff ff       	call   c010d077 <printfmt>
            break;
c010d239:	e9 45 02 00 00       	jmp    c010d483 <vprintfmt+0x3de>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010d23e:	8b 45 14             	mov    0x14(%ebp),%eax
c010d241:	8d 50 04             	lea    0x4(%eax),%edx
c010d244:	89 55 14             	mov    %edx,0x14(%ebp)
c010d247:	8b 30                	mov    (%eax),%esi
c010d249:	85 f6                	test   %esi,%esi
c010d24b:	75 05                	jne    c010d252 <vprintfmt+0x1ad>
                p = "(null)";
c010d24d:	be 61 02 11 c0       	mov    $0xc0110261,%esi
            }
            if (width > 0 && padc != '-') {
c010d252:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d256:	7e 3e                	jle    c010d296 <vprintfmt+0x1f1>
c010d258:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010d25c:	74 38                	je     c010d296 <vprintfmt+0x1f1>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010d25e:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c010d261:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d264:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d268:	89 34 24             	mov    %esi,(%esp)
c010d26b:	e8 dc f7 ff ff       	call   c010ca4c <strnlen>
c010d270:	29 c3                	sub    %eax,%ebx
c010d272:	89 d8                	mov    %ebx,%eax
c010d274:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d277:	eb 17                	jmp    c010d290 <vprintfmt+0x1eb>
                    putch(padc, putdat);
c010d279:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010d27d:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d280:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d284:	89 04 24             	mov    %eax,(%esp)
c010d287:	8b 45 08             	mov    0x8(%ebp),%eax
c010d28a:	ff d0                	call   *%eax
                for (width -= strnlen(p, precision); width > 0; width --) {
c010d28c:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010d290:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d294:	7f e3                	jg     c010d279 <vprintfmt+0x1d4>
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010d296:	eb 38                	jmp    c010d2d0 <vprintfmt+0x22b>
                if (altflag && (ch < ' ' || ch > '~')) {
c010d298:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010d29c:	74 1f                	je     c010d2bd <vprintfmt+0x218>
c010d29e:	83 fb 1f             	cmp    $0x1f,%ebx
c010d2a1:	7e 05                	jle    c010d2a8 <vprintfmt+0x203>
c010d2a3:	83 fb 7e             	cmp    $0x7e,%ebx
c010d2a6:	7e 15                	jle    c010d2bd <vprintfmt+0x218>
                    putch('?', putdat);
c010d2a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2ab:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d2af:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c010d2b6:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2b9:	ff d0                	call   *%eax
c010d2bb:	eb 0f                	jmp    c010d2cc <vprintfmt+0x227>
                }
                else {
                    putch(ch, putdat);
c010d2bd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d2c4:	89 1c 24             	mov    %ebx,(%esp)
c010d2c7:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2ca:	ff d0                	call   *%eax
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010d2cc:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010d2d0:	89 f0                	mov    %esi,%eax
c010d2d2:	8d 70 01             	lea    0x1(%eax),%esi
c010d2d5:	0f b6 00             	movzbl (%eax),%eax
c010d2d8:	0f be d8             	movsbl %al,%ebx
c010d2db:	85 db                	test   %ebx,%ebx
c010d2dd:	74 10                	je     c010d2ef <vprintfmt+0x24a>
c010d2df:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010d2e3:	78 b3                	js     c010d298 <vprintfmt+0x1f3>
c010d2e5:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010d2e9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010d2ed:	79 a9                	jns    c010d298 <vprintfmt+0x1f3>
                }
            }
            for (; width > 0; width --) {
c010d2ef:	eb 17                	jmp    c010d308 <vprintfmt+0x263>
                putch(' ', putdat);
c010d2f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2f4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d2f8:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010d2ff:	8b 45 08             	mov    0x8(%ebp),%eax
c010d302:	ff d0                	call   *%eax
            for (; width > 0; width --) {
c010d304:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010d308:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d30c:	7f e3                	jg     c010d2f1 <vprintfmt+0x24c>
            }
            break;
c010d30e:	e9 70 01 00 00       	jmp    c010d483 <vprintfmt+0x3de>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010d313:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d316:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d31a:	8d 45 14             	lea    0x14(%ebp),%eax
c010d31d:	89 04 24             	mov    %eax,(%esp)
c010d320:	e8 0b fd ff ff       	call   c010d030 <getint>
c010d325:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d328:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010d32b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d32e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d331:	85 d2                	test   %edx,%edx
c010d333:	79 26                	jns    c010d35b <vprintfmt+0x2b6>
                putch('-', putdat);
c010d335:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d338:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d33c:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c010d343:	8b 45 08             	mov    0x8(%ebp),%eax
c010d346:	ff d0                	call   *%eax
                num = -(long long)num;
c010d348:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d34b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d34e:	f7 d8                	neg    %eax
c010d350:	83 d2 00             	adc    $0x0,%edx
c010d353:	f7 da                	neg    %edx
c010d355:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d358:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010d35b:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010d362:	e9 a8 00 00 00       	jmp    c010d40f <vprintfmt+0x36a>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010d367:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d36a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d36e:	8d 45 14             	lea    0x14(%ebp),%eax
c010d371:	89 04 24             	mov    %eax,(%esp)
c010d374:	e8 68 fc ff ff       	call   c010cfe1 <getuint>
c010d379:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d37c:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010d37f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010d386:	e9 84 00 00 00       	jmp    c010d40f <vprintfmt+0x36a>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010d38b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d38e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d392:	8d 45 14             	lea    0x14(%ebp),%eax
c010d395:	89 04 24             	mov    %eax,(%esp)
c010d398:	e8 44 fc ff ff       	call   c010cfe1 <getuint>
c010d39d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d3a0:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010d3a3:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010d3aa:	eb 63                	jmp    c010d40f <vprintfmt+0x36a>

        // pointer
        case 'p':
            putch('0', putdat);
c010d3ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d3af:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d3b3:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c010d3ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3bd:	ff d0                	call   *%eax
            putch('x', putdat);
c010d3bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d3c2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d3c6:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c010d3cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3d0:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010d3d2:	8b 45 14             	mov    0x14(%ebp),%eax
c010d3d5:	8d 50 04             	lea    0x4(%eax),%edx
c010d3d8:	89 55 14             	mov    %edx,0x14(%ebp)
c010d3db:	8b 00                	mov    (%eax),%eax
c010d3dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d3e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010d3e7:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010d3ee:	eb 1f                	jmp    c010d40f <vprintfmt+0x36a>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010d3f0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d3f3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d3f7:	8d 45 14             	lea    0x14(%ebp),%eax
c010d3fa:	89 04 24             	mov    %eax,(%esp)
c010d3fd:	e8 df fb ff ff       	call   c010cfe1 <getuint>
c010d402:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d405:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010d408:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010d40f:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010d413:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d416:	89 54 24 18          	mov    %edx,0x18(%esp)
c010d41a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d41d:	89 54 24 14          	mov    %edx,0x14(%esp)
c010d421:	89 44 24 10          	mov    %eax,0x10(%esp)
c010d425:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d428:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d42b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d42f:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010d433:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d436:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d43a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d43d:	89 04 24             	mov    %eax,(%esp)
c010d440:	e8 97 fa ff ff       	call   c010cedc <printnum>
            break;
c010d445:	eb 3c                	jmp    c010d483 <vprintfmt+0x3de>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010d447:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d44a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d44e:	89 1c 24             	mov    %ebx,(%esp)
c010d451:	8b 45 08             	mov    0x8(%ebp),%eax
c010d454:	ff d0                	call   *%eax
            break;
c010d456:	eb 2b                	jmp    c010d483 <vprintfmt+0x3de>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010d458:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d45b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d45f:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010d466:	8b 45 08             	mov    0x8(%ebp),%eax
c010d469:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c010d46b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d46f:	eb 04                	jmp    c010d475 <vprintfmt+0x3d0>
c010d471:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d475:	8b 45 10             	mov    0x10(%ebp),%eax
c010d478:	83 e8 01             	sub    $0x1,%eax
c010d47b:	0f b6 00             	movzbl (%eax),%eax
c010d47e:	3c 25                	cmp    $0x25,%al
c010d480:	75 ef                	jne    c010d471 <vprintfmt+0x3cc>
                /* do nothing */;
            break;
c010d482:	90                   	nop
        }
    }
c010d483:	90                   	nop
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010d484:	e9 3e fc ff ff       	jmp    c010d0c7 <vprintfmt+0x22>
}
c010d489:	83 c4 40             	add    $0x40,%esp
c010d48c:	5b                   	pop    %ebx
c010d48d:	5e                   	pop    %esi
c010d48e:	5d                   	pop    %ebp
c010d48f:	c3                   	ret    

c010d490 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010d490:	55                   	push   %ebp
c010d491:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010d493:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d496:	8b 40 08             	mov    0x8(%eax),%eax
c010d499:	8d 50 01             	lea    0x1(%eax),%edx
c010d49c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d49f:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010d4a2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d4a5:	8b 10                	mov    (%eax),%edx
c010d4a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d4aa:	8b 40 04             	mov    0x4(%eax),%eax
c010d4ad:	39 c2                	cmp    %eax,%edx
c010d4af:	73 12                	jae    c010d4c3 <sprintputch+0x33>
        *b->buf ++ = ch;
c010d4b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d4b4:	8b 00                	mov    (%eax),%eax
c010d4b6:	8d 48 01             	lea    0x1(%eax),%ecx
c010d4b9:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d4bc:	89 0a                	mov    %ecx,(%edx)
c010d4be:	8b 55 08             	mov    0x8(%ebp),%edx
c010d4c1:	88 10                	mov    %dl,(%eax)
    }
}
c010d4c3:	5d                   	pop    %ebp
c010d4c4:	c3                   	ret    

c010d4c5 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010d4c5:	55                   	push   %ebp
c010d4c6:	89 e5                	mov    %esp,%ebp
c010d4c8:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010d4cb:	8d 45 14             	lea    0x14(%ebp),%eax
c010d4ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010d4d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d4d4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d4d8:	8b 45 10             	mov    0x10(%ebp),%eax
c010d4db:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d4df:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d4e2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d4e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4e9:	89 04 24             	mov    %eax,(%esp)
c010d4ec:	e8 08 00 00 00       	call   c010d4f9 <vsnprintf>
c010d4f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010d4f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d4f7:	c9                   	leave  
c010d4f8:	c3                   	ret    

c010d4f9 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010d4f9:	55                   	push   %ebp
c010d4fa:	89 e5                	mov    %esp,%ebp
c010d4fc:	83 ec 28             	sub    $0x28,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010d4ff:	8b 45 08             	mov    0x8(%ebp),%eax
c010d502:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d505:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d508:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d50b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d50e:	01 d0                	add    %edx,%eax
c010d510:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d513:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010d51a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d51e:	74 0a                	je     c010d52a <vsnprintf+0x31>
c010d520:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d523:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d526:	39 c2                	cmp    %eax,%edx
c010d528:	76 07                	jbe    c010d531 <vsnprintf+0x38>
        return -E_INVAL;
c010d52a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d52f:	eb 2a                	jmp    c010d55b <vsnprintf+0x62>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010d531:	8b 45 14             	mov    0x14(%ebp),%eax
c010d534:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d538:	8b 45 10             	mov    0x10(%ebp),%eax
c010d53b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d53f:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010d542:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d546:	c7 04 24 90 d4 10 c0 	movl   $0xc010d490,(%esp)
c010d54d:	e8 53 fb ff ff       	call   c010d0a5 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c010d552:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d555:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010d558:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d55b:	c9                   	leave  
c010d55c:	c3                   	ret    

c010d55d <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010d55d:	55                   	push   %ebp
c010d55e:	89 e5                	mov    %esp,%ebp
c010d560:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010d563:	8b 45 08             	mov    0x8(%ebp),%eax
c010d566:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010d56c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010d56f:	b8 20 00 00 00       	mov    $0x20,%eax
c010d574:	2b 45 0c             	sub    0xc(%ebp),%eax
c010d577:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010d57a:	89 c1                	mov    %eax,%ecx
c010d57c:	d3 ea                	shr    %cl,%edx
c010d57e:	89 d0                	mov    %edx,%eax
}
c010d580:	c9                   	leave  
c010d581:	c3                   	ret    

c010d582 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010d582:	55                   	push   %ebp
c010d583:	89 e5                	mov    %esp,%ebp
c010d585:	57                   	push   %edi
c010d586:	56                   	push   %esi
c010d587:	53                   	push   %ebx
c010d588:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010d58b:	a1 a0 1e 13 c0       	mov    0xc0131ea0,%eax
c010d590:	8b 15 a4 1e 13 c0    	mov    0xc0131ea4,%edx
c010d596:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010d59c:	6b f0 05             	imul   $0x5,%eax,%esi
c010d59f:	01 f7                	add    %esi,%edi
c010d5a1:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c010d5a6:	f7 e6                	mul    %esi
c010d5a8:	8d 34 17             	lea    (%edi,%edx,1),%esi
c010d5ab:	89 f2                	mov    %esi,%edx
c010d5ad:	83 c0 0b             	add    $0xb,%eax
c010d5b0:	83 d2 00             	adc    $0x0,%edx
c010d5b3:	89 c7                	mov    %eax,%edi
c010d5b5:	83 e7 ff             	and    $0xffffffff,%edi
c010d5b8:	89 f9                	mov    %edi,%ecx
c010d5ba:	0f b7 da             	movzwl %dx,%ebx
c010d5bd:	89 0d a0 1e 13 c0    	mov    %ecx,0xc0131ea0
c010d5c3:	89 1d a4 1e 13 c0    	mov    %ebx,0xc0131ea4
    unsigned long long result = (next >> 12);
c010d5c9:	a1 a0 1e 13 c0       	mov    0xc0131ea0,%eax
c010d5ce:	8b 15 a4 1e 13 c0    	mov    0xc0131ea4,%edx
c010d5d4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010d5d8:	c1 ea 0c             	shr    $0xc,%edx
c010d5db:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d5de:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010d5e1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010d5e8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d5eb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d5ee:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010d5f1:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010d5f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d5f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d5fa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d5fe:	74 1c                	je     c010d61c <rand+0x9a>
c010d600:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d603:	ba 00 00 00 00       	mov    $0x0,%edx
c010d608:	f7 75 dc             	divl   -0x24(%ebp)
c010d60b:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010d60e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d611:	ba 00 00 00 00       	mov    $0x0,%edx
c010d616:	f7 75 dc             	divl   -0x24(%ebp)
c010d619:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d61c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d61f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d622:	f7 75 dc             	divl   -0x24(%ebp)
c010d625:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010d628:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010d62b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d62e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d631:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d634:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010d637:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010d63a:	83 c4 24             	add    $0x24,%esp
c010d63d:	5b                   	pop    %ebx
c010d63e:	5e                   	pop    %esi
c010d63f:	5f                   	pop    %edi
c010d640:	5d                   	pop    %ebp
c010d641:	c3                   	ret    

c010d642 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010d642:	55                   	push   %ebp
c010d643:	89 e5                	mov    %esp,%ebp
    next = seed;
c010d645:	8b 45 08             	mov    0x8(%ebp),%eax
c010d648:	ba 00 00 00 00       	mov    $0x0,%edx
c010d64d:	a3 a0 1e 13 c0       	mov    %eax,0xc0131ea0
c010d652:	89 15 a4 1e 13 c0    	mov    %edx,0xc0131ea4
}
c010d658:	5d                   	pop    %ebp
c010d659:	c3                   	ret    
