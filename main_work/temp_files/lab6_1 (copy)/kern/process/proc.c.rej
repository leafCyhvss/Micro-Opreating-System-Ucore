--- kern/process/proc.c	2019-12-19 17:20:39.373278000 +0800
+++ kern/process/proc.c	2019-09-15 09:39:34.000000000 +0800
@@ -109,20 +109,6 @@
      *       uint32_t wait_state;                        // waiting state
      *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
 	 */
-        proc->state = PROC_UNINIT;//设置进程为未初始化状态
-        proc->pid = -1; //未初始化的的进程id为-1
-        proc->runs = 0;//初始化时间片
-        proc->kstack = 0; //内存栈的地址
-        proc->need_resched = 0;//不需要调度
-        proc->parent = NULL;  //父节点null
-        proc->mm = NULL;      //内核线程常驻内存
-        memset(&(proc->context), 0, sizeof(struct context));//上下文初始化0
-        proc->tf = NULL; //中断帧指针null
-        proc->cr3 = boot_cr3;//页目录设为内核页目录表的基址
-        proc->flags = 0;//标志位0
-        memset(proc->name, 0, PROC_NAME_LEN);//进程名设为0
-        proc->wait_state = 0;//初始化进程等待状态
-        proc->cptr = proc->optr = proc->yptr = NULL;//进程相关指针初始化:孩子/旧兄弟/新兄弟
     }
     return proc;
 }
@@ -396,7 +382,7 @@
      *                 setup the kernel entry point and stack of process
      *   hash_proc:    add proc into proc hash_list
      *   get_pid:      alloc a unique pid for process
-     *   wakup_proc:   set proc->state = PROC_RUNNABLE
+     *   wakeup_proc:  set proc->state = PROC_RUNNABLE
      * VARIABLES:
      *   proc_list:    the process set's list
      *   nr_process:   the number of process set
@@ -407,8 +393,9 @@
     //    3. call copy_mm to dup OR share mm according clone_flag
     //    4. call copy_thread to setup tf & context in proc_struct
     //    5. insert proc_struct into hash_list && proc_list
-    //    6. call wakup_proc to make the new child process RUNNABLE
+    //    6. call wakeup_proc to make the new child process RUNNABLE
     //    7. set ret vaule using child proc's pid
+
 	//LAB5 YOUR CODE : (update LAB4 steps)
    /* Some Functions
     *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
@@ -416,34 +403,7 @@
 	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
 	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
     */
-    if ((proc = alloc_proc()) == NULL) {
-        goto fork_out;
-    }
-
-    proc->parent = current;
-    assert(current->wait_state == 0);
-
-    if (setup_kstack(proc) != 0) {
-        goto bad_fork_cleanup_proc;
-    }
-    if (copy_mm(clone_flags, proc) != 0) {
-        goto bad_fork_cleanup_kstack;
-    }
-    copy_thread(proc, stack, tf);
-
-    bool intr_flag;
-    local_intr_save(intr_flag);
-    {
-        proc->pid = get_pid();
-        hash_proc(proc);
-        set_links(proc);
-
-    }
-    local_intr_restore(intr_flag);
-
-    wakeup_proc(proc);
-
-    ret = proc->pid;
+	
 fork_out:
     return ret;
 
@@ -642,11 +602,6 @@
      *          tf_eip should be the entry point of this binary program (elf->e_entry)
      *          tf_eflags should be set to enable computer to produce Interrupt
      */
-    tf->tf_cs = USER_CS;
-    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
-    tf->tf_esp = USTACKTOP;
-    tf->tf_eip = elf->e_entry;
-    tf->tf_eflags = FL_IF;
     ret = 0;
 out:
     return ret;
@@ -660,7 +615,7 @@
     goto out;
 }
 
-// do_execve - call exit_mmap(mm)&pug_pgdir(mm) to reclaim memory space of current process
+// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
 //           - call load_icode to setup new memory space accroding binary prog.
 int
 do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
@@ -847,7 +802,7 @@
     assert(nr_process == 2);
     assert(list_next(&proc_list) == &(initproc->list_link));
     assert(list_prev(&proc_list) == &(initproc->list_link));
-    assert(kernel_allocated_store == kallocated());
+
     cprintf("init check memory pass.\n");
     return 0;
 }
